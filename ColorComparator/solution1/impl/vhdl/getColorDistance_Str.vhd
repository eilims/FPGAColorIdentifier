-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getColorDistance_Str is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixel_V_TVALID : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    pixel_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    pixel_V_TREADY : OUT STD_LOGIC;
    color_V : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0);
    pixel_V_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of getColorDistance_Str is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_B : STD_LOGIC_VECTOR (13 downto 0) := "00000000001011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_V_fu_151_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_reg_498 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_165_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_reg_503 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_175_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_508 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_2_fu_189_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_reg_513 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_198_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_reg_518 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_204_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_523 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_fu_214_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_13_reg_528 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_14_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_538 : STD_LOGIC_VECTOR (20 downto 0);
    signal result_1_fu_236_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_reg_543 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_fu_242_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_reg_548 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_314_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_reg_553 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_6_fu_351_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_6_reg_558 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_16_fu_425_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_reg_563 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_fxp_sqrt_fu_88_in_val_V_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fxp_sqrt_fu_88_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fxp_sqrt_fu_88_ap_ce : STD_LOGIC;
    signal pixelRed_V_fu_93_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_139_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_cast_fu_143_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_V_fu_103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorGreen_V_fu_125_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_1_fu_157_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_175_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_V_fu_107_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorBlue_V_fu_129_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_2_fu_181_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_2_fu_185_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_198_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_cast_fu_195_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_fu_198_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_489_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal result_1_fu_236_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_2_cast_fu_233_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_fu_249_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal result_cast6_fu_246_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_shl1_cast_fu_256_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_260_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_neg1_fu_274_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_8_fu_280_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_cast_fu_290_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_10_fu_300_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_7_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_294_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_cast_fu_310_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_neg9_fu_322_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_15_fu_327_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_cast_fu_337_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_fu_341_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_11_cast_fu_347_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_shl_fu_360_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl_cast_fu_367_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal result_2_cast3_fu_357_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_9_fu_371_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_neg_fu_385_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_20_fu_391_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_cast_fu_401_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_21_fu_411_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_19_fu_377_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_405_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_cast_fu_421_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_fu_433_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_17_fu_444_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_22_fu_455_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_1_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to14 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fxp_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_val_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component getPixelClassificbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;



begin
    grp_fxp_sqrt_fu_88 : component fxp_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_val_V_read => grp_fxp_sqrt_fu_88_in_val_V_read,
        ap_return => grp_fxp_sqrt_fu_88_ap_return,
        ap_ce => grp_fxp_sqrt_fu_88_ap_ce);

    getPixelClassificbkb_U2 : component getPixelClassificbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 9,
        dout_WIDTH => 23)
    port map (
        din0 => tmp1_reg_508,
        din1 => r_V_1_reg_503,
        dout => tmp_5_fu_489_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then
                r_V_1_reg_503 <= r_V_1_fu_165_p2;
                r_V_2_reg_513 <= r_V_2_fu_189_p2;
                r_V_reg_498 <= r_V_fu_151_p2;
                result_1_reg_543 <= result_1_fu_236_p2;
                result_reg_518 <= result_fu_198_p2;
                tmp1_reg_508 <= tmp1_fu_175_p2;
                tmp_13_reg_528 <= tmp_13_fu_214_p1;
                tmp_14_reg_533 <= tmp_5_fu_489_p2(22 downto 22);
                tmp_18_reg_548 <= tmp_18_fu_242_p1;
                tmp_3_reg_538 <= tmp_5_fu_489_p2(22 downto 2);
                tmp_reg_523 <= tmp_fu_204_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                tmp_16_reg_563 <= tmp_16_fu_425_p3;
                tmp_6_reg_558 <= tmp_6_fu_351_p3;
                tmp_s_reg_553 <= tmp_s_fu_314_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, pixel_V_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((pixel_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, pixel_V_TVALID, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_1) and ((pixel_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, pixel_V_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((pixel_V_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to14 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to14)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to14 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fxp_sqrt_fu_88_ap_return(19 downto 8);
    colorBlue_V_fu_129_p4 <= color_V(15 downto 8);
    colorGreen_V_fu_125_p1 <= color_V(8 - 1 downto 0);

    grp_fxp_sqrt_fu_88_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            grp_fxp_sqrt_fu_88_ap_ce <= ap_const_logic_1;
        else 
            grp_fxp_sqrt_fu_88_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fxp_sqrt_fu_88_in_val_V_read <= std_logic_vector(unsigned(tmp2_fu_466_p2) + unsigned(p_Val2_1_fu_451_p1));
    lhs_V_1_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelGreen_V_fu_103_p1),9));
    lhs_V_2_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelBlue_V_fu_107_p4),9));
    lhs_V_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelRed_V_fu_93_p4),9));
        number_assign_2_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_513),18));

        number_assign_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_498),18));

        p_Val2_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_444_p3),32));

        p_Val2_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_455_p3),32));

        p_Val2_s_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_433_p3),32));

    p_neg1_fu_274_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_2_fu_260_p2));
    p_neg9_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(tmp_13_reg_528));
    p_neg_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_9_fu_371_p2));
        p_shl1_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_249_p3),20));

    p_shl1_fu_249_p3 <= (tmp_reg_523 & ap_const_lv2_0);
        p_shl_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_360_p3),20));

    p_shl_fu_360_p3 <= (tmp_18_reg_548 & ap_const_lv2_0);
    pixelBlue_V_fu_107_p4 <= pixel_V_TDATA(15 downto 8);
    pixelGreen_V_fu_103_p1 <= pixel_V_TDATA(8 - 1 downto 0);
    pixelRed_V_fu_93_p4 <= pixel_V_TDATA(23 downto 16);

    pixel_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, pixel_V_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pixel_V_TDATA_blk_n <= pixel_V_TVALID;
        else 
            pixel_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pixel_V_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce))) then 
            pixel_V_TREADY <= ap_const_logic_1;
        else 
            pixel_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    r_V_1_fu_165_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_157_p1) - unsigned(rhs_V_1_fu_161_p1));
    r_V_2_fu_189_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_181_p1) - unsigned(rhs_V_2_fu_185_p1));
    r_V_fu_151_p2 <= std_logic_vector(unsigned(lhs_V_fu_139_p1) - unsigned(rhs_V_cast_fu_143_p3));
    result_1_fu_236_p0 <= number_assign_2_cast_fu_233_p1(9 - 1 downto 0);
    result_1_fu_236_p1 <= number_assign_2_cast_fu_233_p1(9 - 1 downto 0);
    result_1_fu_236_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_236_p0) * signed(result_1_fu_236_p1))), 18));
        result_2_cast3_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_1_reg_543),20));

        result_cast6_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(result_reg_518),20));

    result_fu_198_p0 <= number_assign_cast_fu_195_p1(9 - 1 downto 0);
    result_fu_198_p1 <= number_assign_cast_fu_195_p1(9 - 1 downto 0);
    result_fu_198_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_198_p0) * signed(result_fu_198_p1))), 18));
    rhs_V_1_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorGreen_V_fu_125_p1),9));
    rhs_V_2_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorBlue_V_fu_129_p4),9));
    rhs_V_cast_fu_143_p3 <= 
        ap_const_lv9_FF when (rhs_V_fu_117_p3(0) = '1') else 
        ap_const_lv9_0;
    rhs_V_fu_117_p3 <= color_V(16 downto 16);
    tmp1_fu_175_p1 <= r_V_1_fu_165_p2;
    tmp1_fu_175_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv14_B) * signed(tmp1_fu_175_p1))), 14));
    tmp2_fu_466_p2 <= std_logic_vector(signed(p_Val2_s_fu_440_p1) + signed(p_Val2_2_fu_462_p1));
        tmp_10_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_327_p4),20));

    tmp_10_fu_300_p4 <= tmp_2_fu_260_p2(19 downto 1);
        tmp_11_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_341_p2),21));

    tmp_11_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_14_cast_fu_401_p1));
    tmp_12_fu_433_p3 <= (tmp_s_reg_553 & ap_const_lv8_0);
    tmp_13_fu_214_p1 <= tmp_5_fu_489_p2(21 - 1 downto 0);
        tmp_14_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_391_p4),20));

    tmp_15_fu_327_p4 <= p_neg9_fu_322_p2(20 downto 2);
    tmp_16_fu_425_p3 <= 
        tmp_11_fu_405_p2 when (tmp_19_fu_377_p3(0) = '1') else 
        tmp_17_cast_fu_421_p1;
        tmp_17_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_411_p4),20));

    tmp_17_fu_444_p3 <= (tmp_6_reg_558 & ap_const_lv8_0);
    tmp_18_fu_242_p1 <= result_1_fu_236_p2(17 - 1 downto 0);
    tmp_19_fu_377_p3 <= tmp_9_fu_371_p2(19 downto 19);
    tmp_1_fu_294_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_cast_fu_290_p1));
    tmp_20_fu_391_p4 <= p_neg_fu_385_p2(19 downto 1);
    tmp_21_fu_411_p4 <= tmp_9_fu_371_p2(19 downto 1);
    tmp_22_fu_455_p3 <= (tmp_16_reg_563 & ap_const_lv8_0);
    tmp_2_fu_260_p2 <= std_logic_vector(signed(result_cast6_fu_246_p1) + signed(p_shl1_cast_fu_256_p1));
        tmp_4_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_300_p4),20));

    tmp_4_fu_341_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(tmp_10_cast_fu_337_p1));
    tmp_6_fu_351_p3 <= 
        tmp_11_cast_fu_347_p1 when (tmp_14_reg_533(0) = '1') else 
        tmp_3_reg_538;
    tmp_7_fu_266_p3 <= tmp_2_fu_260_p2(19 downto 19);
    tmp_8_fu_280_p4 <= p_neg1_fu_274_p2(19 downto 1);
    tmp_9_fu_371_p2 <= std_logic_vector(signed(p_shl_cast_fu_367_p1) - signed(result_2_cast3_fu_357_p1));
        tmp_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_280_p4),20));

    tmp_fu_204_p1 <= result_fu_198_p2(17 - 1 downto 0);
    tmp_s_fu_314_p3 <= 
        tmp_1_fu_294_p2 when (tmp_7_fu_266_p3(0) = '1') else 
        tmp_4_cast_fu_310_p1;
end behav;
