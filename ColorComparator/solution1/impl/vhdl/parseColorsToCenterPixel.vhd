-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity parseColorsToCenterPixel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixelArray_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pixelArray_ce0 : OUT STD_LOGIC;
    pixelArray_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    pixelArray_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    pixelArray_ce1 : OUT STD_LOGIC;
    pixelArray_we1 : OUT STD_LOGIC;
    pixelArray_d1 : OUT STD_LOGIC_VECTOR (95 downto 0);
    selectedColorArray_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    selectedColorArray_ce0 : OUT STD_LOGIC;
    selectedColorArray_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of parseColorsToCenterPixel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "parseColorsToCenterPixel,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1320,HLS_SYN_LUT=6559}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_color_array_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_color_array_ce0 : STD_LOGIC;
    signal p_color_array_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal centerColor_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter2_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter10_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter11_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter12_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter13_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter14_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter15_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter16_minimumDistanceIndex_reg_311 : STD_LOGIC_VECTOR (2 downto 0);
    signal minimumDistance_i_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_335 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_urem_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal pixelArray_load_reg_1066 : STD_LOGIC_VECTOR (95 downto 0);
    signal pixelRed_i_cast_fu_408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelRed_i_cast_reg_1072 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_i_cast_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_i_cast_reg_1077 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_i_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_i_cast_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_i_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_436_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1091 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal colorBlue_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorBlue_reg_1101 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_372_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorGreen_reg_1106 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal number_assign_3_fu_467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_3_reg_1111 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp0_iter2_number_assign_3_reg_1111 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_3_fu_487_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_3_reg_1116 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_19_fu_506_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_reg_1121 : STD_LOGIC_VECTOR (16 downto 0);
    signal powerSummation_V_1_fu_586_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal powerSummation_V_1_reg_1127 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_reg_1132 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_minimumDistanceI_fu_615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal distance_0_minimumDi_fu_623_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_9_reg_1152 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1167 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal colorRed_cast_cast_fu_687_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorRed_cast_cast_reg_1186 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal colorGreen_cast_fu_695_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorGreen_cast_reg_1191 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorBlue_cast_fu_699_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorBlue_cast_reg_1196 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state30_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state31_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state32_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state33_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter4_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter5_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter6_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter7_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter8_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter9_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter10_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter11_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter12_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter13_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter14_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter15_exitcond_reg_1201 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_709_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal idx_urem_fu_727_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter1_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter2_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter3_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter4_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter5_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter6_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter7_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter8_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter9_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter10_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter11_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter12_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter13_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp1_iter14_tmp_24_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal pixelRed_1_reg_1231 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_1_fu_810_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_reg_1236 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_829_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_reg_1241 : STD_LOGIC_VECTOR (16 downto 0);
    signal powerSummation_V_fu_918_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal powerSummation_V_reg_1247 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fxp_sqrt_fu_357_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal result_V_reg_1252 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal tmp_16_fu_924_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_reg_1257 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_931_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_reg_1264 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_1270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_943_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_reg_1278 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal tempArray_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempArray_ce0 : STD_LOGIC;
    signal tempArray_we0 : STD_LOGIC;
    signal tempArray_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempArray_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempArray_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tempArray_ce1 : STD_LOGIC;
    signal tempArray_we1 : STD_LOGIC;
    signal tempArray_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fxp_sqrt_fu_357_in_val_V_read : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fxp_sqrt_fu_357_ap_ce : STD_LOGIC;
    signal ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_i5_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelRed_fu_398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelGreen_fu_412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelBlue_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal colorRed_i_cast_cast_fu_459_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorGreen_i_cast_fu_472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_4_fu_478_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_3_fu_487_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_3_i_ca_fu_483_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_3_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorBlue_i_cast_fu_475_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_5_fu_493_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_506_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_fu_515_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_i_cast_fu_512_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_2_fu_515_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_2_fu_515_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_10_fu_521_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_533_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl_i_i_fu_544_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_i_i_fu_555_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl_i_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl9_i_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_fu_566_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_5_i6_cast_c_fu_572_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_4_cast_fu_540_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp8_fu_576_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_3_cast_fu_529_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_cast_fu_582_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal minimumDistance_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i7_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minimumDistanceIndex_1_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_679_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal colorBlue_1_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_urem_fu_715_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_745_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_753_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelGreen_1_fu_783_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelBlue_1_fu_769_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelGreen_cast_fu_793_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_fu_801_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_1_fu_810_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_cast_fu_806_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_810_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_cast_fu_797_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_2_fu_816_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_829_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_829_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelRed_cast_fu_835_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_fu_838_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_847_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_cast_c_fu_843_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_fu_847_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_847_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_853_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_23_fu_865_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl_i_fu_876_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_i_fu_887_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl_i_cast_fu_883_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl9_i_cast_fu_894_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_1_fu_898_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_2_cast_cast_fu_904_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_1_cast_fu_872_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp9_fu_908_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_cast_fu_861_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp9_cast_fu_914_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_21_fu_949_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_962_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_972_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_967_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_977_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_958_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_39_fu_983_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_42_fu_995_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_43_fu_1001_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_40_fu_987_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_41_fu_991_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_45_fu_1018_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_46_fu_1024_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal p_demorgan_fu_1030_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_47_fu_1036_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_44_fu_1011_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_48_fu_1042_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_49_fu_1048_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_fu_753_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component fxp_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_val_V_read : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component parseColorsToCentbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component parseColorsToCentcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    p_color_array_U : component parseColorsToCentbkb
    generic map (
        DataWidth => 17,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_color_array_address0,
        ce0 => p_color_array_ce0,
        q0 => p_color_array_q0);

    tempArray_U : component parseColorsToCentcud
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tempArray_address0,
        ce0 => tempArray_ce0,
        we0 => tempArray_we0,
        d0 => tempArray_d0,
        q0 => tempArray_q0,
        address1 => tempArray_address1,
        ce1 => tempArray_ce1,
        we1 => tempArray_we1,
        d1 => tempArray_d1);

    grp_fxp_sqrt_fu_357 : component fxp_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_val_V_read => grp_fxp_sqrt_fu_357_in_val_V_read,
        ap_return => grp_fxp_sqrt_fu_357_ap_return,
        ap_ce => grp_fxp_sqrt_fu_357_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state26);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    centerColor_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_reg_pp0_iter16_exitcond_i_reg_1087 = ap_const_lv1_0))) then 
                centerColor_reg_299 <= i_0_minimumDistanceI_fu_615_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                centerColor_reg_299 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i1_reg_335 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_703_p2 = ap_const_lv1_0))) then 
                i1_reg_335 <= i_fu_709_p2;
            end if; 
        end if;
    end process;

    minimumDistanceIndex_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_reg_1087 = ap_const_lv1_0))) then 
                minimumDistanceIndex_reg_311 <= i_1_reg_1091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minimumDistanceIndex_reg_311 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    minimumDistance_i_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_reg_pp0_iter16_exitcond_i_reg_1087 = ap_const_lv1_0))) then 
                minimumDistance_i_reg_323 <= distance_0_minimumDi_fu_623_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                minimumDistance_i_reg_323 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    phi_urem_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                phi_urem_reg_346 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_703_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_346 <= idx_urem_fu_727_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_exitcond_i_reg_1087 <= ap_reg_pp0_iter9_exitcond_i_reg_1087;
                ap_reg_pp0_iter10_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter9_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter11_exitcond_i_reg_1087 <= ap_reg_pp0_iter10_exitcond_i_reg_1087;
                ap_reg_pp0_iter11_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter10_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter12_exitcond_i_reg_1087 <= ap_reg_pp0_iter11_exitcond_i_reg_1087;
                ap_reg_pp0_iter12_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter11_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter13_exitcond_i_reg_1087 <= ap_reg_pp0_iter12_exitcond_i_reg_1087;
                ap_reg_pp0_iter13_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter12_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter14_exitcond_i_reg_1087 <= ap_reg_pp0_iter13_exitcond_i_reg_1087;
                ap_reg_pp0_iter14_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter13_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter15_exitcond_i_reg_1087 <= ap_reg_pp0_iter14_exitcond_i_reg_1087;
                ap_reg_pp0_iter15_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter14_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter16_exitcond_i_reg_1087 <= ap_reg_pp0_iter15_exitcond_i_reg_1087;
                ap_reg_pp0_iter16_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter15_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter2_exitcond_i_reg_1087 <= ap_reg_pp0_iter1_exitcond_i_reg_1087;
                ap_reg_pp0_iter2_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter1_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter2_number_assign_3_reg_1111 <= number_assign_3_reg_1111;
                ap_reg_pp0_iter3_exitcond_i_reg_1087 <= ap_reg_pp0_iter2_exitcond_i_reg_1087;
                ap_reg_pp0_iter3_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter2_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter4_exitcond_i_reg_1087 <= ap_reg_pp0_iter3_exitcond_i_reg_1087;
                ap_reg_pp0_iter4_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter3_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter5_exitcond_i_reg_1087 <= ap_reg_pp0_iter4_exitcond_i_reg_1087;
                ap_reg_pp0_iter5_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter4_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter6_exitcond_i_reg_1087 <= ap_reg_pp0_iter5_exitcond_i_reg_1087;
                ap_reg_pp0_iter6_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter5_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter7_exitcond_i_reg_1087 <= ap_reg_pp0_iter6_exitcond_i_reg_1087;
                ap_reg_pp0_iter7_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter6_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter8_exitcond_i_reg_1087 <= ap_reg_pp0_iter7_exitcond_i_reg_1087;
                ap_reg_pp0_iter8_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter7_minimumDistanceIndex_reg_311;
                ap_reg_pp0_iter9_exitcond_i_reg_1087 <= ap_reg_pp0_iter8_exitcond_i_reg_1087;
                ap_reg_pp0_iter9_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter8_minimumDistanceIndex_reg_311;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_reg_1087 <= exitcond_i_reg_1087;
                ap_reg_pp0_iter1_minimumDistanceIndex_reg_311 <= minimumDistanceIndex_reg_311;
                exitcond_i_reg_1087 <= exitcond_i_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                ap_reg_pp1_iter10_exitcond_reg_1201 <= ap_reg_pp1_iter9_exitcond_reg_1201;
                ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter10_tmp_24_reg_1226 <= ap_reg_pp1_iter9_tmp_24_reg_1226;
                ap_reg_pp1_iter11_exitcond_reg_1201 <= ap_reg_pp1_iter10_exitcond_reg_1201;
                ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter11_tmp_24_reg_1226 <= ap_reg_pp1_iter10_tmp_24_reg_1226;
                ap_reg_pp1_iter12_exitcond_reg_1201 <= ap_reg_pp1_iter11_exitcond_reg_1201;
                ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter12_tmp_24_reg_1226 <= ap_reg_pp1_iter11_tmp_24_reg_1226;
                ap_reg_pp1_iter13_exitcond_reg_1201 <= ap_reg_pp1_iter12_exitcond_reg_1201;
                ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter13_tmp_24_reg_1226 <= ap_reg_pp1_iter12_tmp_24_reg_1226;
                ap_reg_pp1_iter14_exitcond_reg_1201 <= ap_reg_pp1_iter13_exitcond_reg_1201;
                ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter14_tmp_24_reg_1226 <= ap_reg_pp1_iter13_tmp_24_reg_1226;
                ap_reg_pp1_iter15_exitcond_reg_1201 <= ap_reg_pp1_iter14_exitcond_reg_1201;
                ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter2_exitcond_reg_1201 <= ap_reg_pp1_iter1_exitcond_reg_1201;
                ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter2_tmp_24_reg_1226 <= ap_reg_pp1_iter1_tmp_24_reg_1226;
                ap_reg_pp1_iter3_exitcond_reg_1201 <= ap_reg_pp1_iter2_exitcond_reg_1201;
                ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter3_tmp_24_reg_1226 <= ap_reg_pp1_iter2_tmp_24_reg_1226;
                ap_reg_pp1_iter4_exitcond_reg_1201 <= ap_reg_pp1_iter3_exitcond_reg_1201;
                ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter4_tmp_24_reg_1226 <= ap_reg_pp1_iter3_tmp_24_reg_1226;
                ap_reg_pp1_iter5_exitcond_reg_1201 <= ap_reg_pp1_iter4_exitcond_reg_1201;
                ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter5_tmp_24_reg_1226 <= ap_reg_pp1_iter4_tmp_24_reg_1226;
                ap_reg_pp1_iter6_exitcond_reg_1201 <= ap_reg_pp1_iter5_exitcond_reg_1201;
                ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter6_tmp_24_reg_1226 <= ap_reg_pp1_iter5_tmp_24_reg_1226;
                ap_reg_pp1_iter7_exitcond_reg_1201 <= ap_reg_pp1_iter6_exitcond_reg_1201;
                ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter7_tmp_24_reg_1226 <= ap_reg_pp1_iter6_tmp_24_reg_1226;
                ap_reg_pp1_iter8_exitcond_reg_1201 <= ap_reg_pp1_iter7_exitcond_reg_1201;
                ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter8_tmp_24_reg_1226 <= ap_reg_pp1_iter7_tmp_24_reg_1226;
                ap_reg_pp1_iter9_exitcond_reg_1201 <= ap_reg_pp1_iter8_exitcond_reg_1201;
                ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter9_tmp_24_reg_1226 <= ap_reg_pp1_iter8_tmp_24_reg_1226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                ap_reg_pp1_iter1_exitcond_reg_1201 <= exitcond_reg_1201;
                ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220 <= pixelArray_addr_3_reg_1220;
                ap_reg_pp1_iter1_tmp_24_reg_1226 <= tmp_24_reg_1226;
                exitcond_reg_1201 <= exitcond_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    colorBlue_cast_reg_1196(7 downto 0) <= colorBlue_cast_fu_699_p1(7 downto 0);
                    colorGreen_cast_reg_1191(7 downto 0) <= colorGreen_cast_fu_695_p1(7 downto 0);
                    colorRed_cast_cast_reg_1186(7 downto 0) <= colorRed_cast_cast_fu_687_p3(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_reg_1087 = ap_const_lv1_0))) then
                colorBlue_reg_1101 <= colorBlue_fu_447_p1;
                number_assign_3_reg_1111 <= number_assign_3_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_reg_1087 = ap_const_lv1_0))) then
                colorGreen_reg_1106 <= p_color_array_q0(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_1_reg_1091 <= i_1_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_fu_703_p2 = ap_const_lv1_0))) then
                pixelArray_addr_3_reg_1220 <= tmp_s_fu_740_p1(2 - 1 downto 0);
                tmp_24_reg_1226 <= mul_fu_753_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                pixelArray_load_reg_1066 <= pixelArray_q0;
                    pixelBlue_i_cast_reg_1082(7 downto 0) <= pixelBlue_i_cast_fu_426_p1(7 downto 0);
                    pixelGreen_i_cast_reg_1077(7 downto 0) <= pixelGreen_i_cast_fu_422_p1(7 downto 0);
                    pixelRed_i_cast_reg_1072(7 downto 0) <= pixelRed_i_cast_fu_408_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_reg_1201 = ap_const_lv1_0))) then
                pixelRed_1_reg_1231 <= tempArray_q0(23 downto 16);
                result_1_reg_1236 <= result_1_fu_810_p2;
                tmp_30_reg_1241 <= tmp_30_fu_829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter2_exitcond_i_reg_1087 = ap_const_lv1_0))) then
                    powerSummation_V_1_reg_1127(29 downto 8) <= powerSummation_V_1_fu_586_p2(29 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_reg_pp1_iter1_exitcond_reg_1201 = ap_const_lv1_0))) then
                    powerSummation_V_reg_1247(29 downto 8) <= powerSummation_V_fu_918_p2(29 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_382 <= pixelArray_q0(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond_i_reg_1087 = ap_const_lv1_0))) then
                result_3_reg_1116 <= result_3_fu_487_p2;
                tmp_19_reg_1121 <= tmp_19_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (ap_reg_pp1_iter14_exitcond_reg_1201 = ap_const_lv1_0))) then
                result_V_reg_1252 <= grp_fxp_sqrt_fu_357_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter15_exitcond_i_reg_1087 = ap_const_lv1_0))) then
                tmp_15_reg_1132 <= grp_fxp_sqrt_fu_357_ap_return(19 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_reg_pp1_iter14_exitcond_reg_1201 = ap_const_lv1_0))) then
                    tmp_16_reg_1257(6 downto 5) <= tmp_16_fu_924_p3(6 downto 5);
                    tmp_17_reg_1264(6 downto 5) <= tmp_17_fu_931_p2(6 downto 5);
                tmp_32_reg_1270 <= tmp_32_fu_937_p2;
                    tmp_34_reg_1278(6 downto 5) <= tmp_34_fu_943_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_2_reg_1162 <= pixelArray_q0(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_9_reg_1152 <= pixelArray_load_reg_1066(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_reg_1167 <= tmp_fu_664_p1;
            end if;
        end if;
    end process;
    pixelRed_i_cast_reg_1072(8) <= '0';
    pixelGreen_i_cast_reg_1077(8) <= '0';
    pixelBlue_i_cast_reg_1082(8) <= '0';
    powerSummation_V_1_reg_1127(7 downto 0) <= "00000000";
    colorRed_cast_cast_reg_1186(8) <= '0';
    colorGreen_cast_reg_1191(8) <= '0';
    colorBlue_cast_reg_1196(8) <= '0';
    powerSummation_V_reg_1247(7 downto 0) <= "00000000";
    tmp_16_reg_1257(4 downto 0) <= "00000";
    tmp_17_reg_1264(4 downto 0) <= "11111";
    tmp_34_reg_1278(4 downto 0) <= "11111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_i_fu_430_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, tmp_1_fu_669_p2, ap_CS_fsm_state24, exitcond_fu_703_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter15, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter16, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_i_fu_430_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond_i_fu_430_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_1_fu_669_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_703_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_703_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(3);
    ap_CS_fsm_state22 <= ap_CS_fsm(4);
    ap_CS_fsm_state23 <= ap_CS_fsm(5);
    ap_CS_fsm_state24 <= ap_CS_fsm(6);
    ap_CS_fsm_state25 <= ap_CS_fsm(7);
    ap_CS_fsm_state43 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_fu_430_p2)
    begin
        if ((exitcond_i_fu_430_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(exitcond_fu_703_p2)
    begin
        if ((exitcond_fu_703_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter16)
    begin
        if (((ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4_assign_proc : process(minimumDistanceIndex_reg_311, ap_CS_fsm_pp0_stage0, exitcond_i_reg_1087, i_1_reg_1091, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_i_reg_1087 = ap_const_lv1_0))) then 
            ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 <= i_1_reg_1091;
        else 
            ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 <= minimumDistanceIndex_reg_311;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    colorBlue_1_fu_675_p1 <= p_color_array_q0(8 - 1 downto 0);
    colorBlue_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorBlue_1_fu_675_p1),9));
    colorBlue_fu_447_p1 <= p_color_array_q0(8 - 1 downto 0);
    colorBlue_i_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorBlue_reg_1101),9));
    colorGreen_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_372_p4),9));
    colorGreen_i_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorGreen_reg_1106),9));
    colorRed_cast_cast_fu_687_p3 <= 
        ap_const_lv9_FF when (tmp_22_fu_679_p3(0) = '1') else 
        ap_const_lv9_0;
    colorRed_i_cast_cast_fu_459_p3 <= 
        ap_const_lv9_FF when (tmp_11_fu_451_p3(0) = '1') else 
        ap_const_lv9_0;
    distance_0_minimumDi_fu_623_p3 <= 
        minimumDistance_fu_606_p1 when (tmp_i7_fu_609_p2(0) = '1') else 
        minimumDistance_i_reg_323;
    exitcond_fu_703_p2 <= "1" when (i1_reg_335 = ap_const_lv4_8) else "0";
    exitcond_i_fu_430_p2 <= "1" when (ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 = ap_const_lv3_6) else "0";
    grp_fu_372_p4 <= p_color_array_q0(15 downto 8);

    grp_fxp_sqrt_fu_357_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            grp_fxp_sqrt_fu_357_ap_ce <= ap_const_logic_1;
        else 
            grp_fxp_sqrt_fu_357_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fxp_sqrt_fu_357_in_val_V_read_assign_proc : process(ap_reg_pp0_iter3_exitcond_i_reg_1087, powerSummation_V_1_reg_1127, ap_reg_pp1_iter2_exitcond_reg_1201, powerSummation_V_reg_1247, ap_enable_reg_pp0_iter4, ap_enable_reg_pp1_iter3, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_reg_pp1_iter2_exitcond_reg_1201 = ap_const_lv1_0))) then 
            grp_fxp_sqrt_fu_357_in_val_V_read <= powerSummation_V_reg_1247;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_reg_pp0_iter3_exitcond_i_reg_1087 = ap_const_lv1_0))) then 
            grp_fxp_sqrt_fu_357_in_val_V_read <= powerSummation_V_1_reg_1127;
        else 
            grp_fxp_sqrt_fu_357_in_val_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_0_minimumDistanceI_fu_615_p3 <= 
        minimumDistanceIndex_1_fu_602_p1 when (tmp_i7_fu_609_p2(0) = '1') else 
        centerColor_reg_299;
    i_1_fu_436_p2 <= std_logic_vector(unsigned(ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4) + unsigned(ap_const_lv3_1));
    i_fu_709_p2 <= std_logic_vector(unsigned(i1_reg_335) + unsigned(ap_const_lv4_1));
    idx_urem_fu_727_p3 <= 
        next_urem_fu_715_p2 when (tmp_25_fu_721_p2(0) = '1') else 
        ap_const_lv4_0;
    minimumDistanceIndex_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter16_minimumDistanceIndex_reg_311),32));
    minimumDistance_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_1132),32));
    mul_fu_753_p1 <= mul_fu_753_p10(3 - 1 downto 0);
    mul_fu_753_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_745_p1),8));
    mul_fu_753_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_fu_753_p1), 8));
    next_urem_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(phi_urem_reg_346));
        number_assign_1_cast_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_1_fu_801_p2),18));

    number_assign_1_fu_801_p2 <= std_logic_vector(unsigned(pixelGreen_cast_fu_793_p1) - unsigned(colorGreen_cast_reg_1191));
    number_assign_2_fu_816_p2 <= std_logic_vector(unsigned(pixelBlue_cast_fu_797_p1) - unsigned(colorBlue_cast_reg_1196));
    number_assign_3_fu_467_p2 <= std_logic_vector(unsigned(pixelRed_i_cast_reg_1072) - unsigned(colorRed_i_cast_cast_fu_459_p3));
        number_assign_3_i_ca_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_4_fu_478_p2),18));

    number_assign_4_fu_478_p2 <= std_logic_vector(unsigned(pixelGreen_i_cast_reg_1077) - unsigned(colorGreen_i_cast_fu_472_p1));
    number_assign_5_fu_493_p2 <= std_logic_vector(unsigned(pixelBlue_i_cast_reg_1082) - unsigned(colorBlue_i_cast_fu_475_p1));
        number_assign_cast_c_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_fu_838_p2),18));

    number_assign_fu_838_p2 <= std_logic_vector(unsigned(pixelRed_cast_fu_835_p1) - unsigned(colorRed_cast_cast_reg_1186));
        number_assign_i_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter2_number_assign_3_reg_1111),18));

        p_Val2_1_cast_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_865_p3),29));

    p_Val2_1_fu_898_p2 <= std_logic_vector(signed(p_shl_i_cast_fu_883_p1) - signed(p_shl9_i_cast_fu_894_p1));
        p_Val2_2_cast_cast_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_898_p2),29));

        p_Val2_3_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_521_p3),30));

        p_Val2_4_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_533_p3),29));

        p_Val2_5_i6_cast_c_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_566_p2),29));

        p_Val2_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_853_p3),30));

    p_Val2_s_fu_566_p2 <= std_logic_vector(signed(p_shl_i_i_cast_fu_551_p1) - signed(p_shl9_i_i_cast_fu_562_p1));

    p_color_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, tmp_reg_1167, ap_CS_fsm_state24, ap_block_pp0_stage0, tmp_i5_fu_442_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            p_color_array_address0 <= tmp_reg_1167(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_color_array_address0 <= tmp_i5_fu_442_p1(3 - 1 downto 0);
        else 
            p_color_array_address0 <= "XXX";
        end if; 
    end process;


    p_color_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            p_color_array_ce0 <= ap_const_logic_1;
        else 
            p_color_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_demorgan_fu_1030_p2 <= (tmp_46_fu_1024_p2 and tmp_45_fu_1018_p2);
        p_shl9_i_cast_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_i_fu_887_p3),28));

    p_shl9_i_fu_887_p3 <= (tmp_30_reg_1241 & ap_const_lv8_0);
        p_shl9_i_i_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_i_i_fu_555_p3),28));

    p_shl9_i_i_fu_555_p3 <= (tmp_19_reg_1121 & ap_const_lv8_0);
        p_shl_i_cast_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_i_fu_876_p3),28));

    p_shl_i_fu_876_p3 <= (tmp_30_reg_1241 & ap_const_lv10_0);
        p_shl_i_i_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_i_i_fu_544_p3),28));

    p_shl_i_i_fu_544_p3 <= (tmp_19_reg_1121 & ap_const_lv10_0);

    pixelArray_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220, ap_enable_reg_pp1_iter15, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_1))) then 
            pixelArray_address0 <= ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            pixelArray_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            pixelArray_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            pixelArray_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        else 
            pixelArray_address0 <= "XX";
        end if; 
    end process;

    pixelArray_address1 <= ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220;

    pixelArray_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22, ap_CS_fsm_state21, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter15 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            pixelArray_ce0 <= ap_const_logic_1;
        else 
            pixelArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pixelArray_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1))) then 
            pixelArray_ce1 <= ap_const_logic_1;
        else 
            pixelArray_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    pixelArray_d1 <= (tmp_49_fu_1048_p2 or tmp_48_fu_1042_p2);

    pixelArray_we1_assign_proc : process(ap_block_pp1_stage0_11001, ap_reg_pp1_iter15_exitcond_reg_1201, ap_enable_reg_pp1_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (ap_reg_pp1_iter15_exitcond_reg_1201 = ap_const_lv1_0))) then 
            pixelArray_we1 <= ap_const_logic_1;
        else 
            pixelArray_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pixelBlue_1_fu_769_p1 <= tempArray_q0(8 - 1 downto 0);
    pixelBlue_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelBlue_1_fu_769_p1),9));
    pixelBlue_fu_388_p4 <= pixelArray_q0(39 downto 32);
    pixelBlue_i_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelBlue_fu_388_p4),9));
    pixelGreen_1_fu_783_p4 <= tempArray_q0(15 downto 8);
    pixelGreen_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelGreen_1_fu_783_p4),9));
    pixelGreen_fu_412_p4 <= pixelArray_q0(47 downto 40);
    pixelGreen_i_cast_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelGreen_fu_412_p4),9));
    pixelRed_cast_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelRed_1_reg_1231),9));
    pixelRed_fu_398_p4 <= pixelArray_q0(55 downto 48);
    pixelRed_i_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelRed_fu_398_p4),9));
    powerSummation_V_1_fu_586_p2 <= std_logic_vector(signed(p_Val2_3_cast_fu_529_p1) + signed(tmp8_cast_fu_582_p1));
    powerSummation_V_fu_918_p2 <= std_logic_vector(signed(p_Val2_cast_fu_861_p1) + signed(tmp9_cast_fu_914_p1));
    result_1_fu_810_p0 <= number_assign_1_cast_fu_806_p1(9 - 1 downto 0);
    result_1_fu_810_p1 <= number_assign_1_cast_fu_806_p1(9 - 1 downto 0);
    result_1_fu_810_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_810_p0) * signed(result_1_fu_810_p1))), 18));
    result_2_fu_515_p0 <= number_assign_i_cast_fu_512_p1(9 - 1 downto 0);
    result_2_fu_515_p1 <= number_assign_i_cast_fu_512_p1(9 - 1 downto 0);
    result_2_fu_515_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_2_fu_515_p0) * signed(result_2_fu_515_p1))), 18));
    result_3_fu_487_p0 <= number_assign_3_i_ca_fu_483_p1(9 - 1 downto 0);
    result_3_fu_487_p1 <= number_assign_3_i_ca_fu_483_p1(9 - 1 downto 0);
    result_3_fu_487_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_3_fu_487_p0) * signed(result_3_fu_487_p1))), 18));
    result_fu_847_p0 <= number_assign_cast_c_fu_843_p1(9 - 1 downto 0);
    result_fu_847_p1 <= number_assign_cast_c_fu_843_p1(9 - 1 downto 0);
    result_fu_847_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_847_p0) * signed(result_fu_847_p1))), 18));
    selectedColorArray_address0 <= tmp_fu_664_p1(3 - 1 downto 0);

    selectedColorArray_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            selectedColorArray_ce0 <= ap_const_logic_1;
        else 
            selectedColorArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_address0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, tmp_8_fu_735_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            tempArray_address0 <= tmp_8_fu_735_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            tempArray_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tempArray_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            tempArray_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            tempArray_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            tempArray_address0 <= "XXX";
        end if; 
    end process;


    tempArray_address1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            tempArray_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tempArray_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            tempArray_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            tempArray_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            tempArray_address1 <= "XXX";
        end if; 
    end process;


    tempArray_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            tempArray_ce0 <= ap_const_logic_1;
        else 
            tempArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            tempArray_ce1 <= ap_const_logic_1;
        else 
            tempArray_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_d0_assign_proc : process(reg_382, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24, tmp_4_fu_631_p1, tmp_3_fu_644_p1, tmp_5_fu_659_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            tempArray_d0 <= reg_382;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            tempArray_d0 <= tmp_5_fu_659_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            tempArray_d0 <= tmp_3_fu_644_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            tempArray_d0 <= tmp_4_fu_631_p1;
        else 
            tempArray_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempArray_d1_assign_proc : process(reg_382, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, tmp_9_reg_1152, tmp_2_reg_1162, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            tempArray_d1 <= tmp_2_reg_1162;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            tempArray_d1 <= tmp_9_reg_1152;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            tempArray_d1 <= reg_382;
        else 
            tempArray_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tempArray_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            tempArray_we0 <= ap_const_logic_1;
        else 
            tempArray_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tempArray_we1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state21, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            tempArray_we1 <= ap_const_logic_1;
        else 
            tempArray_we1 <= ap_const_logic_0;
        end if; 
    end process;

        tmp8_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_fu_576_p2),30));

    tmp8_fu_576_p2 <= std_logic_vector(signed(p_Val2_5_i6_cast_c_fu_572_p1) + signed(p_Val2_4_cast_fu_540_p1));
        tmp9_cast_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_908_p2),30));

    tmp9_fu_908_p2 <= std_logic_vector(signed(p_Val2_2_cast_cast_fu_904_p1) + signed(p_Val2_1_cast_fu_872_p1));
    tmp_10_fu_521_p3 <= (result_2_fu_515_p2 & ap_const_lv9_0);
    tmp_11_fu_451_p3 <= p_color_array_q0(16 downto 16);
    tmp_13_fu_533_p3 <= (result_3_reg_1116 & ap_const_lv10_0);
    tmp_16_fu_924_p3 <= (ap_reg_pp1_iter14_tmp_24_reg_1226 & ap_const_lv5_0);
    tmp_17_fu_931_p2 <= (tmp_16_fu_924_p3 or ap_const_lv7_1F);
    tmp_19_fu_506_p0 <= number_assign_5_fu_493_p2;
    tmp_19_fu_506_p1 <= number_assign_5_fu_493_p2;
    tmp_19_fu_506_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_19_fu_506_p0) * signed(tmp_19_fu_506_p1))), 17));
    tmp_1_fu_669_p2 <= "1" when (selectedColorArray_q0 = ap_const_lv32_1) else "0";
    tmp_20_fu_853_p3 <= (result_fu_847_p2 & ap_const_lv9_0);
    tmp_21_fu_949_p4 <= result_V_reg_1252(19 downto 8);
    tmp_22_fu_679_p3 <= p_color_array_q0(16 downto 16);
    tmp_23_fu_865_p3 <= (result_1_reg_1236 & ap_const_lv10_0);
    tmp_25_fu_721_p2 <= "1" when (unsigned(next_urem_fu_715_p2) < unsigned(ap_const_lv4_3)) else "0";
    tmp_30_fu_829_p0 <= number_assign_2_fu_816_p2;
    tmp_30_fu_829_p1 <= number_assign_2_fu_816_p2;
    tmp_30_fu_829_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_30_fu_829_p0) * signed(tmp_30_fu_829_p1))), 17));
    tmp_31_fu_745_p1 <= i1_reg_335(3 - 1 downto 0);
    tmp_32_fu_937_p2 <= "1" when (unsigned(tmp_16_fu_924_p3) > unsigned(tmp_17_fu_931_p2)) else "0";
    tmp_33_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_949_p4),96));
    tmp_34_fu_943_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_16_fu_924_p3));
    tmp_35_fu_962_p3 <= 
        tmp_16_reg_1257 when (tmp_32_reg_1270(0) = '1') else 
        tmp_17_reg_1264;
    tmp_36_fu_967_p3 <= 
        tmp_17_reg_1264 when (tmp_32_reg_1270(0) = '1') else 
        tmp_16_reg_1257;
    tmp_37_fu_972_p3 <= 
        tmp_34_reg_1278 when (tmp_32_reg_1270(0) = '1') else 
        tmp_16_reg_1257;
    tmp_38_fu_977_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_35_fu_962_p3));
    tmp_39_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_972_p3),96));
    tmp_3_fu_644_p1 <= pixelArray_q0(32 - 1 downto 0);
    tmp_40_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_967_p3),96));
    tmp_41_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_977_p2),96));
    tmp_42_fu_995_p2 <= std_logic_vector(shift_left(unsigned(tmp_33_fu_958_p1),to_integer(unsigned('0' & tmp_39_fu_983_p1(31-1 downto 0)))));
    
    tmp_43_fu_1001_p4_proc : process(tmp_42_fu_995_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_43_fu_1001_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_42_fu_995_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_43_fu_1001_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_43_fu_1001_p4_i) := tmp_42_fu_995_p2(96-1-tmp_43_fu_1001_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_43_fu_1001_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_44_fu_1011_p3 <= 
        tmp_43_fu_1001_p4 when (tmp_32_reg_1270(0) = '1') else 
        tmp_42_fu_995_p2;
    tmp_45_fu_1018_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_40_fu_987_p1(31-1 downto 0)))));
    tmp_46_fu_1024_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_41_fu_991_p1(31-1 downto 0)))));
    tmp_47_fu_1036_p2 <= (p_demorgan_fu_1030_p2 xor ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF);
    tmp_48_fu_1042_p2 <= (tmp_47_fu_1036_p2 and pixelArray_q0);
    tmp_49_fu_1048_p2 <= (tmp_44_fu_1011_p3 and p_demorgan_fu_1030_p2);
    tmp_4_fu_631_p1 <= pixelArray_load_reg_1066(32 - 1 downto 0);
    tmp_5_fu_659_p1 <= pixelArray_q0(32 - 1 downto 0);
    tmp_8_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_335),64));
        tmp_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(centerColor_reg_299),64));

    tmp_i5_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4),64));
    tmp_i7_fu_609_p2 <= "1" when (signed(minimumDistance_fu_606_p1) < signed(minimumDistance_i_reg_323)) else "0";
    tmp_s_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_346),64));
end behav;
