// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getPixelClassification_Stream,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.679625,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1983,HLS_SYN_LUT=12780}" *)

module getPixelClassification_Stream (
        ap_clk,
        ap_rst_n,
        out_pixel_TREADY,
        in_pixel_TDATA,
        in_pixel_TVALID,
        in_pixel_TREADY,
        out_pixel_TDATA,
        out_pixel_TVALID,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   out_pixel_TREADY;
input  [31:0] in_pixel_TDATA;
input   in_pixel_TVALID;
output   in_pixel_TREADY;
output  [31:0] out_pixel_TDATA;
output   out_pixel_TVALID;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [0:0] exitcond_fu_210_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    in_pixel_0_vld_out;
reg   [0:0] do_init_reg_89;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    out_pixel_1_ack_in;
reg   [0:0] exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter17_exitcond_reg_361;
reg    ap_block_state20_io;
reg    ap_enable_reg_pp0_iter18;
reg    ap_block_state21_pp0_stage0_iter19;
reg   [0:0] ap_reg_pp0_iter18_exitcond_reg_361;
reg    ap_block_state21_io;
reg    ap_enable_reg_pp0_iter19;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] in_pixel_0_data_out;
wire    in_pixel_0_vld_in;
wire    in_pixel_0_ack_in;
reg    in_pixel_0_ack_out;
reg   [31:0] in_pixel_0_payload_A;
reg   [31:0] in_pixel_0_payload_B;
reg    in_pixel_0_sel_rd;
reg    in_pixel_0_sel_wr;
wire    in_pixel_0_sel;
wire    in_pixel_0_load_A;
wire    in_pixel_0_load_B;
reg   [1:0] in_pixel_0_state;
wire    in_pixel_0_state_cmp_full;
reg   [31:0] out_pixel_1_data_out;
reg    out_pixel_1_vld_in;
wire    out_pixel_1_vld_out;
wire    out_pixel_1_ack_out;
reg   [31:0] out_pixel_1_payload_A;
reg   [31:0] out_pixel_1_payload_B;
reg    out_pixel_1_sel_rd;
reg    out_pixel_1_sel_wr;
wire    out_pixel_1_sel;
wire    out_pixel_1_load_A;
wire    out_pixel_1_load_B;
reg   [1:0] out_pixel_1_state;
wire    out_pixel_1_state_cmp_full;
reg    in_pixel_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    out_pixel_TDATA_blk_n;
reg   [1:0] minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105;
reg   [1:0] ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105;
reg   [31:0] in_pixel6_rewind_reg_120;
reg   [31:0] in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter2_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter3_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter4_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter5_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter6_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter7_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter8_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter9_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter10_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter11_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter12_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter13_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter14_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter15_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter16_in_pixel6_phi_reg_134;
reg   [31:0] ap_reg_pp0_iter17_in_pixel6_phi_reg_134;
reg   [31:0] minimumDistance4_reg_147;
reg   [31:0] minimumDistanceIndex_1_reg_161;
wire   [2:0] minimumDistanceIndex_fu_196_p1;
reg   [2:0] minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter1_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter2_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter3_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter4_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter5_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter6_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter7_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter8_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter9_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter10_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter11_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter12_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter13_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter14_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter15_minimumDistanceIndex_reg_351;
reg   [2:0] ap_reg_pp0_iter16_minimumDistanceIndex_reg_351;
wire   [1:0] tmp_3_fu_206_p1;
reg   [1:0] tmp_3_reg_356;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter6_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter7_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter8_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter9_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter10_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter11_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter12_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter13_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter14_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter15_exitcond_reg_361;
reg   [0:0] ap_reg_pp0_iter16_exitcond_reg_361;
wire   [0:0] cond_fu_216_p2;
reg   [0:0] cond_reg_365;
wire   [16:0] p_color_array_load_0_s_fu_222_p3;
reg   [16:0] p_color_array_load_0_s_reg_370;
wire   [16:0] p_color_array_load_1_s_fu_230_p3;
reg   [16:0] p_color_array_load_1_s_reg_375;
wire   [16:0] p_color_array_load_2_s_fu_238_p3;
reg   [16:0] p_color_array_load_2_s_reg_380;
wire   [11:0] grp_getColorDistance_fu_175_ap_return;
reg   [11:0] minimumDistance_2_reg_385;
wire   [11:0] grp_getColorDistance_fu_182_ap_return;
reg   [11:0] minimumDistance_2_1_reg_390;
wire   [0:0] tmp_2_fu_248_p2;
reg   [0:0] tmp_2_reg_395;
wire   [0:0] tmp_2_1_fu_265_p2;
reg   [0:0] tmp_2_1_reg_400;
wire   [31:0] distance_0_minimumDi_1_fu_271_p3;
reg   [31:0] distance_0_minimumDi_1_reg_405;
wire   [11:0] grp_getColorDistance_fu_189_ap_return;
reg   [11:0] minimumDistance_2_2_reg_411;
wire   [31:0] newSel3_fu_320_p3;
reg   [31:0] newSel3_reg_416;
reg    ap_enable_reg_pp0_iter17;
wire   [31:0] distance_0_minimumDi_2_fu_328_p3;
wire   [31:0] in_pixel_assign_fu_340_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
wire    grp_getColorDistance_fu_175_ap_start;
wire    grp_getColorDistance_fu_175_ap_done;
wire    grp_getColorDistance_fu_175_ap_idle;
wire    grp_getColorDistance_fu_175_ap_ready;
reg    grp_getColorDistance_fu_175_ap_ce;
wire    grp_getColorDistance_fu_175_pixel_TREADY;
wire    grp_getColorDistance_fu_175_pixel_TDATA_blk_n;
wire    grp_getColorDistance_fu_182_ap_start;
wire    grp_getColorDistance_fu_182_ap_done;
wire    grp_getColorDistance_fu_182_ap_idle;
wire    grp_getColorDistance_fu_182_ap_ready;
reg    grp_getColorDistance_fu_182_ap_ce;
wire    grp_getColorDistance_fu_182_pixel_TREADY;
wire    grp_getColorDistance_fu_182_pixel_TDATA_blk_n;
wire    grp_getColorDistance_fu_189_ap_start;
wire    grp_getColorDistance_fu_189_ap_done;
wire    grp_getColorDistance_fu_189_ap_idle;
wire    grp_getColorDistance_fu_189_ap_ready;
reg    grp_getColorDistance_fu_189_ap_ce;
wire    grp_getColorDistance_fu_189_pixel_TREADY;
wire    grp_getColorDistance_fu_189_pixel_TDATA_blk_n;
reg   [1:0] ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6;
reg   [31:0] ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6;
wire   [31:0] ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134;
reg   [31:0] ap_phi_mux_minimumDistance4_phi_fu_151_p6;
reg   [31:0] ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6;
reg    ap_reg_grp_getColorDistance_fu_175_ap_start;
reg    ap_reg_grp_getColorDistance_fu_182_ap_start;
reg    ap_reg_grp_getColorDistance_fu_189_ap_start;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] i_2_fu_200_p2;
wire   [31:0] minimumDistance_2_ex_fu_245_p1;
wire   [31:0] minimumDistance_2_1_s_fu_262_p1;
wire   [31:0] distance_0_minimumDi_fu_254_p3;
wire   [31:0] minimumDistance_2_2_s_fu_283_p1;
wire   [0:0] tmp_2_2_fu_286_p2;
wire   [2:0] newSel_v_cast_cast_fu_291_p3;
wire   [2:0] newSel_fu_299_p2;
wire   [31:0] minimumDistanceIndex_2_fu_279_p1;
wire   [0:0] or_cond_fu_308_p2;
wire   [31:0] newSel_cast_fu_304_p1;
wire   [31:0] newSel1_fu_313_p3;
wire   [0:0] tmp_fu_335_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to18;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_218;
reg    ap_condition_448;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 in_pixel_0_sel_rd = 1'b0;
#0 in_pixel_0_sel_wr = 1'b0;
#0 in_pixel_0_state = 2'd0;
#0 out_pixel_1_sel_rd = 1'b0;
#0 out_pixel_1_sel_wr = 1'b0;
#0 out_pixel_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_reg_grp_getColorDistance_fu_175_ap_start = 1'b0;
#0 ap_reg_grp_getColorDistance_fu_182_ap_start = 1'b0;
#0 ap_reg_grp_getColorDistance_fu_189_ap_start = 1'b0;
end

getPixelClassification_Stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
getPixelClassification_Stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

getColorDistance grp_getColorDistance_fu_175(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_fu_175_ap_start),
    .ap_done(grp_getColorDistance_fu_175_ap_done),
    .ap_idle(grp_getColorDistance_fu_175_ap_idle),
    .ap_ready(grp_getColorDistance_fu_175_ap_ready),
    .pixel_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_fu_175_ap_ce),
    .pixel_TDATA(in_pixel6_phi_reg_134),
    .pixel_TREADY(grp_getColorDistance_fu_175_pixel_TREADY),
    .color(p_color_array_load_0_s_reg_370),
    .ap_return(grp_getColorDistance_fu_175_ap_return),
    .pixel_TDATA_blk_n(grp_getColorDistance_fu_175_pixel_TDATA_blk_n)
);

getColorDistance grp_getColorDistance_fu_182(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_fu_182_ap_start),
    .ap_done(grp_getColorDistance_fu_182_ap_done),
    .ap_idle(grp_getColorDistance_fu_182_ap_idle),
    .ap_ready(grp_getColorDistance_fu_182_ap_ready),
    .pixel_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_fu_182_ap_ce),
    .pixel_TDATA(in_pixel6_phi_reg_134),
    .pixel_TREADY(grp_getColorDistance_fu_182_pixel_TREADY),
    .color(p_color_array_load_1_s_reg_375),
    .ap_return(grp_getColorDistance_fu_182_ap_return),
    .pixel_TDATA_blk_n(grp_getColorDistance_fu_182_pixel_TDATA_blk_n)
);

getColorDistance grp_getColorDistance_fu_189(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_fu_189_ap_start),
    .ap_done(grp_getColorDistance_fu_189_ap_done),
    .ap_idle(grp_getColorDistance_fu_189_ap_idle),
    .ap_ready(grp_getColorDistance_fu_189_ap_ready),
    .pixel_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_fu_189_ap_ce),
    .pixel_TDATA(ap_reg_pp0_iter2_in_pixel6_phi_reg_134),
    .pixel_TREADY(grp_getColorDistance_fu_189_pixel_TREADY),
    .color(p_color_array_load_2_s_reg_380),
    .ap_return(grp_getColorDistance_fu_189_ap_return),
    .pixel_TDATA_blk_n(grp_getColorDistance_fu_189_pixel_TDATA_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_fu_175_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_getColorDistance_fu_175_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_fu_175_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_fu_175_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_fu_182_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_getColorDistance_fu_182_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_fu_182_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_fu_182_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_fu_189_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_reg_grp_getColorDistance_fu_189_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_fu_189_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_fu_189_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_0_sel_rd <= 1'b0;
    end else begin
        if (((in_pixel_0_vld_out == 1'b1) & (in_pixel_0_ack_out == 1'b1))) begin
            in_pixel_0_sel_rd <= ~in_pixel_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_0_sel_wr <= 1'b0;
    end else begin
        if (((in_pixel_0_ack_in == 1'b1) & (in_pixel_0_vld_in == 1'b1))) begin
            in_pixel_0_sel_wr <= ~in_pixel_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_0_state <= 2'd0;
    end else begin
        if ((((in_pixel_0_vld_in == 1'b0) & (in_pixel_0_state == 2'd2)) | ((in_pixel_0_vld_in == 1'b0) & (in_pixel_0_ack_out == 1'b1) & (in_pixel_0_state == 2'd3)))) begin
            in_pixel_0_state <= 2'd2;
        end else if ((((in_pixel_0_ack_out == 1'b0) & (in_pixel_0_state == 2'd1)) | ((in_pixel_0_ack_out == 1'b0) & (in_pixel_0_vld_in == 1'b1) & (in_pixel_0_state == 2'd3)))) begin
            in_pixel_0_state <= 2'd1;
        end else if (((~((in_pixel_0_vld_in == 1'b0) & (in_pixel_0_ack_out == 1'b1)) & ~((in_pixel_0_ack_out == 1'b0) & (in_pixel_0_vld_in == 1'b1)) & (in_pixel_0_state == 2'd3)) | ((in_pixel_0_ack_out == 1'b1) & (in_pixel_0_state == 2'd1)) | ((in_pixel_0_vld_in == 1'b1) & (in_pixel_0_state == 2'd2)))) begin
            in_pixel_0_state <= 2'd3;
        end else begin
            in_pixel_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_1_sel_rd <= 1'b0;
    end else begin
        if (((out_pixel_1_ack_out == 1'b1) & (out_pixel_1_vld_out == 1'b1))) begin
            out_pixel_1_sel_rd <= ~out_pixel_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_1_sel_wr <= 1'b0;
    end else begin
        if (((out_pixel_1_ack_in == 1'b1) & (out_pixel_1_vld_in == 1'b1))) begin
            out_pixel_1_sel_wr <= ~out_pixel_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_1_state <= 2'd0;
    end else begin
        if ((((out_pixel_1_vld_in == 1'b0) & (out_pixel_1_state == 2'd2)) | ((out_pixel_1_vld_in == 1'b0) & (out_pixel_1_ack_out == 1'b1) & (out_pixel_1_state == 2'd3)))) begin
            out_pixel_1_state <= 2'd2;
        end else if ((((out_pixel_1_ack_out == 1'b0) & (out_pixel_1_state == 2'd1)) | ((out_pixel_1_ack_out == 1'b0) & (out_pixel_1_vld_in == 1'b1) & (out_pixel_1_state == 2'd3)))) begin
            out_pixel_1_state <= 2'd1;
        end else if (((~((out_pixel_1_vld_in == 1'b0) & (out_pixel_1_ack_out == 1'b1)) & ~((out_pixel_1_ack_out == 1'b0) & (out_pixel_1_vld_in == 1'b1)) & (out_pixel_1_state == 2'd3)) | ((out_pixel_1_ack_out == 1'b1) & (out_pixel_1_state == 2'd1)) | ((out_pixel_1_vld_in == 1'b1) & (out_pixel_1_state == 2'd2)))) begin
            out_pixel_1_state <= 2'd3;
        end else begin
            out_pixel_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_361 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        do_init_reg_89 <= 1'd0;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_89 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_448)) begin
        if ((do_init_reg_89 == 1'd0)) begin
            in_pixel6_phi_reg_134 <= ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6;
        end else if ((do_init_reg_89 == 1'd1)) begin
            in_pixel6_phi_reg_134 <= in_pixel_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            in_pixel6_phi_reg_134 <= ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ap_reg_pp0_iter16_exitcond_reg_361 == 1'd0))) begin
        minimumDistance4_reg_147 <= distance_0_minimumDi_2_fu_328_p3;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter16_exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        minimumDistance4_reg_147 <= 32'd2147483647;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter17_exitcond_reg_361 == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        minimumDistanceIndex_1_reg_161 <= newSel3_reg_416;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter17_exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter18 == 1'b1)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        minimumDistanceIndex_1_reg_161 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_361 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minimumDistanceIndex_3_reg_105 <= tmp_3_reg_356;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        minimumDistanceIndex_3_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_reg_361 <= ap_reg_pp0_iter9_exitcond_reg_361;
        ap_reg_pp0_iter10_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter9_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter10_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter9_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter11_exitcond_reg_361 <= ap_reg_pp0_iter10_exitcond_reg_361;
        ap_reg_pp0_iter11_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter10_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter11_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter10_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter12_exitcond_reg_361 <= ap_reg_pp0_iter11_exitcond_reg_361;
        ap_reg_pp0_iter12_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter11_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter12_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter11_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter13_exitcond_reg_361 <= ap_reg_pp0_iter12_exitcond_reg_361;
        ap_reg_pp0_iter13_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter12_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter13_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter12_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter14_exitcond_reg_361 <= ap_reg_pp0_iter13_exitcond_reg_361;
        ap_reg_pp0_iter14_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter13_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter14_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter13_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter15_exitcond_reg_361 <= ap_reg_pp0_iter14_exitcond_reg_361;
        ap_reg_pp0_iter15_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter14_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter15_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter14_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter16_exitcond_reg_361 <= ap_reg_pp0_iter15_exitcond_reg_361;
        ap_reg_pp0_iter16_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter15_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter16_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter15_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter17_exitcond_reg_361 <= ap_reg_pp0_iter16_exitcond_reg_361;
        ap_reg_pp0_iter17_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter16_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter18_exitcond_reg_361 <= ap_reg_pp0_iter17_exitcond_reg_361;
        ap_reg_pp0_iter2_exitcond_reg_361 <= ap_reg_pp0_iter1_exitcond_reg_361;
        ap_reg_pp0_iter2_in_pixel6_phi_reg_134 <= in_pixel6_phi_reg_134;
        ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter2_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter1_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter3_exitcond_reg_361 <= ap_reg_pp0_iter2_exitcond_reg_361;
        ap_reg_pp0_iter3_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter2_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter3_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter2_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter4_exitcond_reg_361 <= ap_reg_pp0_iter3_exitcond_reg_361;
        ap_reg_pp0_iter4_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter3_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter4_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter3_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter5_exitcond_reg_361 <= ap_reg_pp0_iter4_exitcond_reg_361;
        ap_reg_pp0_iter5_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter4_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter5_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter4_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter6_exitcond_reg_361 <= ap_reg_pp0_iter5_exitcond_reg_361;
        ap_reg_pp0_iter6_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter5_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter6_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter5_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter7_exitcond_reg_361 <= ap_reg_pp0_iter6_exitcond_reg_361;
        ap_reg_pp0_iter7_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter6_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter7_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter6_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter8_exitcond_reg_361 <= ap_reg_pp0_iter7_exitcond_reg_361;
        ap_reg_pp0_iter8_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter7_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter8_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter7_minimumDistanceIndex_reg_351[1 : 0];
        ap_reg_pp0_iter9_exitcond_reg_361 <= ap_reg_pp0_iter8_exitcond_reg_361;
        ap_reg_pp0_iter9_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter8_in_pixel6_phi_reg_134;
        ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter9_minimumDistanceIndex_reg_351[1 : 0] <= ap_reg_pp0_iter8_minimumDistanceIndex_reg_351[1 : 0];
        distance_0_minimumDi_1_reg_405 <= distance_0_minimumDi_1_fu_271_p3;
        minimumDistance_2_1_reg_390 <= grp_getColorDistance_fu_182_ap_return;
        minimumDistance_2_2_reg_411 <= grp_getColorDistance_fu_189_ap_return;
        minimumDistance_2_reg_385 <= grp_getColorDistance_fu_175_ap_return;
        p_color_array_load_2_s_reg_380[15 : 8] <= p_color_array_load_2_s_fu_238_p3[15 : 8];
        tmp_2_1_reg_400 <= tmp_2_1_fu_265_p2;
        tmp_2_reg_395 <= tmp_2_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_reg_361 <= exitcond_reg_361;
        ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105 <= minimumDistanceIndex_3_reg_105;
        ap_reg_pp0_iter1_minimumDistanceIndex_reg_351[1 : 0] <= minimumDistanceIndex_reg_351[1 : 0];
        cond_reg_365 <= cond_fu_216_p2;
        exitcond_reg_361 <= exitcond_fu_210_p2;
        minimumDistanceIndex_reg_351[1 : 0] <= minimumDistanceIndex_fu_196_p1[1 : 0];
        p_color_array_load_0_s_reg_370[7 : 0] <= p_color_array_load_0_s_fu_222_p3[7 : 0];
        p_color_array_load_1_s_reg_375[16] <= p_color_array_load_1_s_fu_230_p3[16];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_reg_361 == 1'd0))) begin
        in_pixel6_rewind_reg_120 <= in_pixel6_phi_reg_134;
    end
end

always @ (posedge ap_clk) begin
    if ((in_pixel_0_load_A == 1'b1)) begin
        in_pixel_0_payload_A <= in_pixel_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_pixel_0_load_B == 1'b1)) begin
        in_pixel_0_payload_B <= in_pixel_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        newSel3_reg_416 <= newSel3_fu_320_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pixel_1_load_A == 1'b1)) begin
        out_pixel_1_payload_A <= in_pixel_assign_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pixel_1_load_B == 1'b1)) begin
        out_pixel_1_payload_B <= in_pixel_assign_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_356 <= tmp_3_fu_206_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter18_exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to18 = 1'b1;
    end else begin
        ap_idle_pp0_0to18 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond_reg_361 == 1'd0))) begin
        ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6 = in_pixel6_phi_reg_134;
    end else begin
        ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6 = in_pixel6_rewind_reg_120;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        if ((ap_reg_pp0_iter16_exitcond_reg_361 == 1'd1)) begin
            ap_phi_mux_minimumDistance4_phi_fu_151_p6 = 32'd2147483647;
        end else if ((ap_reg_pp0_iter16_exitcond_reg_361 == 1'd0)) begin
            ap_phi_mux_minimumDistance4_phi_fu_151_p6 = distance_0_minimumDi_2_fu_328_p3;
        end else begin
            ap_phi_mux_minimumDistance4_phi_fu_151_p6 = minimumDistance4_reg_147;
        end
    end else begin
        ap_phi_mux_minimumDistance4_phi_fu_151_p6 = minimumDistance4_reg_147;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        if ((ap_reg_pp0_iter17_exitcond_reg_361 == 1'd1)) begin
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 = 32'd0;
        end else if ((ap_reg_pp0_iter17_exitcond_reg_361 == 1'd0)) begin
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 = newSel3_reg_416;
        end else begin
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 = minimumDistanceIndex_1_reg_161;
        end
    end else begin
        ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 = minimumDistanceIndex_1_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_218)) begin
        if ((exitcond_reg_361 == 1'd1)) begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 = 2'd0;
        end else if ((exitcond_reg_361 == 1'd0)) begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 = tmp_3_reg_356;
        end else begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 = minimumDistanceIndex_3_reg_105;
        end
    end else begin
        ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 = minimumDistanceIndex_3_reg_105;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_fu_210_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to18 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_fu_175_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_fu_175_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_fu_182_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_fu_182_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_fu_189_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_fu_189_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (do_init_reg_89 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_pixel_0_ack_out = 1'b1;
    end else begin
        in_pixel_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_pixel_0_sel == 1'b1)) begin
        in_pixel_0_data_out = in_pixel_0_payload_B;
    end else begin
        in_pixel_0_data_out = in_pixel_0_payload_A;
    end
end

always @ (*) begin
    if (((do_init_reg_89 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_pixel_TDATA_blk_n = in_pixel_0_state[1'd0];
    end else begin
        in_pixel_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_pixel_1_sel == 1'b1)) begin
        out_pixel_1_data_out = out_pixel_1_payload_B;
    end else begin
        out_pixel_1_data_out = out_pixel_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter17_exitcond_reg_361 == 1'd1) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        out_pixel_1_vld_in = 1'b1;
    end else begin
        out_pixel_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter18_exitcond_reg_361 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((ap_reg_pp0_iter17_exitcond_reg_361 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter18 == 1'b1)))) begin
        out_pixel_TDATA_blk_n = out_pixel_1_state[1'd1];
    end else begin
        out_pixel_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_pixel_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((in_pixel_0_vld_out == 1'b0) & (do_init_reg_89 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter19 == 1'b1) & ((out_pixel_1_ack_in == 1'b0) | (1'b1 == ap_block_state21_io))) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_block_state20_io)) | ((in_pixel_0_vld_out == 1'b0) & (do_init_reg_89 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter19 == 1'b1) & ((out_pixel_1_ack_in == 1'b0) | (1'b1 == ap_block_state21_io))) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_block_state20_io)) | ((in_pixel_0_vld_out == 1'b0) & (do_init_reg_89 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((out_pixel_1_ack_in == 1'b0) & (ap_reg_pp0_iter17_exitcond_reg_361 == 1'd1));
end

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((out_pixel_1_ack_in == 1'b0) & (ap_reg_pp0_iter18_exitcond_reg_361 == 1'd1));
end

always @ (*) begin
    ap_block_state21_pp0_stage0_iter19 = (out_pixel_1_ack_in == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((in_pixel_0_vld_out == 1'b0) & (do_init_reg_89 == 1'd1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_218 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_448 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cond_fu_216_p2 = ((minimumDistanceIndex_3_reg_105 == 2'd0) ? 1'b1 : 1'b0);

assign distance_0_minimumDi_1_fu_271_p3 = ((tmp_2_1_fu_265_p2[0:0] === 1'b1) ? minimumDistance_2_1_s_fu_262_p1 : distance_0_minimumDi_fu_254_p3);

assign distance_0_minimumDi_2_fu_328_p3 = ((tmp_2_2_fu_286_p2[0:0] === 1'b1) ? minimumDistance_2_2_s_fu_283_p1 : distance_0_minimumDi_1_reg_405);

assign distance_0_minimumDi_fu_254_p3 = ((tmp_2_fu_248_p2[0:0] === 1'b1) ? minimumDistance_2_ex_fu_245_p1 : ap_phi_mux_minimumDistance4_phi_fu_151_p6);

assign exitcond_fu_210_p2 = ((i_2_fu_200_p2 == 3'd6) ? 1'b1 : 1'b0);

assign grp_getColorDistance_fu_175_ap_start = ap_reg_grp_getColorDistance_fu_175_ap_start;

assign grp_getColorDistance_fu_182_ap_start = ap_reg_grp_getColorDistance_fu_182_ap_start;

assign grp_getColorDistance_fu_189_ap_start = ap_reg_grp_getColorDistance_fu_189_ap_start;

assign i_2_fu_200_p2 = (3'd3 + minimumDistanceIndex_fu_196_p1);

assign in_pixel_0_ack_in = in_pixel_0_state[1'd1];

assign in_pixel_0_load_A = (in_pixel_0_state_cmp_full & ~in_pixel_0_sel_wr);

assign in_pixel_0_load_B = (in_pixel_0_state_cmp_full & in_pixel_0_sel_wr);

assign in_pixel_0_sel = in_pixel_0_sel_rd;

assign in_pixel_0_state_cmp_full = ((in_pixel_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_pixel_0_vld_in = in_pixel_TVALID;

assign in_pixel_0_vld_out = in_pixel_0_state[1'd0];

assign in_pixel_TREADY = in_pixel_0_state[1'd1];

assign in_pixel_assign_fu_340_p3 = ((tmp_fu_335_p2[0:0] === 1'b1) ? 32'd0 : ap_reg_pp0_iter17_in_pixel6_phi_reg_134);

assign minimumDistanceIndex_2_fu_279_p1 = ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105;

assign minimumDistanceIndex_fu_196_p1 = ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6;

assign minimumDistance_2_1_s_fu_262_p1 = minimumDistance_2_1_reg_390;

assign minimumDistance_2_2_s_fu_283_p1 = minimumDistance_2_2_reg_411;

assign minimumDistance_2_ex_fu_245_p1 = minimumDistance_2_reg_385;

assign newSel1_fu_313_p3 = ((tmp_2_reg_395[0:0] === 1'b1) ? minimumDistanceIndex_2_fu_279_p1 : ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6);

assign newSel3_fu_320_p3 = ((or_cond_fu_308_p2[0:0] === 1'b1) ? newSel_cast_fu_304_p1 : newSel1_fu_313_p3);

assign newSel_cast_fu_304_p1 = newSel_fu_299_p2;

assign newSel_fu_299_p2 = (newSel_v_cast_cast_fu_291_p3 + ap_reg_pp0_iter16_minimumDistanceIndex_reg_351);

assign newSel_v_cast_cast_fu_291_p3 = ((tmp_2_2_fu_286_p2[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign or_cond_fu_308_p2 = (tmp_2_2_fu_286_p2 | tmp_2_1_reg_400);

assign out_pixel_1_ack_in = out_pixel_1_state[1'd1];

assign out_pixel_1_ack_out = out_pixel_TREADY;

assign out_pixel_1_load_A = (out_pixel_1_state_cmp_full & ~out_pixel_1_sel_wr);

assign out_pixel_1_load_B = (out_pixel_1_state_cmp_full & out_pixel_1_sel_wr);

assign out_pixel_1_sel = out_pixel_1_sel_rd;

assign out_pixel_1_state_cmp_full = ((out_pixel_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_pixel_1_vld_out = out_pixel_1_state[1'd0];

assign out_pixel_TDATA = out_pixel_1_data_out;

assign out_pixel_TVALID = out_pixel_1_state[1'd0];

assign p_color_array_load_0_s_fu_222_p3 = ((cond_fu_216_p2[0:0] === 1'b1) ? 17'd65536 : 17'd65791);

assign p_color_array_load_1_s_fu_230_p3 = ((cond_fu_216_p2[0:0] === 1'b1) ? 17'd65280 : 17'd130816);

assign p_color_array_load_2_s_fu_238_p3 = ((cond_reg_365[0:0] === 1'b1) ? 17'd255 : 17'd65535);

assign tmp_2_1_fu_265_p2 = (($signed(minimumDistance_2_1_s_fu_262_p1) < $signed(distance_0_minimumDi_fu_254_p3)) ? 1'b1 : 1'b0);

assign tmp_2_2_fu_286_p2 = (($signed(minimumDistance_2_2_s_fu_283_p1) < $signed(distance_0_minimumDi_1_reg_405)) ? 1'b1 : 1'b0);

assign tmp_2_fu_248_p2 = (($signed(minimumDistance_2_ex_fu_245_p1) < $signed(ap_phi_mux_minimumDistance4_phi_fu_151_p6)) ? 1'b1 : 1'b0);

assign tmp_3_fu_206_p1 = i_2_fu_200_p2[1:0];

assign tmp_fu_335_p2 = ((newSel3_reg_416 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter1_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter2_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter3_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter4_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter5_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter6_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter7_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter8_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter9_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter10_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter11_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter12_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter13_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter14_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter15_minimumDistanceIndex_reg_351[2] <= 1'b0;
    ap_reg_pp0_iter16_minimumDistanceIndex_reg_351[2] <= 1'b0;
    p_color_array_load_0_s_reg_370[16:8] <= 9'b100000000;
    p_color_array_load_1_s_reg_375[15:0] <= 16'b1111111100000000;
    p_color_array_load_2_s_reg_380[7:0] <= 8'b11111111;
    p_color_array_load_2_s_reg_380[16] <= 1'b0;
end

endmodule //getPixelClassification_Stream
