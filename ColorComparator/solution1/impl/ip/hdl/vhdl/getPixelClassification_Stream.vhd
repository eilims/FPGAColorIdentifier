-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getPixelClassification_Stream is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    out_pixel_TREADY : IN STD_LOGIC;
    in_pixel_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_pixel_TVALID : IN STD_LOGIC;
    in_pixel_TREADY : OUT STD_LOGIC;
    out_pixel_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_pixel_TVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of getPixelClassification_Stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getPixelClassification_Stream,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.679625,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1983,HLS_SYN_LUT=12780}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_100FF : STD_LOGIC_VECTOR (16 downto 0) := "10000000011111111";
    constant ap_const_lv17_FF00 : STD_LOGIC_VECTOR (16 downto 0) := "01111111100000000";
    constant ap_const_lv17_1FF00 : STD_LOGIC_VECTOR (16 downto 0) := "11111111100000000";
    constant ap_const_lv17_FF : STD_LOGIC_VECTOR (16 downto 0) := "00000000011111111";
    constant ap_const_lv17_FFFF : STD_LOGIC_VECTOR (16 downto 0) := "01111111111111111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal exitcond_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal in_pixel_0_vld_out : STD_LOGIC;
    signal do_init_reg_89 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal out_pixel_1_ack_in : STD_LOGIC;
    signal exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_reg_pp0_iter18_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state21_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_pixel_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_pixel_0_vld_in : STD_LOGIC;
    signal in_pixel_0_ack_in : STD_LOGIC;
    signal in_pixel_0_ack_out : STD_LOGIC;
    signal in_pixel_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_pixel_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_pixel_0_sel_rd : STD_LOGIC := '0';
    signal in_pixel_0_sel_wr : STD_LOGIC := '0';
    signal in_pixel_0_sel : STD_LOGIC;
    signal in_pixel_0_load_A : STD_LOGIC;
    signal in_pixel_0_load_B : STD_LOGIC;
    signal in_pixel_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_pixel_0_state_cmp_full : STD_LOGIC;
    signal out_pixel_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pixel_1_vld_in : STD_LOGIC;
    signal out_pixel_1_vld_out : STD_LOGIC;
    signal out_pixel_1_ack_out : STD_LOGIC;
    signal out_pixel_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pixel_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_pixel_1_sel_rd : STD_LOGIC := '0';
    signal out_pixel_1_sel_wr : STD_LOGIC := '0';
    signal out_pixel_1_sel : STD_LOGIC;
    signal out_pixel_1_load_A : STD_LOGIC;
    signal out_pixel_1_load_B : STD_LOGIC;
    signal out_pixel_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_pixel_1_state_cmp_full : STD_LOGIC;
    signal in_pixel_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_pixel_TDATA_blk_n : STD_LOGIC;
    signal minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_pixel6_rewind_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter8_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter9_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter10_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter11_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter12_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter13_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter14_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter15_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter16_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter17_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistance4_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistanceIndex_1_reg_161 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistanceIndex_fu_196_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter2_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter10_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter11_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter12_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter13_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter14_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter15_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter16_minimumDistanceIndex_reg_351 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_206_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_reg_356 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_color_array_load_0_s_fu_222_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_color_array_load_0_s_reg_370 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_color_array_load_1_s_fu_230_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_color_array_load_1_s_reg_375 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_color_array_load_2_s_fu_238_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_color_array_load_2_s_reg_380 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_getColorDistance_fu_175_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal minimumDistance_2_reg_385 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_getColorDistance_fu_182_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal minimumDistance_2_1_reg_390 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_1_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_0_minimumDi_1_fu_271_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_0_minimumDi_1_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getColorDistance_fu_189_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal minimumDistance_2_2_reg_411 : STD_LOGIC_VECTOR (11 downto 0);
    signal newSel3_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel3_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal distance_0_minimumDi_2_fu_328_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_pixel_assign_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal grp_getColorDistance_fu_175_ap_start : STD_LOGIC;
    signal grp_getColorDistance_fu_175_ap_done : STD_LOGIC;
    signal grp_getColorDistance_fu_175_ap_idle : STD_LOGIC;
    signal grp_getColorDistance_fu_175_ap_ready : STD_LOGIC;
    signal grp_getColorDistance_fu_175_ap_ce : STD_LOGIC;
    signal grp_getColorDistance_fu_175_pixel_TREADY : STD_LOGIC;
    signal grp_getColorDistance_fu_175_pixel_TDATA_blk_n : STD_LOGIC;
    signal grp_getColorDistance_fu_182_ap_start : STD_LOGIC;
    signal grp_getColorDistance_fu_182_ap_done : STD_LOGIC;
    signal grp_getColorDistance_fu_182_ap_idle : STD_LOGIC;
    signal grp_getColorDistance_fu_182_ap_ready : STD_LOGIC;
    signal grp_getColorDistance_fu_182_ap_ce : STD_LOGIC;
    signal grp_getColorDistance_fu_182_pixel_TREADY : STD_LOGIC;
    signal grp_getColorDistance_fu_182_pixel_TDATA_blk_n : STD_LOGIC;
    signal grp_getColorDistance_fu_189_ap_start : STD_LOGIC;
    signal grp_getColorDistance_fu_189_ap_done : STD_LOGIC;
    signal grp_getColorDistance_fu_189_ap_idle : STD_LOGIC;
    signal grp_getColorDistance_fu_189_ap_ready : STD_LOGIC;
    signal grp_getColorDistance_fu_189_ap_ce : STD_LOGIC;
    signal grp_getColorDistance_fu_189_pixel_TREADY : STD_LOGIC;
    signal grp_getColorDistance_fu_189_pixel_TDATA_blk_n : STD_LOGIC;
    signal ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_minimumDistance4_phi_fu_151_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_getColorDistance_fu_175_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_getColorDistance_fu_182_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_getColorDistance_fu_189_ap_start : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_2_fu_200_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal minimumDistance_2_ex_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistance_2_1_s_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_0_minimumDi_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistance_2_2_s_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_v_cast_cast_fu_291_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal newSel_fu_299_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal minimumDistanceIndex_2_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_fu_304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newSel1_fu_313_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to18 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_218 : BOOLEAN;
    signal ap_condition_448 : BOOLEAN;

    component getColorDistance IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pixel_TVALID : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        pixel_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        pixel_TREADY : OUT STD_LOGIC;
        color : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0);
        pixel_TDATA_blk_n : OUT STD_LOGIC );
    end component;


    component getPixelClassification_Stream_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    getPixelClassification_Stream_AXILiteS_s_axi_U : component getPixelClassification_Stream_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    grp_getColorDistance_fu_175 : component getColorDistance
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_getColorDistance_fu_175_ap_start,
        ap_done => grp_getColorDistance_fu_175_ap_done,
        ap_idle => grp_getColorDistance_fu_175_ap_idle,
        ap_ready => grp_getColorDistance_fu_175_ap_ready,
        pixel_TVALID => ap_const_logic_1,
        ap_ce => grp_getColorDistance_fu_175_ap_ce,
        pixel_TDATA => in_pixel6_phi_reg_134,
        pixel_TREADY => grp_getColorDistance_fu_175_pixel_TREADY,
        color => p_color_array_load_0_s_reg_370,
        ap_return => grp_getColorDistance_fu_175_ap_return,
        pixel_TDATA_blk_n => grp_getColorDistance_fu_175_pixel_TDATA_blk_n);

    grp_getColorDistance_fu_182 : component getColorDistance
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_getColorDistance_fu_182_ap_start,
        ap_done => grp_getColorDistance_fu_182_ap_done,
        ap_idle => grp_getColorDistance_fu_182_ap_idle,
        ap_ready => grp_getColorDistance_fu_182_ap_ready,
        pixel_TVALID => ap_const_logic_1,
        ap_ce => grp_getColorDistance_fu_182_ap_ce,
        pixel_TDATA => in_pixel6_phi_reg_134,
        pixel_TREADY => grp_getColorDistance_fu_182_pixel_TREADY,
        color => p_color_array_load_1_s_reg_375,
        ap_return => grp_getColorDistance_fu_182_ap_return,
        pixel_TDATA_blk_n => grp_getColorDistance_fu_182_pixel_TDATA_blk_n);

    grp_getColorDistance_fu_189 : component getColorDistance
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_getColorDistance_fu_189_ap_start,
        ap_done => grp_getColorDistance_fu_189_ap_done,
        ap_idle => grp_getColorDistance_fu_189_ap_idle,
        ap_ready => grp_getColorDistance_fu_189_ap_ready,
        pixel_TVALID => ap_const_logic_1,
        ap_ce => grp_getColorDistance_fu_189_ap_ce,
        pixel_TDATA => ap_reg_pp0_iter2_in_pixel6_phi_reg_134,
        pixel_TREADY => grp_getColorDistance_fu_189_pixel_TREADY,
        color => p_color_array_load_2_s_reg_380,
        ap_return => grp_getColorDistance_fu_189_ap_return,
        pixel_TDATA_blk_n => grp_getColorDistance_fu_189_pixel_TDATA_blk_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_getColorDistance_fu_175_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_getColorDistance_fu_175_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_reg_grp_getColorDistance_fu_175_ap_start <= ap_const_logic_1;
                elsif ((grp_getColorDistance_fu_175_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_getColorDistance_fu_175_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_getColorDistance_fu_182_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_getColorDistance_fu_182_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_reg_grp_getColorDistance_fu_182_ap_start <= ap_const_logic_1;
                elsif ((grp_getColorDistance_fu_182_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_getColorDistance_fu_182_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_getColorDistance_fu_189_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_getColorDistance_fu_189_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    ap_reg_grp_getColorDistance_fu_189_ap_start <= ap_const_logic_1;
                elsif ((grp_getColorDistance_fu_189_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_getColorDistance_fu_189_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_pixel_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_pixel_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_pixel_0_vld_out = ap_const_logic_1) and (in_pixel_0_ack_out = ap_const_logic_1))) then 
                                        in_pixel_0_sel_rd <= not(in_pixel_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_pixel_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_pixel_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_pixel_0_ack_in = ap_const_logic_1) and (in_pixel_0_vld_in = ap_const_logic_1))) then 
                                        in_pixel_0_sel_wr <= not(in_pixel_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_pixel_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_pixel_0_state <= ap_const_lv2_0;
            else
                if ((((in_pixel_0_vld_in = ap_const_logic_0) and (in_pixel_0_state = ap_const_lv2_2)) or ((in_pixel_0_vld_in = ap_const_logic_0) and (in_pixel_0_ack_out = ap_const_logic_1) and (in_pixel_0_state = ap_const_lv2_3)))) then 
                    in_pixel_0_state <= ap_const_lv2_2;
                elsif ((((in_pixel_0_ack_out = ap_const_logic_0) and (in_pixel_0_state = ap_const_lv2_1)) or ((in_pixel_0_ack_out = ap_const_logic_0) and (in_pixel_0_vld_in = ap_const_logic_1) and (in_pixel_0_state = ap_const_lv2_3)))) then 
                    in_pixel_0_state <= ap_const_lv2_1;
                elsif (((not(((in_pixel_0_vld_in = ap_const_logic_0) and (in_pixel_0_ack_out = ap_const_logic_1))) and not(((in_pixel_0_ack_out = ap_const_logic_0) and (in_pixel_0_vld_in = ap_const_logic_1))) and (in_pixel_0_state = ap_const_lv2_3)) or ((in_pixel_0_ack_out = ap_const_logic_1) and (in_pixel_0_state = ap_const_lv2_1)) or ((in_pixel_0_vld_in = ap_const_logic_1) and (in_pixel_0_state = ap_const_lv2_2)))) then 
                    in_pixel_0_state <= ap_const_lv2_3;
                else 
                    in_pixel_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_pixel_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pixel_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_pixel_1_ack_out = ap_const_logic_1) and (out_pixel_1_vld_out = ap_const_logic_1))) then 
                                        out_pixel_1_sel_rd <= not(out_pixel_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_pixel_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pixel_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_pixel_1_ack_in = ap_const_logic_1) and (out_pixel_1_vld_in = ap_const_logic_1))) then 
                                        out_pixel_1_sel_wr <= not(out_pixel_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_pixel_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_pixel_1_state <= ap_const_lv2_0;
            else
                if ((((out_pixel_1_vld_in = ap_const_logic_0) and (out_pixel_1_state = ap_const_lv2_2)) or ((out_pixel_1_vld_in = ap_const_logic_0) and (out_pixel_1_ack_out = ap_const_logic_1) and (out_pixel_1_state = ap_const_lv2_3)))) then 
                    out_pixel_1_state <= ap_const_lv2_2;
                elsif ((((out_pixel_1_ack_out = ap_const_logic_0) and (out_pixel_1_state = ap_const_lv2_1)) or ((out_pixel_1_ack_out = ap_const_logic_0) and (out_pixel_1_vld_in = ap_const_logic_1) and (out_pixel_1_state = ap_const_lv2_3)))) then 
                    out_pixel_1_state <= ap_const_lv2_1;
                elsif (((not(((out_pixel_1_vld_in = ap_const_logic_0) and (out_pixel_1_ack_out = ap_const_logic_1))) and not(((out_pixel_1_ack_out = ap_const_logic_0) and (out_pixel_1_vld_in = ap_const_logic_1))) and (out_pixel_1_state = ap_const_lv2_3)) or ((out_pixel_1_ack_out = ap_const_logic_1) and (out_pixel_1_state = ap_const_lv2_1)) or ((out_pixel_1_vld_in = ap_const_logic_1) and (out_pixel_1_state = ap_const_lv2_2)))) then 
                    out_pixel_1_state <= ap_const_lv2_3;
                else 
                    out_pixel_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    do_init_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_89 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_89 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    in_pixel6_phi_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_448)) then
                if ((do_init_reg_89 = ap_const_lv1_0)) then 
                    in_pixel6_phi_reg_134 <= ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6;
                elsif ((do_init_reg_89 = ap_const_lv1_1)) then 
                    in_pixel6_phi_reg_134 <= in_pixel_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    in_pixel6_phi_reg_134 <= ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134;
                end if;
            end if; 
        end if;
    end process;

    minimumDistance4_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_reg_pp0_iter16_exitcond_reg_361 = ap_const_lv1_0))) then 
                minimumDistance4_reg_147 <= distance_0_minimumDi_2_fu_328_p3;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter16_exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                minimumDistance4_reg_147 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    minimumDistanceIndex_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
                minimumDistanceIndex_1_reg_161 <= newSel3_reg_416;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                minimumDistanceIndex_1_reg_161 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minimumDistanceIndex_3_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_361 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                minimumDistanceIndex_3_reg_105 <= tmp_3_reg_356;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                minimumDistanceIndex_3_reg_105 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_exitcond_reg_361 <= ap_reg_pp0_iter9_exitcond_reg_361;
                ap_reg_pp0_iter10_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter9_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter10_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter9_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter11_exitcond_reg_361 <= ap_reg_pp0_iter10_exitcond_reg_361;
                ap_reg_pp0_iter11_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter10_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter11_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter10_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter12_exitcond_reg_361 <= ap_reg_pp0_iter11_exitcond_reg_361;
                ap_reg_pp0_iter12_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter11_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter12_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter11_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter13_exitcond_reg_361 <= ap_reg_pp0_iter12_exitcond_reg_361;
                ap_reg_pp0_iter13_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter12_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter13_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter12_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter14_exitcond_reg_361 <= ap_reg_pp0_iter13_exitcond_reg_361;
                ap_reg_pp0_iter14_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter13_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter14_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter13_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter15_exitcond_reg_361 <= ap_reg_pp0_iter14_exitcond_reg_361;
                ap_reg_pp0_iter15_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter14_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter15_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter14_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter16_exitcond_reg_361 <= ap_reg_pp0_iter15_exitcond_reg_361;
                ap_reg_pp0_iter16_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter15_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter16_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter15_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter17_exitcond_reg_361 <= ap_reg_pp0_iter16_exitcond_reg_361;
                ap_reg_pp0_iter17_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter16_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter18_exitcond_reg_361 <= ap_reg_pp0_iter17_exitcond_reg_361;
                ap_reg_pp0_iter2_exitcond_reg_361 <= ap_reg_pp0_iter1_exitcond_reg_361;
                ap_reg_pp0_iter2_in_pixel6_phi_reg_134 <= in_pixel6_phi_reg_134;
                ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter2_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter1_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter3_exitcond_reg_361 <= ap_reg_pp0_iter2_exitcond_reg_361;
                ap_reg_pp0_iter3_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter2_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter3_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter2_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter4_exitcond_reg_361 <= ap_reg_pp0_iter3_exitcond_reg_361;
                ap_reg_pp0_iter4_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter3_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter4_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter3_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter5_exitcond_reg_361 <= ap_reg_pp0_iter4_exitcond_reg_361;
                ap_reg_pp0_iter5_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter4_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter5_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter4_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter6_exitcond_reg_361 <= ap_reg_pp0_iter5_exitcond_reg_361;
                ap_reg_pp0_iter6_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter5_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter6_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter5_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter7_exitcond_reg_361 <= ap_reg_pp0_iter6_exitcond_reg_361;
                ap_reg_pp0_iter7_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter6_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter7_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter6_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter8_exitcond_reg_361 <= ap_reg_pp0_iter7_exitcond_reg_361;
                ap_reg_pp0_iter8_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter7_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter8_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter7_minimumDistanceIndex_reg_351(1 downto 0);
                ap_reg_pp0_iter9_exitcond_reg_361 <= ap_reg_pp0_iter8_exitcond_reg_361;
                ap_reg_pp0_iter9_in_pixel6_phi_reg_134 <= ap_reg_pp0_iter8_in_pixel6_phi_reg_134;
                ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_105 <= ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter9_minimumDistanceIndex_reg_351(1 downto 0) <= ap_reg_pp0_iter8_minimumDistanceIndex_reg_351(1 downto 0);
                distance_0_minimumDi_1_reg_405 <= distance_0_minimumDi_1_fu_271_p3;
                minimumDistance_2_1_reg_390 <= grp_getColorDistance_fu_182_ap_return;
                minimumDistance_2_2_reg_411 <= grp_getColorDistance_fu_189_ap_return;
                minimumDistance_2_reg_385 <= grp_getColorDistance_fu_175_ap_return;
                    p_color_array_load_2_s_reg_380(15 downto 8) <= p_color_array_load_2_s_fu_238_p3(15 downto 8);
                tmp_2_1_reg_400 <= tmp_2_1_fu_265_p2;
                tmp_2_reg_395 <= tmp_2_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_reg_361 <= exitcond_reg_361;
                ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_105 <= minimumDistanceIndex_3_reg_105;
                    ap_reg_pp0_iter1_minimumDistanceIndex_reg_351(1 downto 0) <= minimumDistanceIndex_reg_351(1 downto 0);
                cond_reg_365 <= cond_fu_216_p2;
                exitcond_reg_361 <= exitcond_fu_210_p2;
                    minimumDistanceIndex_reg_351(1 downto 0) <= minimumDistanceIndex_fu_196_p1(1 downto 0);
                    p_color_array_load_0_s_reg_370(7 downto 0) <= p_color_array_load_0_s_fu_222_p3(7 downto 0);
                    p_color_array_load_1_s_reg_375(16) <= p_color_array_load_1_s_fu_230_p3(16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond_reg_361 = ap_const_lv1_0))) then
                in_pixel6_rewind_reg_120 <= in_pixel6_phi_reg_134;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_pixel_0_load_A = ap_const_logic_1)) then
                in_pixel_0_payload_A <= in_pixel_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_pixel_0_load_B = ap_const_logic_1)) then
                in_pixel_0_payload_B <= in_pixel_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then
                newSel3_reg_416 <= newSel3_fu_320_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_pixel_1_load_A = ap_const_logic_1)) then
                out_pixel_1_payload_A <= in_pixel_assign_fu_340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_pixel_1_load_B = ap_const_logic_1)) then
                out_pixel_1_payload_B <= in_pixel_assign_fu_340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_356 <= tmp_3_fu_206_p1;
            end if;
        end if;
    end process;
    minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter1_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter2_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter3_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter4_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter5_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter6_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter7_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter8_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter9_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter10_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter11_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter12_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter13_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter14_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter15_minimumDistanceIndex_reg_351(2) <= '0';
    ap_reg_pp0_iter16_minimumDistanceIndex_reg_351(2) <= '0';
    p_color_array_load_0_s_reg_370(16 downto 8) <= "100000000";
    p_color_array_load_1_s_reg_375(15 downto 0) <= "1111111100000000";
    p_color_array_load_2_s_reg_380(7 downto 0) <= "11111111";
    p_color_array_load_2_s_reg_380(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_pixel_0_vld_out, do_init_reg_89, ap_enable_reg_pp0_iter1, out_pixel_1_ack_in, ap_enable_reg_pp0_iter19)
    begin
                ap_block_pp0_stage0_01001 <= (((out_pixel_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((in_pixel_0_vld_out = ap_const_logic_0) and (do_init_reg_89 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_pixel_0_vld_out, do_init_reg_89, ap_enable_reg_pp0_iter1, out_pixel_1_ack_in, ap_block_state20_io, ap_enable_reg_pp0_iter18, ap_block_state21_io, ap_enable_reg_pp0_iter19)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and ((out_pixel_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io))) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_io)) or ((in_pixel_0_vld_out = ap_const_logic_0) and (do_init_reg_89 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_pixel_0_vld_out, do_init_reg_89, ap_enable_reg_pp0_iter1, out_pixel_1_ack_in, ap_block_state20_io, ap_enable_reg_pp0_iter18, ap_block_state21_io, ap_enable_reg_pp0_iter19)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and ((out_pixel_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state21_io))) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_io)) or ((in_pixel_0_vld_out = ap_const_logic_0) and (do_init_reg_89 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(out_pixel_1_ack_in, ap_reg_pp0_iter17_exitcond_reg_361)
    begin
                ap_block_state20_io <= ((out_pixel_1_ack_in = ap_const_logic_0) and (ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_1));
    end process;

        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(out_pixel_1_ack_in, ap_reg_pp0_iter18_exitcond_reg_361)
    begin
                ap_block_state21_io <= ((out_pixel_1_ack_in = ap_const_logic_0) and (ap_reg_pp0_iter18_exitcond_reg_361 = ap_const_lv1_1));
    end process;


    ap_block_state21_pp0_stage0_iter19_assign_proc : process(out_pixel_1_ack_in)
    begin
                ap_block_state21_pp0_stage0_iter19 <= (out_pixel_1_ack_in = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_pixel_0_vld_out, do_init_reg_89)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((in_pixel_0_vld_out = ap_const_logic_0) and (do_init_reg_89 = ap_const_lv1_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_218_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_218 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_448_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_448 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_reg_pp0_iter18_exitcond_reg_361, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter18_exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to18_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to18 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6_assign_proc : process(ap_block_pp0_stage0, in_pixel6_rewind_reg_120, in_pixel6_phi_reg_134, ap_reg_pp0_iter1_exitcond_reg_361, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_reg_pp0_iter1_exitcond_reg_361 = ap_const_lv1_0))) then 
            ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6 <= in_pixel6_phi_reg_134;
        else 
            ap_phi_mux_in_pixel6_rewind_phi_fu_124_p6 <= in_pixel6_rewind_reg_120;
        end if; 
    end process;


    ap_phi_mux_minimumDistance4_phi_fu_151_p6_assign_proc : process(ap_block_pp0_stage0, minimumDistance4_reg_147, ap_reg_pp0_iter16_exitcond_reg_361, ap_enable_reg_pp0_iter17, distance_0_minimumDi_2_fu_328_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter16_exitcond_reg_361 = ap_const_lv1_1)) then 
                ap_phi_mux_minimumDistance4_phi_fu_151_p6 <= ap_const_lv32_7FFFFFFF;
            elsif ((ap_reg_pp0_iter16_exitcond_reg_361 = ap_const_lv1_0)) then 
                ap_phi_mux_minimumDistance4_phi_fu_151_p6 <= distance_0_minimumDi_2_fu_328_p3;
            else 
                ap_phi_mux_minimumDistance4_phi_fu_151_p6 <= minimumDistance4_reg_147;
            end if;
        else 
            ap_phi_mux_minimumDistance4_phi_fu_151_p6 <= minimumDistance4_reg_147;
        end if; 
    end process;


    ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6_assign_proc : process(ap_reg_pp0_iter17_exitcond_reg_361, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, minimumDistanceIndex_1_reg_161, newSel3_reg_416)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_1)) then 
                ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 <= ap_const_lv32_0;
            elsif ((ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_0)) then 
                ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 <= newSel3_reg_416;
            else 
                ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 <= minimumDistanceIndex_1_reg_161;
            end if;
        else 
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6 <= minimumDistanceIndex_1_reg_161;
        end if; 
    end process;


    ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6_assign_proc : process(exitcond_reg_361, minimumDistanceIndex_3_reg_105, tmp_3_reg_356, ap_condition_218)
    begin
        if ((ap_const_boolean_1 = ap_condition_218)) then
            if ((exitcond_reg_361 = ap_const_lv1_1)) then 
                ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 <= ap_const_lv2_0;
            elsif ((exitcond_reg_361 = ap_const_lv1_0)) then 
                ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 <= tmp_3_reg_356;
            else 
                ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 <= minimumDistanceIndex_3_reg_105;
            end if;
        else 
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6 <= minimumDistanceIndex_3_reg_105;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_134 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(exitcond_fu_210_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_210_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to18)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to18 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cond_fu_216_p2 <= "1" when (minimumDistanceIndex_3_reg_105 = ap_const_lv2_0) else "0";
    distance_0_minimumDi_1_fu_271_p3 <= 
        minimumDistance_2_1_s_fu_262_p1 when (tmp_2_1_fu_265_p2(0) = '1') else 
        distance_0_minimumDi_fu_254_p3;
    distance_0_minimumDi_2_fu_328_p3 <= 
        minimumDistance_2_2_s_fu_283_p1 when (tmp_2_2_fu_286_p2(0) = '1') else 
        distance_0_minimumDi_1_reg_405;
    distance_0_minimumDi_fu_254_p3 <= 
        minimumDistance_2_ex_fu_245_p1 when (tmp_2_fu_248_p2(0) = '1') else 
        ap_phi_mux_minimumDistance4_phi_fu_151_p6;
    exitcond_fu_210_p2 <= "1" when (i_2_fu_200_p2 = ap_const_lv3_6) else "0";

    grp_getColorDistance_fu_175_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_getColorDistance_fu_175_ap_ce <= ap_const_logic_1;
        else 
            grp_getColorDistance_fu_175_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_getColorDistance_fu_175_ap_start <= ap_reg_grp_getColorDistance_fu_175_ap_start;

    grp_getColorDistance_fu_182_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_getColorDistance_fu_182_ap_ce <= ap_const_logic_1;
        else 
            grp_getColorDistance_fu_182_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_getColorDistance_fu_182_ap_start <= ap_reg_grp_getColorDistance_fu_182_ap_start;

    grp_getColorDistance_fu_189_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_getColorDistance_fu_189_ap_ce <= ap_const_logic_1;
        else 
            grp_getColorDistance_fu_189_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_getColorDistance_fu_189_ap_start <= ap_reg_grp_getColorDistance_fu_189_ap_start;
    i_2_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(minimumDistanceIndex_fu_196_p1));
    in_pixel_0_ack_in <= in_pixel_0_state(1);

    in_pixel_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_89, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (do_init_reg_89 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_pixel_0_ack_out <= ap_const_logic_1;
        else 
            in_pixel_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_pixel_0_data_out_assign_proc : process(in_pixel_0_payload_A, in_pixel_0_payload_B, in_pixel_0_sel)
    begin
        if ((in_pixel_0_sel = ap_const_logic_1)) then 
            in_pixel_0_data_out <= in_pixel_0_payload_B;
        else 
            in_pixel_0_data_out <= in_pixel_0_payload_A;
        end if; 
    end process;

    in_pixel_0_load_A <= (in_pixel_0_state_cmp_full and not(in_pixel_0_sel_wr));
    in_pixel_0_load_B <= (in_pixel_0_state_cmp_full and in_pixel_0_sel_wr);
    in_pixel_0_sel <= in_pixel_0_sel_rd;
    in_pixel_0_state_cmp_full <= '0' when (in_pixel_0_state = ap_const_lv2_1) else '1';
    in_pixel_0_vld_in <= in_pixel_TVALID;
    in_pixel_0_vld_out <= in_pixel_0_state(0);

    in_pixel_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_89, ap_enable_reg_pp0_iter1, in_pixel_0_state, ap_block_pp0_stage0)
    begin
        if (((do_init_reg_89 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_pixel_TDATA_blk_n <= in_pixel_0_state(0);
        else 
            in_pixel_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_pixel_TREADY <= in_pixel_0_state(1);
    in_pixel_assign_fu_340_p3 <= 
        ap_const_lv32_0 when (tmp_fu_335_p2(0) = '1') else 
        ap_reg_pp0_iter17_in_pixel6_phi_reg_134;
    minimumDistanceIndex_2_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_105),32));
    minimumDistanceIndex_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_minimumDistanceIndex_3_phi_fu_109_p6),3));
    minimumDistance_2_1_s_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(minimumDistance_2_1_reg_390),32));
    minimumDistance_2_2_s_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(minimumDistance_2_2_reg_411),32));
    minimumDistance_2_ex_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(minimumDistance_2_reg_385),32));
    newSel1_fu_313_p3 <= 
        minimumDistanceIndex_2_fu_279_p1 when (tmp_2_reg_395(0) = '1') else 
        ap_phi_mux_minimumDistanceIndex_1_phi_fu_165_p6;
    newSel3_fu_320_p3 <= 
        newSel_cast_fu_304_p1 when (or_cond_fu_308_p2(0) = '1') else 
        newSel1_fu_313_p3;
    newSel_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel_fu_299_p2),32));
    newSel_fu_299_p2 <= std_logic_vector(unsigned(newSel_v_cast_cast_fu_291_p3) + unsigned(ap_reg_pp0_iter16_minimumDistanceIndex_reg_351));
    newSel_v_cast_cast_fu_291_p3 <= 
        ap_const_lv3_2 when (tmp_2_2_fu_286_p2(0) = '1') else 
        ap_const_lv3_1;
    or_cond_fu_308_p2 <= (tmp_2_2_fu_286_p2 or tmp_2_1_reg_400);
    out_pixel_1_ack_in <= out_pixel_1_state(1);
    out_pixel_1_ack_out <= out_pixel_TREADY;

    out_pixel_1_data_out_assign_proc : process(out_pixel_1_payload_A, out_pixel_1_payload_B, out_pixel_1_sel)
    begin
        if ((out_pixel_1_sel = ap_const_logic_1)) then 
            out_pixel_1_data_out <= out_pixel_1_payload_B;
        else 
            out_pixel_1_data_out <= out_pixel_1_payload_A;
        end if; 
    end process;

    out_pixel_1_load_A <= (out_pixel_1_state_cmp_full and not(out_pixel_1_sel_wr));
    out_pixel_1_load_B <= (out_pixel_1_state_cmp_full and out_pixel_1_sel_wr);
    out_pixel_1_sel <= out_pixel_1_sel_rd;
    out_pixel_1_state_cmp_full <= '0' when (out_pixel_1_state = ap_const_lv2_1) else '1';

    out_pixel_1_vld_in_assign_proc : process(ap_reg_pp0_iter17_exitcond_reg_361, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            out_pixel_1_vld_in <= ap_const_logic_1;
        else 
            out_pixel_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_pixel_1_vld_out <= out_pixel_1_state(0);
    out_pixel_TDATA <= out_pixel_1_data_out;

    out_pixel_TDATA_blk_n_assign_proc : process(ap_reg_pp0_iter17_exitcond_reg_361, ap_enable_reg_pp0_iter18, ap_reg_pp0_iter18_exitcond_reg_361, ap_enable_reg_pp0_iter19, out_pixel_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_reg_pp0_iter18_exitcond_reg_361 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((ap_reg_pp0_iter17_exitcond_reg_361 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)))) then 
            out_pixel_TDATA_blk_n <= out_pixel_1_state(1);
        else 
            out_pixel_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_pixel_TVALID <= out_pixel_1_state(0);
    p_color_array_load_0_s_fu_222_p3 <= 
        ap_const_lv17_10000 when (cond_fu_216_p2(0) = '1') else 
        ap_const_lv17_100FF;
    p_color_array_load_1_s_fu_230_p3 <= 
        ap_const_lv17_FF00 when (cond_fu_216_p2(0) = '1') else 
        ap_const_lv17_1FF00;
    p_color_array_load_2_s_fu_238_p3 <= 
        ap_const_lv17_FF when (cond_reg_365(0) = '1') else 
        ap_const_lv17_FFFF;
    tmp_2_1_fu_265_p2 <= "1" when (signed(minimumDistance_2_1_s_fu_262_p1) < signed(distance_0_minimumDi_fu_254_p3)) else "0";
    tmp_2_2_fu_286_p2 <= "1" when (signed(minimumDistance_2_2_s_fu_283_p1) < signed(distance_0_minimumDi_1_reg_405)) else "0";
    tmp_2_fu_248_p2 <= "1" when (signed(minimumDistance_2_ex_fu_245_p1) < signed(ap_phi_mux_minimumDistance4_phi_fu_151_p6)) else "0";
    tmp_3_fu_206_p1 <= i_2_fu_200_p2(2 - 1 downto 0);
    tmp_fu_335_p2 <= "1" when (newSel3_reg_416 = ap_const_lv32_0) else "0";
end behav;
