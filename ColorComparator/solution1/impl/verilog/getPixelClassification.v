// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getPixelClassification,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.679625,HLS_SYN_LAT=23,HLS_SYN_TPT=24,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=701,HLS_SYN_LUT=4239}" *)

module getPixelClassification (
        pixel,
        ap_clk,
        ap_rst,
        ap_return,
        ap_done,
        ap_start,
        ap_ready,
        ap_idle
);


input  [31:0] pixel;
input   ap_clk;
input   ap_rst;
output  [31:0] ap_return;
output   ap_done;
input   ap_start;
output   ap_ready;
output   ap_idle;

wire    Loop_PIXEL_COLOR_LOO_U0_ap_start;
wire    Loop_PIXEL_COLOR_LOO_U0_ap_done;
wire    Loop_PIXEL_COLOR_LOO_U0_ap_continue;
wire    Loop_PIXEL_COLOR_LOO_U0_ap_idle;
wire    Loop_PIXEL_COLOR_LOO_U0_ap_ready;
wire   [31:0] Loop_PIXEL_COLOR_LOO_U0_ap_return;
wire    ap_channel_done_minimumDistanceIndex;
wire    minimumDistanceIndex_full_n;
wire    p_ColorComparator_Co_U0_ap_start;
wire    p_ColorComparator_Co_U0_ap_done;
wire    p_ColorComparator_Co_U0_ap_continue;
wire    p_ColorComparator_Co_U0_ap_idle;
wire    p_ColorComparator_Co_U0_ap_ready;
wire   [31:0] p_ColorComparator_Co_U0_ap_return;
wire   [31:0] tmp_p_ColorComparator_Co_fu_38_ap_return;
wire    ap_sync_continue;
wire   [31:0] minimumDistanceIndex_dout;
wire    minimumDistanceIndex_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    Loop_PIXEL_COLOR_LOO_U0_start_full_n;
wire    Loop_PIXEL_COLOR_LOO_U0_start_write;
wire    p_ColorComparator_Co_U0_start_full_n;
wire    p_ColorComparator_Co_U0_start_write;

Loop_PIXEL_COLOR_LOO Loop_PIXEL_COLOR_LOO_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Loop_PIXEL_COLOR_LOO_U0_ap_start),
    .ap_done(Loop_PIXEL_COLOR_LOO_U0_ap_done),
    .ap_continue(Loop_PIXEL_COLOR_LOO_U0_ap_continue),
    .ap_idle(Loop_PIXEL_COLOR_LOO_U0_ap_idle),
    .ap_ready(Loop_PIXEL_COLOR_LOO_U0_ap_ready),
    .pixel(pixel),
    .ap_return(Loop_PIXEL_COLOR_LOO_U0_ap_return)
);

p_ColorComparator_Co p_ColorComparator_Co_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(p_ColorComparator_Co_U0_ap_start),
    .ap_done(p_ColorComparator_Co_U0_ap_done),
    .ap_continue(p_ColorComparator_Co_U0_ap_continue),
    .ap_idle(p_ColorComparator_Co_U0_ap_idle),
    .ap_ready(p_ColorComparator_Co_U0_ap_ready),
    .p_read(minimumDistanceIndex_dout),
    .ap_return(p_ColorComparator_Co_U0_ap_return)
);

fifo_w32_d2_A minimumDistanceIndex_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Loop_PIXEL_COLOR_LOO_U0_ap_return),
    .if_full_n(minimumDistanceIndex_full_n),
    .if_write(Loop_PIXEL_COLOR_LOO_U0_ap_done),
    .if_dout(minimumDistanceIndex_dout),
    .if_empty_n(minimumDistanceIndex_empty_n),
    .if_read(p_ColorComparator_Co_U0_ap_ready)
);

assign Loop_PIXEL_COLOR_LOO_U0_ap_continue = minimumDistanceIndex_full_n;

assign Loop_PIXEL_COLOR_LOO_U0_ap_start = ap_start;

assign Loop_PIXEL_COLOR_LOO_U0_start_full_n = 1'b1;

assign Loop_PIXEL_COLOR_LOO_U0_start_write = 1'b0;

assign ap_channel_done_minimumDistanceIndex = Loop_PIXEL_COLOR_LOO_U0_ap_done;

assign ap_done = p_ColorComparator_Co_U0_ap_done;

assign ap_idle = (p_ColorComparator_Co_U0_ap_idle & (minimumDistanceIndex_empty_n ^ 1'b1) & Loop_PIXEL_COLOR_LOO_U0_ap_idle);

assign ap_ready = Loop_PIXEL_COLOR_LOO_U0_ap_ready;

assign ap_return = p_ColorComparator_Co_U0_ap_return;

assign ap_sync_continue = 1'b1;

assign ap_sync_done = p_ColorComparator_Co_U0_ap_done;

assign ap_sync_ready = Loop_PIXEL_COLOR_LOO_U0_ap_ready;

assign p_ColorComparator_Co_U0_ap_continue = 1'b1;

assign p_ColorComparator_Co_U0_ap_start = minimumDistanceIndex_empty_n;

assign p_ColorComparator_Co_U0_start_full_n = 1'b1;

assign p_ColorComparator_Co_U0_start_write = 1'b0;

assign tmp_p_ColorComparator_Co_fu_38_ap_return = 32'd0;

endmodule //getPixelClassification
