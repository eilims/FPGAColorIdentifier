// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="parseColorsToCenterPixel,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1320,HLS_SYN_LUT=6559}" *)

module parseColorsToCenterPixel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixelArray_address0,
        pixelArray_ce0,
        pixelArray_q0,
        pixelArray_address1,
        pixelArray_ce1,
        pixelArray_we1,
        pixelArray_d1,
        selectedColorArray_address0,
        selectedColorArray_ce0,
        selectedColorArray_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_state21 = 10'd8;
parameter    ap_ST_fsm_state22 = 10'd16;
parameter    ap_ST_fsm_state23 = 10'd32;
parameter    ap_ST_fsm_state24 = 10'd64;
parameter    ap_ST_fsm_state25 = 10'd128;
parameter    ap_ST_fsm_pp1_stage0 = 10'd256;
parameter    ap_ST_fsm_state43 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] pixelArray_address0;
output   pixelArray_ce0;
input  [95:0] pixelArray_q0;
output  [1:0] pixelArray_address1;
output   pixelArray_ce1;
output   pixelArray_we1;
output  [95:0] pixelArray_d1;
output  [2:0] selectedColorArray_address0;
output   selectedColorArray_ce0;
input  [31:0] selectedColorArray_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] pixelArray_address0;
reg pixelArray_ce0;
reg pixelArray_ce1;
reg pixelArray_we1;
reg selectedColorArray_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] p_color_array_address0;
reg    p_color_array_ce0;
wire   [16:0] p_color_array_q0;
reg   [31:0] centerColor_reg_299;
reg   [2:0] minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter1_minimumDistanceIndex_reg_311;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] ap_reg_pp0_iter2_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter3_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter4_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter5_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter6_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter7_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter8_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter9_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter10_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter11_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter12_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter13_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter14_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter15_minimumDistanceIndex_reg_311;
reg   [2:0] ap_reg_pp0_iter16_minimumDistanceIndex_reg_311;
reg   [31:0] minimumDistance_i_reg_323;
reg   [3:0] i1_reg_335;
reg   [3:0] phi_urem_reg_346;
reg   [31:0] reg_382;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg   [95:0] pixelArray_load_reg_1066;
wire   [8:0] pixelRed_i_cast_fu_408_p1;
reg   [8:0] pixelRed_i_cast_reg_1072;
wire   [8:0] pixelGreen_i_cast_fu_422_p1;
reg   [8:0] pixelGreen_i_cast_reg_1077;
wire   [8:0] pixelBlue_i_cast_fu_426_p1;
reg   [8:0] pixelBlue_i_cast_reg_1082;
wire   [0:0] exitcond_i_fu_430_p2;
reg   [0:0] exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter4_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter5_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter6_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter7_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter8_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter9_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter10_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter11_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter12_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter13_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter14_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter15_exitcond_i_reg_1087;
reg   [0:0] ap_reg_pp0_iter16_exitcond_i_reg_1087;
wire   [2:0] i_1_fu_436_p2;
reg   [2:0] i_1_reg_1091;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] colorBlue_fu_447_p1;
reg   [7:0] colorBlue_reg_1101;
wire   [7:0] grp_fu_372_p4;
reg   [7:0] colorGreen_reg_1106;
reg    ap_enable_reg_pp0_iter1;
wire   [8:0] number_assign_3_fu_467_p2;
reg   [8:0] number_assign_3_reg_1111;
reg   [8:0] ap_reg_pp0_iter2_number_assign_3_reg_1111;
wire   [17:0] result_3_fu_487_p2;
reg   [17:0] result_3_reg_1116;
wire   [16:0] tmp_19_fu_506_p2;
reg   [16:0] tmp_19_reg_1121;
wire   [29:0] powerSummation_V_1_fu_586_p2;
reg   [29:0] powerSummation_V_1_reg_1127;
reg   [11:0] tmp_15_reg_1132;
wire   [31:0] i_0_minimumDistanceI_fu_615_p3;
reg    ap_enable_reg_pp0_iter17;
wire   [31:0] distance_0_minimumDi_fu_623_p3;
wire    ap_CS_fsm_state21;
reg   [31:0] tmp_9_reg_1152;
reg   [31:0] tmp_2_reg_1162;
wire  signed [63:0] tmp_fu_664_p1;
reg  signed [63:0] tmp_reg_1167;
wire   [0:0] tmp_1_fu_669_p2;
wire    ap_CS_fsm_state24;
wire   [8:0] colorRed_cast_cast_fu_687_p3;
reg   [8:0] colorRed_cast_cast_reg_1186;
wire    ap_CS_fsm_state25;
wire   [8:0] colorGreen_cast_fu_695_p1;
reg   [8:0] colorGreen_cast_reg_1191;
wire   [8:0] colorBlue_cast_fu_699_p1;
reg   [8:0] colorBlue_cast_reg_1196;
wire   [0:0] exitcond_fu_703_p2;
reg   [0:0] exitcond_reg_1201;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state26_pp1_stage0_iter0;
wire    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_state28_pp1_stage0_iter2;
wire    ap_block_state29_pp1_stage0_iter3;
wire    ap_block_state30_pp1_stage0_iter4;
wire    ap_block_state31_pp1_stage0_iter5;
wire    ap_block_state32_pp1_stage0_iter6;
wire    ap_block_state33_pp1_stage0_iter7;
wire    ap_block_state34_pp1_stage0_iter8;
wire    ap_block_state35_pp1_stage0_iter9;
wire    ap_block_state36_pp1_stage0_iter10;
wire    ap_block_state37_pp1_stage0_iter11;
wire    ap_block_state38_pp1_stage0_iter12;
wire    ap_block_state39_pp1_stage0_iter13;
wire    ap_block_state40_pp1_stage0_iter14;
wire    ap_block_state41_pp1_stage0_iter15;
wire    ap_block_state42_pp1_stage0_iter16;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter2_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter3_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter4_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter5_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter6_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter7_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter8_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter9_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter10_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter11_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter12_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter13_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter14_exitcond_reg_1201;
reg   [0:0] ap_reg_pp1_iter15_exitcond_reg_1201;
wire   [3:0] i_fu_709_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] idx_urem_fu_727_p3;
reg   [1:0] pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220;
reg   [1:0] ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220;
reg   [1:0] tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter1_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter2_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter3_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter4_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter5_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter6_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter7_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter8_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter9_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter10_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter11_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter12_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter13_tmp_24_reg_1226;
reg   [1:0] ap_reg_pp1_iter14_tmp_24_reg_1226;
reg   [7:0] pixelRed_1_reg_1231;
wire   [17:0] result_1_fu_810_p2;
reg   [17:0] result_1_reg_1236;
wire   [16:0] tmp_30_fu_829_p2;
reg   [16:0] tmp_30_reg_1241;
wire   [29:0] powerSummation_V_fu_918_p2;
reg   [29:0] powerSummation_V_reg_1247;
wire   [19:0] grp_fxp_sqrt_fu_357_ap_return;
reg   [19:0] result_V_reg_1252;
reg    ap_enable_reg_pp1_iter15;
wire   [6:0] tmp_16_fu_924_p3;
reg   [6:0] tmp_16_reg_1257;
wire   [6:0] tmp_17_fu_931_p2;
reg   [6:0] tmp_17_reg_1264;
wire   [0:0] tmp_32_fu_937_p2;
reg   [0:0] tmp_32_reg_1270;
wire   [6:0] tmp_34_fu_943_p2;
reg   [6:0] tmp_34_reg_1278;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter16;
reg   [2:0] tempArray_address0;
reg    tempArray_ce0;
reg    tempArray_we0;
reg   [31:0] tempArray_d0;
wire   [31:0] tempArray_q0;
reg   [2:0] tempArray_address1;
reg    tempArray_ce1;
reg    tempArray_we1;
reg   [31:0] tempArray_d1;
reg   [29:0] grp_fxp_sqrt_fu_357_in_val_V_read;
reg    grp_fxp_sqrt_fu_357_ap_ce;
reg   [2:0] ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4;
wire    ap_block_pp0_stage0;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_i5_fu_442_p1;
wire   [63:0] tmp_8_fu_735_p1;
wire   [63:0] tmp_s_fu_740_p1;
wire   [31:0] tmp_4_fu_631_p1;
wire   [31:0] tmp_3_fu_644_p1;
wire   [31:0] tmp_5_fu_659_p1;
wire   [7:0] pixelRed_fu_398_p4;
wire   [7:0] pixelGreen_fu_412_p4;
wire   [7:0] pixelBlue_fu_388_p4;
wire   [0:0] tmp_11_fu_451_p3;
wire   [8:0] colorRed_i_cast_cast_fu_459_p3;
wire   [8:0] colorGreen_i_cast_fu_472_p1;
wire   [8:0] number_assign_4_fu_478_p2;
wire  signed [8:0] result_3_fu_487_p0;
wire  signed [17:0] number_assign_3_i_ca_fu_483_p1;
wire  signed [8:0] result_3_fu_487_p1;
wire   [8:0] colorBlue_i_cast_fu_475_p1;
wire   [8:0] number_assign_5_fu_493_p2;
wire  signed [8:0] tmp_19_fu_506_p0;
wire  signed [8:0] tmp_19_fu_506_p1;
wire  signed [8:0] result_2_fu_515_p0;
wire  signed [17:0] number_assign_i_cast_fu_512_p1;
wire  signed [8:0] result_2_fu_515_p1;
wire   [17:0] result_2_fu_515_p2;
wire   [26:0] tmp_10_fu_521_p3;
wire   [27:0] tmp_13_fu_533_p3;
wire   [26:0] p_shl_i_i_fu_544_p3;
wire   [24:0] p_shl9_i_i_fu_555_p3;
wire  signed [27:0] p_shl_i_i_cast_fu_551_p1;
wire  signed [27:0] p_shl9_i_i_cast_fu_562_p1;
wire   [27:0] p_Val2_s_fu_566_p2;
wire  signed [28:0] p_Val2_5_i6_cast_c_fu_572_p1;
wire  signed [28:0] p_Val2_4_cast_fu_540_p1;
wire   [28:0] tmp8_fu_576_p2;
wire  signed [29:0] p_Val2_3_cast_fu_529_p1;
wire  signed [29:0] tmp8_cast_fu_582_p1;
wire   [31:0] minimumDistance_fu_606_p1;
wire   [0:0] tmp_i7_fu_609_p2;
wire   [31:0] minimumDistanceIndex_1_fu_602_p1;
wire   [0:0] tmp_22_fu_679_p3;
wire   [7:0] colorBlue_1_fu_675_p1;
wire   [3:0] next_urem_fu_715_p2;
wire   [0:0] tmp_25_fu_721_p2;
wire   [2:0] tmp_31_fu_745_p1;
wire   [2:0] mul_fu_753_p1;
wire   [7:0] mul_fu_753_p2;
wire   [7:0] pixelGreen_1_fu_783_p4;
wire   [7:0] pixelBlue_1_fu_769_p1;
wire   [8:0] pixelGreen_cast_fu_793_p1;
wire   [8:0] number_assign_1_fu_801_p2;
wire  signed [8:0] result_1_fu_810_p0;
wire  signed [17:0] number_assign_1_cast_fu_806_p1;
wire  signed [8:0] result_1_fu_810_p1;
wire   [8:0] pixelBlue_cast_fu_797_p1;
wire   [8:0] number_assign_2_fu_816_p2;
wire  signed [8:0] tmp_30_fu_829_p0;
wire  signed [8:0] tmp_30_fu_829_p1;
wire   [8:0] pixelRed_cast_fu_835_p1;
wire   [8:0] number_assign_fu_838_p2;
wire  signed [8:0] result_fu_847_p0;
wire  signed [17:0] number_assign_cast_c_fu_843_p1;
wire  signed [8:0] result_fu_847_p1;
wire   [17:0] result_fu_847_p2;
wire   [26:0] tmp_20_fu_853_p3;
wire   [27:0] tmp_23_fu_865_p3;
wire   [26:0] p_shl_i_fu_876_p3;
wire   [24:0] p_shl9_i_fu_887_p3;
wire  signed [27:0] p_shl_i_cast_fu_883_p1;
wire  signed [27:0] p_shl9_i_cast_fu_894_p1;
wire   [27:0] p_Val2_1_fu_898_p2;
wire  signed [28:0] p_Val2_2_cast_cast_fu_904_p1;
wire  signed [28:0] p_Val2_1_cast_fu_872_p1;
wire   [28:0] tmp9_fu_908_p2;
wire  signed [29:0] p_Val2_cast_fu_861_p1;
wire  signed [29:0] tmp9_cast_fu_914_p1;
wire   [11:0] tmp_21_fu_949_p4;
wire   [6:0] tmp_35_fu_962_p3;
wire   [6:0] tmp_37_fu_972_p3;
wire   [6:0] tmp_36_fu_967_p3;
wire   [6:0] tmp_38_fu_977_p2;
wire   [95:0] tmp_33_fu_958_p1;
wire   [95:0] tmp_39_fu_983_p1;
wire   [95:0] tmp_42_fu_995_p2;
reg   [95:0] tmp_43_fu_1001_p4;
wire   [95:0] tmp_40_fu_987_p1;
wire   [95:0] tmp_41_fu_991_p1;
wire   [95:0] tmp_45_fu_1018_p2;
wire   [95:0] tmp_46_fu_1024_p2;
wire   [95:0] p_demorgan_fu_1030_p2;
wire   [95:0] tmp_47_fu_1036_p2;
wire   [95:0] tmp_44_fu_1011_p3;
wire   [95:0] tmp_48_fu_1042_p2;
wire   [95:0] tmp_49_fu_1048_p2;
wire    ap_CS_fsm_state43;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [7:0] mul_fu_753_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
end

parseColorsToCentbkb #(
    .DataWidth( 17 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
p_color_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_color_array_address0),
    .ce0(p_color_array_ce0),
    .q0(p_color_array_q0)
);

parseColorsToCentcud #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
tempArray_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tempArray_address0),
    .ce0(tempArray_ce0),
    .we0(tempArray_we0),
    .d0(tempArray_d0),
    .q0(tempArray_q0),
    .address1(tempArray_address1),
    .ce1(tempArray_ce1),
    .we1(tempArray_we1),
    .d1(tempArray_d1)
);

fxp_sqrt grp_fxp_sqrt_fu_357(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val_V_read(grp_fxp_sqrt_fu_357_in_val_V_read),
    .ap_return(grp_fxp_sqrt_fu_357_ap_return),
    .ap_ce(grp_fxp_sqrt_fu_357_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state26)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ap_reg_pp0_iter16_exitcond_i_reg_1087 == 1'd0))) begin
        centerColor_reg_299 <= i_0_minimumDistanceI_fu_615_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        centerColor_reg_299 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i1_reg_335 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_703_p2 == 1'd0))) begin
        i1_reg_335 <= i_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_reg_1087 == 1'd0))) begin
        minimumDistanceIndex_reg_311 <= i_1_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minimumDistanceIndex_reg_311 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (ap_reg_pp0_iter16_exitcond_i_reg_1087 == 1'd0))) begin
        minimumDistance_i_reg_323 <= distance_0_minimumDi_fu_623_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        minimumDistance_i_reg_323 <= 32'd2147483647;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_urem_reg_346 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_703_p2 == 1'd0))) begin
        phi_urem_reg_346 <= idx_urem_fu_727_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_i_reg_1087 <= ap_reg_pp0_iter9_exitcond_i_reg_1087;
        ap_reg_pp0_iter10_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter9_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter11_exitcond_i_reg_1087 <= ap_reg_pp0_iter10_exitcond_i_reg_1087;
        ap_reg_pp0_iter11_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter10_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter12_exitcond_i_reg_1087 <= ap_reg_pp0_iter11_exitcond_i_reg_1087;
        ap_reg_pp0_iter12_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter11_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter13_exitcond_i_reg_1087 <= ap_reg_pp0_iter12_exitcond_i_reg_1087;
        ap_reg_pp0_iter13_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter12_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter14_exitcond_i_reg_1087 <= ap_reg_pp0_iter13_exitcond_i_reg_1087;
        ap_reg_pp0_iter14_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter13_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter15_exitcond_i_reg_1087 <= ap_reg_pp0_iter14_exitcond_i_reg_1087;
        ap_reg_pp0_iter15_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter14_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter16_exitcond_i_reg_1087 <= ap_reg_pp0_iter15_exitcond_i_reg_1087;
        ap_reg_pp0_iter16_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter15_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter2_exitcond_i_reg_1087 <= ap_reg_pp0_iter1_exitcond_i_reg_1087;
        ap_reg_pp0_iter2_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter1_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter2_number_assign_3_reg_1111 <= number_assign_3_reg_1111;
        ap_reg_pp0_iter3_exitcond_i_reg_1087 <= ap_reg_pp0_iter2_exitcond_i_reg_1087;
        ap_reg_pp0_iter3_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter2_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter4_exitcond_i_reg_1087 <= ap_reg_pp0_iter3_exitcond_i_reg_1087;
        ap_reg_pp0_iter4_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter3_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter5_exitcond_i_reg_1087 <= ap_reg_pp0_iter4_exitcond_i_reg_1087;
        ap_reg_pp0_iter5_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter4_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter6_exitcond_i_reg_1087 <= ap_reg_pp0_iter5_exitcond_i_reg_1087;
        ap_reg_pp0_iter6_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter5_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter7_exitcond_i_reg_1087 <= ap_reg_pp0_iter6_exitcond_i_reg_1087;
        ap_reg_pp0_iter7_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter6_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter8_exitcond_i_reg_1087 <= ap_reg_pp0_iter7_exitcond_i_reg_1087;
        ap_reg_pp0_iter8_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter7_minimumDistanceIndex_reg_311;
        ap_reg_pp0_iter9_exitcond_i_reg_1087 <= ap_reg_pp0_iter8_exitcond_i_reg_1087;
        ap_reg_pp0_iter9_minimumDistanceIndex_reg_311 <= ap_reg_pp0_iter8_minimumDistanceIndex_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_1087 <= exitcond_i_reg_1087;
        ap_reg_pp0_iter1_minimumDistanceIndex_reg_311 <= minimumDistanceIndex_reg_311;
        exitcond_i_reg_1087 <= exitcond_i_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        ap_reg_pp1_iter10_exitcond_reg_1201 <= ap_reg_pp1_iter9_exitcond_reg_1201;
        ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter10_tmp_24_reg_1226 <= ap_reg_pp1_iter9_tmp_24_reg_1226;
        ap_reg_pp1_iter11_exitcond_reg_1201 <= ap_reg_pp1_iter10_exitcond_reg_1201;
        ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter10_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter11_tmp_24_reg_1226 <= ap_reg_pp1_iter10_tmp_24_reg_1226;
        ap_reg_pp1_iter12_exitcond_reg_1201 <= ap_reg_pp1_iter11_exitcond_reg_1201;
        ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter11_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter12_tmp_24_reg_1226 <= ap_reg_pp1_iter11_tmp_24_reg_1226;
        ap_reg_pp1_iter13_exitcond_reg_1201 <= ap_reg_pp1_iter12_exitcond_reg_1201;
        ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter12_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter13_tmp_24_reg_1226 <= ap_reg_pp1_iter12_tmp_24_reg_1226;
        ap_reg_pp1_iter14_exitcond_reg_1201 <= ap_reg_pp1_iter13_exitcond_reg_1201;
        ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter13_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter14_tmp_24_reg_1226 <= ap_reg_pp1_iter13_tmp_24_reg_1226;
        ap_reg_pp1_iter15_exitcond_reg_1201 <= ap_reg_pp1_iter14_exitcond_reg_1201;
        ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter2_exitcond_reg_1201 <= ap_reg_pp1_iter1_exitcond_reg_1201;
        ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter2_tmp_24_reg_1226 <= ap_reg_pp1_iter1_tmp_24_reg_1226;
        ap_reg_pp1_iter3_exitcond_reg_1201 <= ap_reg_pp1_iter2_exitcond_reg_1201;
        ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter2_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter3_tmp_24_reg_1226 <= ap_reg_pp1_iter2_tmp_24_reg_1226;
        ap_reg_pp1_iter4_exitcond_reg_1201 <= ap_reg_pp1_iter3_exitcond_reg_1201;
        ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter3_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter4_tmp_24_reg_1226 <= ap_reg_pp1_iter3_tmp_24_reg_1226;
        ap_reg_pp1_iter5_exitcond_reg_1201 <= ap_reg_pp1_iter4_exitcond_reg_1201;
        ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter4_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter5_tmp_24_reg_1226 <= ap_reg_pp1_iter4_tmp_24_reg_1226;
        ap_reg_pp1_iter6_exitcond_reg_1201 <= ap_reg_pp1_iter5_exitcond_reg_1201;
        ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter5_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter6_tmp_24_reg_1226 <= ap_reg_pp1_iter5_tmp_24_reg_1226;
        ap_reg_pp1_iter7_exitcond_reg_1201 <= ap_reg_pp1_iter6_exitcond_reg_1201;
        ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter6_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter7_tmp_24_reg_1226 <= ap_reg_pp1_iter6_tmp_24_reg_1226;
        ap_reg_pp1_iter8_exitcond_reg_1201 <= ap_reg_pp1_iter7_exitcond_reg_1201;
        ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter7_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter8_tmp_24_reg_1226 <= ap_reg_pp1_iter7_tmp_24_reg_1226;
        ap_reg_pp1_iter9_exitcond_reg_1201 <= ap_reg_pp1_iter8_exitcond_reg_1201;
        ap_reg_pp1_iter9_pixelArray_addr_3_reg_1220 <= ap_reg_pp1_iter8_pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter9_tmp_24_reg_1226 <= ap_reg_pp1_iter8_tmp_24_reg_1226;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond_reg_1201 <= exitcond_reg_1201;
        ap_reg_pp1_iter1_pixelArray_addr_3_reg_1220 <= pixelArray_addr_3_reg_1220;
        ap_reg_pp1_iter1_tmp_24_reg_1226 <= tmp_24_reg_1226;
        exitcond_reg_1201 <= exitcond_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        colorBlue_cast_reg_1196[7 : 0] <= colorBlue_cast_fu_699_p1[7 : 0];
        colorGreen_cast_reg_1191[7 : 0] <= colorGreen_cast_fu_695_p1[7 : 0];
        colorRed_cast_cast_reg_1186[7 : 0] <= colorRed_cast_cast_fu_687_p3[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_1087 == 1'd0))) begin
        colorBlue_reg_1101 <= colorBlue_fu_447_p1;
        number_assign_3_reg_1111 <= number_assign_3_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_reg_1087 == 1'd0))) begin
        colorGreen_reg_1106 <= {{p_color_array_q0[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_1_reg_1091 <= i_1_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_703_p2 == 1'd0))) begin
        pixelArray_addr_3_reg_1220 <= tmp_s_fu_740_p1;
        tmp_24_reg_1226 <= {{mul_fu_753_p2[6:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        pixelArray_load_reg_1066 <= pixelArray_q0;
        pixelBlue_i_cast_reg_1082[7 : 0] <= pixelBlue_i_cast_fu_426_p1[7 : 0];
        pixelGreen_i_cast_reg_1077[7 : 0] <= pixelGreen_i_cast_fu_422_p1[7 : 0];
        pixelRed_i_cast_reg_1072[7 : 0] <= pixelRed_i_cast_fu_408_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_reg_1201 == 1'd0))) begin
        pixelRed_1_reg_1231 <= {{tempArray_q0[23:16]}};
        result_1_reg_1236 <= result_1_fu_810_p2;
        tmp_30_reg_1241 <= tmp_30_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_exitcond_i_reg_1087 == 1'd0))) begin
        powerSummation_V_1_reg_1127[29 : 8] <= powerSummation_V_1_fu_586_p2[29 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond_reg_1201 == 1'd0))) begin
        powerSummation_V_reg_1247[29 : 8] <= powerSummation_V_fu_918_p2[29 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_382 <= {{pixelArray_q0[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_exitcond_i_reg_1087 == 1'd0))) begin
        result_3_reg_1116 <= result_3_fu_487_p2;
        tmp_19_reg_1121 <= tmp_19_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1) & (ap_reg_pp1_iter14_exitcond_reg_1201 == 1'd0))) begin
        result_V_reg_1252 <= grp_fxp_sqrt_fu_357_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter15_exitcond_i_reg_1087 == 1'd0))) begin
        tmp_15_reg_1132 <= {{grp_fxp_sqrt_fu_357_ap_return[19:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter14_exitcond_reg_1201 == 1'd0))) begin
        tmp_16_reg_1257[6 : 5] <= tmp_16_fu_924_p3[6 : 5];
        tmp_17_reg_1264[6 : 5] <= tmp_17_fu_931_p2[6 : 5];
        tmp_32_reg_1270 <= tmp_32_fu_937_p2;
        tmp_34_reg_1278[6 : 5] <= tmp_34_fu_943_p2[6 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_2_reg_1162 <= {{pixelArray_q0[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_9_reg_1152 <= {{pixelArray_load_reg_1066[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_reg_1167 <= tmp_fu_664_p1;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_430_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_703_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond_i_reg_1087 == 1'd0))) begin
        ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 = i_1_reg_1091;
    end else begin
        ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 = minimumDistanceIndex_reg_311;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fxp_sqrt_fu_357_ap_ce = 1'b1;
    end else begin
        grp_fxp_sqrt_fu_357_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (ap_reg_pp1_iter2_exitcond_reg_1201 == 1'd0))) begin
        grp_fxp_sqrt_fu_357_in_val_V_read = powerSummation_V_reg_1247;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_reg_pp0_iter3_exitcond_i_reg_1087 == 1'd0))) begin
        grp_fxp_sqrt_fu_357_in_val_V_read = powerSummation_V_1_reg_1127;
    end else begin
        grp_fxp_sqrt_fu_357_in_val_V_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        p_color_array_address0 = tmp_reg_1167;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_color_array_address0 = tmp_i5_fu_442_p1;
    end else begin
        p_color_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        p_color_array_ce0 = 1'b1;
    end else begin
        p_color_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter15 == 1'b1))) begin
        pixelArray_address0 = ap_reg_pp1_iter14_pixelArray_addr_3_reg_1220;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        pixelArray_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        pixelArray_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pixelArray_address0 = 64'd1;
    end else begin
        pixelArray_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter15 == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        pixelArray_ce0 = 1'b1;
    end else begin
        pixelArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1))) begin
        pixelArray_ce1 = 1'b1;
    end else begin
        pixelArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter16 == 1'b1) & (ap_reg_pp1_iter15_exitcond_reg_1201 == 1'd0))) begin
        pixelArray_we1 = 1'b1;
    end else begin
        pixelArray_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        selectedColorArray_ce0 = 1'b1;
    end else begin
        selectedColorArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tempArray_address0 = tmp_8_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        tempArray_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        tempArray_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        tempArray_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        tempArray_address0 = 64'd1;
    end else begin
        tempArray_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tempArray_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        tempArray_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        tempArray_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        tempArray_address1 = 64'd4;
    end else begin
        tempArray_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        tempArray_ce0 = 1'b1;
    end else begin
        tempArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        tempArray_ce1 = 1'b1;
    end else begin
        tempArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tempArray_d0 = reg_382;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        tempArray_d0 = tmp_5_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        tempArray_d0 = tmp_3_fu_644_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        tempArray_d0 = tmp_4_fu_631_p1;
    end else begin
        tempArray_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tempArray_d1 = tmp_2_reg_1162;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        tempArray_d1 = tmp_9_reg_1152;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23))) begin
        tempArray_d1 = reg_382;
    end else begin
        tempArray_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        tempArray_we0 = 1'b1;
    end else begin
        tempArray_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        tempArray_we1 = 1'b1;
    end else begin
        tempArray_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_i_fu_430_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter16 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter16 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond_i_fu_430_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (tmp_1_fu_669_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_703_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_703_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign colorBlue_1_fu_675_p1 = p_color_array_q0[7:0];

assign colorBlue_cast_fu_699_p1 = colorBlue_1_fu_675_p1;

assign colorBlue_fu_447_p1 = p_color_array_q0[7:0];

assign colorBlue_i_cast_fu_475_p1 = colorBlue_reg_1101;

assign colorGreen_cast_fu_695_p1 = grp_fu_372_p4;

assign colorGreen_i_cast_fu_472_p1 = colorGreen_reg_1106;

assign colorRed_cast_cast_fu_687_p3 = ((tmp_22_fu_679_p3[0:0] === 1'b1) ? 9'd255 : 9'd0);

assign colorRed_i_cast_cast_fu_459_p3 = ((tmp_11_fu_451_p3[0:0] === 1'b1) ? 9'd255 : 9'd0);

assign distance_0_minimumDi_fu_623_p3 = ((tmp_i7_fu_609_p2[0:0] === 1'b1) ? minimumDistance_fu_606_p1 : minimumDistance_i_reg_323);

assign exitcond_fu_703_p2 = ((i1_reg_335 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_i_fu_430_p2 = ((ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_372_p4 = {{p_color_array_q0[15:8]}};

assign i_0_minimumDistanceI_fu_615_p3 = ((tmp_i7_fu_609_p2[0:0] === 1'b1) ? minimumDistanceIndex_1_fu_602_p1 : centerColor_reg_299);

assign i_1_fu_436_p2 = (ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4 + 3'd1);

assign i_fu_709_p2 = (i1_reg_335 + 4'd1);

assign idx_urem_fu_727_p3 = ((tmp_25_fu_721_p2[0:0] === 1'b1) ? next_urem_fu_715_p2 : 4'd0);

assign minimumDistanceIndex_1_fu_602_p1 = ap_reg_pp0_iter16_minimumDistanceIndex_reg_311;

assign minimumDistance_fu_606_p1 = tmp_15_reg_1132;

assign mul_fu_753_p1 = mul_fu_753_p10;

assign mul_fu_753_p10 = tmp_31_fu_745_p1;

assign mul_fu_753_p2 = (8'd11 * mul_fu_753_p1);

assign next_urem_fu_715_p2 = (4'd1 + phi_urem_reg_346);

assign number_assign_1_cast_fu_806_p1 = $signed(number_assign_1_fu_801_p2);

assign number_assign_1_fu_801_p2 = (pixelGreen_cast_fu_793_p1 - colorGreen_cast_reg_1191);

assign number_assign_2_fu_816_p2 = (pixelBlue_cast_fu_797_p1 - colorBlue_cast_reg_1196);

assign number_assign_3_fu_467_p2 = (pixelRed_i_cast_reg_1072 - colorRed_i_cast_cast_fu_459_p3);

assign number_assign_3_i_ca_fu_483_p1 = $signed(number_assign_4_fu_478_p2);

assign number_assign_4_fu_478_p2 = (pixelGreen_i_cast_reg_1077 - colorGreen_i_cast_fu_472_p1);

assign number_assign_5_fu_493_p2 = (pixelBlue_i_cast_reg_1082 - colorBlue_i_cast_fu_475_p1);

assign number_assign_cast_c_fu_843_p1 = $signed(number_assign_fu_838_p2);

assign number_assign_fu_838_p2 = (pixelRed_cast_fu_835_p1 - colorRed_cast_cast_reg_1186);

assign number_assign_i_cast_fu_512_p1 = $signed(ap_reg_pp0_iter2_number_assign_3_reg_1111);

assign p_Val2_1_cast_fu_872_p1 = $signed(tmp_23_fu_865_p3);

assign p_Val2_1_fu_898_p2 = ($signed(p_shl_i_cast_fu_883_p1) - $signed(p_shl9_i_cast_fu_894_p1));

assign p_Val2_2_cast_cast_fu_904_p1 = $signed(p_Val2_1_fu_898_p2);

assign p_Val2_3_cast_fu_529_p1 = $signed(tmp_10_fu_521_p3);

assign p_Val2_4_cast_fu_540_p1 = $signed(tmp_13_fu_533_p3);

assign p_Val2_5_i6_cast_c_fu_572_p1 = $signed(p_Val2_s_fu_566_p2);

assign p_Val2_cast_fu_861_p1 = $signed(tmp_20_fu_853_p3);

assign p_Val2_s_fu_566_p2 = ($signed(p_shl_i_i_cast_fu_551_p1) - $signed(p_shl9_i_i_cast_fu_562_p1));

assign p_demorgan_fu_1030_p2 = (tmp_46_fu_1024_p2 & tmp_45_fu_1018_p2);

assign p_shl9_i_cast_fu_894_p1 = $signed(p_shl9_i_fu_887_p3);

assign p_shl9_i_fu_887_p3 = {{tmp_30_reg_1241}, {8'd0}};

assign p_shl9_i_i_cast_fu_562_p1 = $signed(p_shl9_i_i_fu_555_p3);

assign p_shl9_i_i_fu_555_p3 = {{tmp_19_reg_1121}, {8'd0}};

assign p_shl_i_cast_fu_883_p1 = $signed(p_shl_i_fu_876_p3);

assign p_shl_i_fu_876_p3 = {{tmp_30_reg_1241}, {10'd0}};

assign p_shl_i_i_cast_fu_551_p1 = $signed(p_shl_i_i_fu_544_p3);

assign p_shl_i_i_fu_544_p3 = {{tmp_19_reg_1121}, {10'd0}};

assign pixelArray_address1 = ap_reg_pp1_iter15_pixelArray_addr_3_reg_1220;

assign pixelArray_d1 = (tmp_49_fu_1048_p2 | tmp_48_fu_1042_p2);

assign pixelBlue_1_fu_769_p1 = tempArray_q0[7:0];

assign pixelBlue_cast_fu_797_p1 = pixelBlue_1_fu_769_p1;

assign pixelBlue_fu_388_p4 = {{pixelArray_q0[39:32]}};

assign pixelBlue_i_cast_fu_426_p1 = pixelBlue_fu_388_p4;

assign pixelGreen_1_fu_783_p4 = {{tempArray_q0[15:8]}};

assign pixelGreen_cast_fu_793_p1 = pixelGreen_1_fu_783_p4;

assign pixelGreen_fu_412_p4 = {{pixelArray_q0[47:40]}};

assign pixelGreen_i_cast_fu_422_p1 = pixelGreen_fu_412_p4;

assign pixelRed_cast_fu_835_p1 = pixelRed_1_reg_1231;

assign pixelRed_fu_398_p4 = {{pixelArray_q0[55:48]}};

assign pixelRed_i_cast_fu_408_p1 = pixelRed_fu_398_p4;

assign powerSummation_V_1_fu_586_p2 = ($signed(p_Val2_3_cast_fu_529_p1) + $signed(tmp8_cast_fu_582_p1));

assign powerSummation_V_fu_918_p2 = ($signed(p_Val2_cast_fu_861_p1) + $signed(tmp9_cast_fu_914_p1));

assign result_1_fu_810_p0 = number_assign_1_cast_fu_806_p1;

assign result_1_fu_810_p1 = number_assign_1_cast_fu_806_p1;

assign result_1_fu_810_p2 = ($signed(result_1_fu_810_p0) * $signed(result_1_fu_810_p1));

assign result_2_fu_515_p0 = number_assign_i_cast_fu_512_p1;

assign result_2_fu_515_p1 = number_assign_i_cast_fu_512_p1;

assign result_2_fu_515_p2 = ($signed(result_2_fu_515_p0) * $signed(result_2_fu_515_p1));

assign result_3_fu_487_p0 = number_assign_3_i_ca_fu_483_p1;

assign result_3_fu_487_p1 = number_assign_3_i_ca_fu_483_p1;

assign result_3_fu_487_p2 = ($signed(result_3_fu_487_p0) * $signed(result_3_fu_487_p1));

assign result_fu_847_p0 = number_assign_cast_c_fu_843_p1;

assign result_fu_847_p1 = number_assign_cast_c_fu_843_p1;

assign result_fu_847_p2 = ($signed(result_fu_847_p0) * $signed(result_fu_847_p1));

assign selectedColorArray_address0 = tmp_fu_664_p1;

assign tmp8_cast_fu_582_p1 = $signed(tmp8_fu_576_p2);

assign tmp8_fu_576_p2 = ($signed(p_Val2_5_i6_cast_c_fu_572_p1) + $signed(p_Val2_4_cast_fu_540_p1));

assign tmp9_cast_fu_914_p1 = $signed(tmp9_fu_908_p2);

assign tmp9_fu_908_p2 = ($signed(p_Val2_2_cast_cast_fu_904_p1) + $signed(p_Val2_1_cast_fu_872_p1));

assign tmp_10_fu_521_p3 = {{result_2_fu_515_p2}, {9'd0}};

assign tmp_11_fu_451_p3 = p_color_array_q0[32'd16];

assign tmp_13_fu_533_p3 = {{result_3_reg_1116}, {10'd0}};

assign tmp_16_fu_924_p3 = {{ap_reg_pp1_iter14_tmp_24_reg_1226}, {5'd0}};

assign tmp_17_fu_931_p2 = (tmp_16_fu_924_p3 | 7'd31);

assign tmp_19_fu_506_p0 = number_assign_5_fu_493_p2;

assign tmp_19_fu_506_p1 = number_assign_5_fu_493_p2;

assign tmp_19_fu_506_p2 = ($signed(tmp_19_fu_506_p0) * $signed(tmp_19_fu_506_p1));

assign tmp_1_fu_669_p2 = ((selectedColorArray_q0 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_20_fu_853_p3 = {{result_fu_847_p2}, {9'd0}};

assign tmp_21_fu_949_p4 = {{result_V_reg_1252[19:8]}};

assign tmp_22_fu_679_p3 = p_color_array_q0[32'd16];

assign tmp_23_fu_865_p3 = {{result_1_reg_1236}, {10'd0}};

assign tmp_25_fu_721_p2 = ((next_urem_fu_715_p2 < 4'd3) ? 1'b1 : 1'b0);

assign tmp_30_fu_829_p0 = number_assign_2_fu_816_p2;

assign tmp_30_fu_829_p1 = number_assign_2_fu_816_p2;

assign tmp_30_fu_829_p2 = ($signed(tmp_30_fu_829_p0) * $signed(tmp_30_fu_829_p1));

assign tmp_31_fu_745_p1 = i1_reg_335[2:0];

assign tmp_32_fu_937_p2 = ((tmp_16_fu_924_p3 > tmp_17_fu_931_p2) ? 1'b1 : 1'b0);

assign tmp_33_fu_958_p1 = tmp_21_fu_949_p4;

assign tmp_34_fu_943_p2 = ($signed(7'd95) - $signed(tmp_16_fu_924_p3));

assign tmp_35_fu_962_p3 = ((tmp_32_reg_1270[0:0] === 1'b1) ? tmp_16_reg_1257 : tmp_17_reg_1264);

assign tmp_36_fu_967_p3 = ((tmp_32_reg_1270[0:0] === 1'b1) ? tmp_17_reg_1264 : tmp_16_reg_1257);

assign tmp_37_fu_972_p3 = ((tmp_32_reg_1270[0:0] === 1'b1) ? tmp_34_reg_1278 : tmp_16_reg_1257);

assign tmp_38_fu_977_p2 = ($signed(7'd95) - $signed(tmp_35_fu_962_p3));

assign tmp_39_fu_983_p1 = tmp_37_fu_972_p3;

assign tmp_3_fu_644_p1 = pixelArray_q0[31:0];

assign tmp_40_fu_987_p1 = tmp_36_fu_967_p3;

assign tmp_41_fu_991_p1 = tmp_38_fu_977_p2;

assign tmp_42_fu_995_p2 = tmp_33_fu_958_p1 << tmp_39_fu_983_p1;

integer ap_tvar_int_0;

always @ (tmp_42_fu_995_p2) begin
    for (ap_tvar_int_0 = 96 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 95 - 0) begin
            tmp_43_fu_1001_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_43_fu_1001_p4[ap_tvar_int_0] = tmp_42_fu_995_p2[95 - ap_tvar_int_0];
        end
    end
end

assign tmp_44_fu_1011_p3 = ((tmp_32_reg_1270[0:0] === 1'b1) ? tmp_43_fu_1001_p4 : tmp_42_fu_995_p2);

assign tmp_45_fu_1018_p2 = 96'd79228162514264337593543950335 << tmp_40_fu_987_p1;

assign tmp_46_fu_1024_p2 = 96'd79228162514264337593543950335 >> tmp_41_fu_991_p1;

assign tmp_47_fu_1036_p2 = (p_demorgan_fu_1030_p2 ^ 96'd79228162514264337593543950335);

assign tmp_48_fu_1042_p2 = (tmp_47_fu_1036_p2 & pixelArray_q0);

assign tmp_49_fu_1048_p2 = (tmp_44_fu_1011_p3 & p_demorgan_fu_1030_p2);

assign tmp_4_fu_631_p1 = pixelArray_load_reg_1066[31:0];

assign tmp_5_fu_659_p1 = pixelArray_q0[31:0];

assign tmp_8_fu_735_p1 = i1_reg_335;

assign tmp_fu_664_p1 = $signed(centerColor_reg_299);

assign tmp_i5_fu_442_p1 = ap_phi_mux_minimumDistanceIndex_phi_fu_315_p4;

assign tmp_i7_fu_609_p2 = (($signed(minimumDistance_fu_606_p1) < $signed(minimumDistance_i_reg_323)) ? 1'b1 : 1'b0);

assign tmp_s_fu_740_p1 = phi_urem_reg_346;

always @ (posedge ap_clk) begin
    pixelRed_i_cast_reg_1072[8] <= 1'b0;
    pixelGreen_i_cast_reg_1077[8] <= 1'b0;
    pixelBlue_i_cast_reg_1082[8] <= 1'b0;
    powerSummation_V_1_reg_1127[7:0] <= 8'b00000000;
    colorRed_cast_cast_reg_1186[8] <= 1'b0;
    colorGreen_cast_reg_1191[8] <= 1'b0;
    colorBlue_cast_reg_1196[8] <= 1'b0;
    powerSummation_V_reg_1247[7:0] <= 8'b00000000;
    tmp_16_reg_1257[4:0] <= 5'b00000;
    tmp_17_reg_1264[4:0] <= 5'b11111;
    tmp_34_reg_1278[4:0] <= 5'b11111;
end

endmodule //parseColorsToCenterPixel
