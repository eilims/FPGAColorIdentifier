// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getColorDistance_Str (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pixel_V_TVALID,
        ap_ce,
        pixel_V_TDATA,
        pixel_V_TREADY,
        color_V,
        ap_return,
        pixel_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   pixel_V_TVALID;
input   ap_ce;
input  [23:0] pixel_V_TDATA;
output   pixel_V_TREADY;
input  [16:0] color_V;
output  [11:0] ap_return;
output   pixel_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg pixel_V_TREADY;
reg pixel_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
wire   [8:0] r_V_fu_151_p2;
reg   [8:0] r_V_reg_498;
wire   [8:0] r_V_1_fu_165_p2;
reg  signed [8:0] r_V_1_reg_503;
wire   [13:0] tmp1_fu_175_p2;
reg  signed [13:0] tmp1_reg_508;
wire   [8:0] r_V_2_fu_189_p2;
reg   [8:0] r_V_2_reg_513;
wire   [17:0] result_fu_198_p2;
reg   [17:0] result_reg_518;
wire   [16:0] tmp_fu_204_p1;
reg   [16:0] tmp_reg_523;
wire   [20:0] tmp_13_fu_214_p1;
reg   [20:0] tmp_13_reg_528;
reg   [0:0] tmp_14_reg_533;
reg   [20:0] tmp_2_reg_538;
wire   [17:0] result_1_fu_236_p2;
reg   [17:0] result_1_reg_543;
wire   [16:0] tmp_18_fu_242_p1;
reg   [16:0] tmp_18_reg_548;
wire   [19:0] tmp_1_fu_314_p3;
reg   [19:0] tmp_1_reg_553;
wire   [20:0] tmp_5_fu_351_p3;
reg   [20:0] tmp_5_reg_558;
wire   [19:0] tmp_16_fu_425_p3;
reg   [19:0] tmp_16_reg_563;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] grp_fxp_sqrt_fu_88_in_val_V_read;
wire   [19:0] grp_fxp_sqrt_fu_88_ap_return;
reg    grp_fxp_sqrt_fu_88_ap_ce;
wire   [7:0] pixelRed_V_fu_93_p4;
wire   [0:0] rhs_V_fu_117_p3;
wire   [8:0] lhs_V_fu_139_p1;
wire   [8:0] rhs_V_cast_fu_143_p3;
wire   [7:0] pixelGreen_V_fu_103_p1;
wire   [7:0] colorGreen_V_fu_125_p1;
wire   [8:0] lhs_V_1_fu_157_p1;
wire   [8:0] rhs_V_1_fu_161_p1;
wire  signed [8:0] tmp1_fu_175_p1;
wire   [7:0] pixelBlue_V_fu_107_p4;
wire   [7:0] colorBlue_V_fu_129_p4;
wire   [8:0] lhs_V_2_fu_181_p1;
wire   [8:0] rhs_V_2_fu_185_p1;
wire  signed [8:0] result_fu_198_p0;
wire  signed [17:0] number_assign_cast_fu_195_p1;
wire  signed [8:0] result_fu_198_p1;
wire  signed [22:0] tmp_3_fu_489_p2;
wire  signed [8:0] result_1_fu_236_p0;
wire  signed [17:0] number_assign_2_cast_fu_233_p1;
wire  signed [8:0] result_1_fu_236_p1;
wire   [18:0] p_shl1_fu_249_p3;
wire  signed [19:0] result_cast6_fu_246_p1;
wire  signed [19:0] p_shl1_cast_fu_256_p1;
wire   [19:0] tmp_s_fu_260_p2;
wire   [19:0] p_neg1_fu_274_p2;
wire   [18:0] tmp_9_fu_280_p4;
wire  signed [19:0] tmp_2_cast_fu_290_p1;
wire   [18:0] tmp_10_fu_300_p4;
wire   [0:0] tmp_8_fu_266_p3;
wire   [19:0] tmp_6_fu_294_p2;
wire  signed [19:0] tmp_8_cast_fu_310_p1;
wire   [20:0] p_neg9_fu_322_p2;
wire   [18:0] tmp_15_fu_327_p4;
wire  signed [19:0] tmp_10_cast_fu_337_p1;
wire   [19:0] tmp_4_fu_341_p2;
wire  signed [20:0] tmp_11_cast_fu_347_p1;
wire   [18:0] p_shl_fu_360_p3;
wire  signed [19:0] p_shl_cast_fu_367_p1;
wire  signed [19:0] result_2_cast3_fu_357_p1;
wire   [19:0] tmp_7_fu_371_p2;
wire   [19:0] p_neg_fu_385_p2;
wire   [18:0] tmp_20_fu_391_p4;
wire  signed [19:0] tmp_14_cast_fu_401_p1;
wire   [18:0] tmp_21_fu_411_p4;
wire   [0:0] tmp_19_fu_377_p3;
wire   [19:0] tmp_11_fu_405_p2;
wire  signed [19:0] tmp_17_cast_fu_421_p1;
wire   [27:0] tmp_12_fu_433_p3;
wire   [28:0] tmp_17_fu_444_p3;
wire   [27:0] tmp_22_fu_455_p3;
wire  signed [31:0] p_Val2_s_fu_440_p1;
wire  signed [31:0] p_Val2_2_fu_462_p1;
wire   [31:0] tmp2_fu_466_p2;
wire  signed [31:0] p_Val2_1_fu_451_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to14;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

fxp_sqrt grp_fxp_sqrt_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val_V_read(grp_fxp_sqrt_fu_88_in_val_V_read),
    .ap_return(grp_fxp_sqrt_fu_88_ap_return),
    .ap_ce(grp_fxp_sqrt_fu_88_ap_ce)
);

getPixelClassificbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 23 ))
getPixelClassificbkb_U2(
    .din0(tmp1_reg_508),
    .din1(r_V_1_reg_503),
    .dout(tmp_3_fu_489_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        r_V_1_reg_503 <= r_V_1_fu_165_p2;
        r_V_2_reg_513 <= r_V_2_fu_189_p2;
        r_V_reg_498 <= r_V_fu_151_p2;
        result_1_reg_543 <= result_1_fu_236_p2;
        result_reg_518 <= result_fu_198_p2;
        tmp1_reg_508 <= tmp1_fu_175_p2;
        tmp_13_reg_528 <= tmp_13_fu_214_p1;
        tmp_14_reg_533 <= tmp_3_fu_489_p2[32'd22];
        tmp_18_reg_548 <= tmp_18_fu_242_p1;
        tmp_2_reg_538 <= {{tmp_3_fu_489_p2[22:2]}};
        tmp_reg_523 <= tmp_fu_204_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        tmp_16_reg_563 <= tmp_16_fu_425_p3;
        tmp_1_reg_553 <= tmp_1_fu_314_p3;
        tmp_5_reg_558 <= tmp_5_fu_351_p3;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_ce)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to14 = 1'b1;
    end else begin
        ap_idle_pp0_0to14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to14 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        grp_fxp_sqrt_fu_88_ap_ce = 1'b1;
    end else begin
        grp_fxp_sqrt_fu_88_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_V_TDATA_blk_n = pixel_V_TVALID;
    end else begin
        pixel_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_ce))) begin
        pixel_V_TREADY = 1'b1;
    end else begin
        pixel_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((pixel_V_TVALID == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b1) & ((pixel_V_TVALID == 1'b0) | (ap_start == 1'b0))));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((pixel_V_TVALID == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{grp_fxp_sqrt_fu_88_ap_return[19:8]}};

assign colorBlue_V_fu_129_p4 = {{color_V[15:8]}};

assign colorGreen_V_fu_125_p1 = color_V[7:0];

assign grp_fxp_sqrt_fu_88_in_val_V_read = ($signed(tmp2_fu_466_p2) + $signed(p_Val2_1_fu_451_p1));

assign lhs_V_1_fu_157_p1 = pixelGreen_V_fu_103_p1;

assign lhs_V_2_fu_181_p1 = pixelBlue_V_fu_107_p4;

assign lhs_V_fu_139_p1 = pixelRed_V_fu_93_p4;

assign number_assign_2_cast_fu_233_p1 = $signed(r_V_2_reg_513);

assign number_assign_cast_fu_195_p1 = $signed(r_V_reg_498);

assign p_Val2_1_fu_451_p1 = $signed(tmp_17_fu_444_p3);

assign p_Val2_2_fu_462_p1 = $signed(tmp_22_fu_455_p3);

assign p_Val2_s_fu_440_p1 = $signed(tmp_12_fu_433_p3);

assign p_neg1_fu_274_p2 = (20'd0 - tmp_s_fu_260_p2);

assign p_neg9_fu_322_p2 = (21'd0 - tmp_13_reg_528);

assign p_neg_fu_385_p2 = (20'd0 - tmp_7_fu_371_p2);

assign p_shl1_cast_fu_256_p1 = $signed(p_shl1_fu_249_p3);

assign p_shl1_fu_249_p3 = {{tmp_reg_523}, {2'd0}};

assign p_shl_cast_fu_367_p1 = $signed(p_shl_fu_360_p3);

assign p_shl_fu_360_p3 = {{tmp_18_reg_548}, {2'd0}};

assign pixelBlue_V_fu_107_p4 = {{pixel_V_TDATA[15:8]}};

assign pixelGreen_V_fu_103_p1 = pixel_V_TDATA[7:0];

assign pixelRed_V_fu_93_p4 = {{pixel_V_TDATA[23:16]}};

assign r_V_1_fu_165_p2 = (lhs_V_1_fu_157_p1 - rhs_V_1_fu_161_p1);

assign r_V_2_fu_189_p2 = (lhs_V_2_fu_181_p1 - rhs_V_2_fu_185_p1);

assign r_V_fu_151_p2 = (lhs_V_fu_139_p1 - rhs_V_cast_fu_143_p3);

assign result_1_fu_236_p0 = number_assign_2_cast_fu_233_p1;

assign result_1_fu_236_p1 = number_assign_2_cast_fu_233_p1;

assign result_1_fu_236_p2 = ($signed(result_1_fu_236_p0) * $signed(result_1_fu_236_p1));

assign result_2_cast3_fu_357_p1 = $signed(result_1_reg_543);

assign result_cast6_fu_246_p1 = $signed(result_reg_518);

assign result_fu_198_p0 = number_assign_cast_fu_195_p1;

assign result_fu_198_p1 = number_assign_cast_fu_195_p1;

assign result_fu_198_p2 = ($signed(result_fu_198_p0) * $signed(result_fu_198_p1));

assign rhs_V_1_fu_161_p1 = colorGreen_V_fu_125_p1;

assign rhs_V_2_fu_185_p1 = colorBlue_V_fu_129_p4;

assign rhs_V_cast_fu_143_p3 = ((rhs_V_fu_117_p3[0:0] === 1'b1) ? 9'd255 : 9'd0);

assign rhs_V_fu_117_p3 = color_V[32'd16];

assign tmp1_fu_175_p1 = r_V_1_fu_165_p2;

assign tmp1_fu_175_p2 = ($signed({{1'b0}, {14'd11}}) * $signed(tmp1_fu_175_p1));

assign tmp2_fu_466_p2 = ($signed(p_Val2_s_fu_440_p1) + $signed(p_Val2_2_fu_462_p1));

assign tmp_10_cast_fu_337_p1 = $signed(tmp_15_fu_327_p4);

assign tmp_10_fu_300_p4 = {{tmp_s_fu_260_p2[19:1]}};

assign tmp_11_cast_fu_347_p1 = $signed(tmp_4_fu_341_p2);

assign tmp_11_fu_405_p2 = ($signed(20'd0) - $signed(tmp_14_cast_fu_401_p1));

assign tmp_12_fu_433_p3 = {{tmp_1_reg_553}, {8'd0}};

assign tmp_13_fu_214_p1 = tmp_3_fu_489_p2[20:0];

assign tmp_14_cast_fu_401_p1 = $signed(tmp_20_fu_391_p4);

assign tmp_15_fu_327_p4 = {{p_neg9_fu_322_p2[20:2]}};

assign tmp_16_fu_425_p3 = ((tmp_19_fu_377_p3[0:0] === 1'b1) ? tmp_11_fu_405_p2 : tmp_17_cast_fu_421_p1);

assign tmp_17_cast_fu_421_p1 = $signed(tmp_21_fu_411_p4);

assign tmp_17_fu_444_p3 = {{tmp_5_reg_558}, {8'd0}};

assign tmp_18_fu_242_p1 = result_1_fu_236_p2[16:0];

assign tmp_19_fu_377_p3 = tmp_7_fu_371_p2[32'd19];

assign tmp_1_fu_314_p3 = ((tmp_8_fu_266_p3[0:0] === 1'b1) ? tmp_6_fu_294_p2 : tmp_8_cast_fu_310_p1);

assign tmp_20_fu_391_p4 = {{p_neg_fu_385_p2[19:1]}};

assign tmp_21_fu_411_p4 = {{tmp_7_fu_371_p2[19:1]}};

assign tmp_22_fu_455_p3 = {{tmp_16_reg_563}, {8'd0}};

assign tmp_2_cast_fu_290_p1 = $signed(tmp_9_fu_280_p4);

assign tmp_4_fu_341_p2 = ($signed(20'd0) - $signed(tmp_10_cast_fu_337_p1));

assign tmp_5_fu_351_p3 = ((tmp_14_reg_533[0:0] === 1'b1) ? tmp_11_cast_fu_347_p1 : tmp_2_reg_538);

assign tmp_6_fu_294_p2 = ($signed(20'd0) - $signed(tmp_2_cast_fu_290_p1));

assign tmp_7_fu_371_p2 = ($signed(p_shl_cast_fu_367_p1) - $signed(result_2_cast3_fu_357_p1));

assign tmp_8_cast_fu_310_p1 = $signed(tmp_10_fu_300_p4);

assign tmp_8_fu_266_p3 = tmp_s_fu_260_p2[32'd19];

assign tmp_9_fu_280_p4 = {{p_neg1_fu_274_p2[19:1]}};

assign tmp_fu_204_p1 = result_fu_198_p2[16:0];

assign tmp_s_fu_260_p2 = ($signed(result_cast6_fu_246_p1) + $signed(p_shl1_cast_fu_256_p1));

endmodule //getColorDistance_Str
