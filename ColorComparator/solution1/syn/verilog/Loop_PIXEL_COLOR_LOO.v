// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_PIXEL_COLOR_LOO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        pixel,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state19 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] pixel;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] p_color_array_address0;
reg    p_color_array_ce0;
wire   [16:0] p_color_array_q0;
reg   [31:0] minimumDistanceIndex_1_reg_90;
reg   [2:0] minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter1_minimumDistanceIndex_reg_102;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] ap_reg_pp0_iter2_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter3_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter4_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter5_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter6_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter7_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter8_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter9_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter10_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter11_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter12_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter13_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter14_minimumDistanceIndex_reg_102;
reg   [2:0] ap_reg_pp0_iter15_minimumDistanceIndex_reg_102;
reg   [31:0] minimumDistance_0_i_s_reg_114;
wire   [8:0] pixelRed_cast_i_fu_141_p1;
reg   [8:0] pixelRed_cast_i_reg_379;
reg    ap_block_state1;
wire   [8:0] pixelGreen_cast_i_fu_155_p1;
reg   [8:0] pixelGreen_cast_i_reg_384;
wire   [8:0] pixelBlue_cast_i_fu_163_p1;
reg   [8:0] pixelBlue_cast_i_reg_389;
wire   [0:0] exitcond_i_i_fu_167_p2;
reg   [0:0] exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter4_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter5_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter6_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter7_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter8_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter9_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter10_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter11_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter12_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter13_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter14_exitcond_i_i_reg_394;
reg   [0:0] ap_reg_pp0_iter15_exitcond_i_i_reg_394;
wire   [2:0] i_fu_173_p2;
reg   [2:0] i_reg_398;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] colorGreen_reg_408;
wire   [7:0] colorBlue_fu_210_p1;
reg   [7:0] colorBlue_reg_413;
wire   [8:0] number_assign_fu_214_p2;
reg   [8:0] number_assign_reg_418;
wire   [16:0] tmp_79_fu_286_p2;
reg   [16:0] tmp_79_reg_423;
wire   [27:0] p_Val2_5_i_fu_292_p2;
reg   [27:0] p_Val2_5_i_reg_429;
reg   [11:0] tmp_2_reg_439;
wire   [31:0] i_0_minimumDistanceI_fu_363_p3;
reg    ap_enable_reg_pp0_iter16;
wire   [31:0] distance_0_minimumDi_fu_371_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire   [28:0] grp_fxp_sqrt_fu_126_in_val_V_read;
wire   [19:0] grp_fxp_sqrt_fu_126_ap_return;
reg   [2:0] ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_i_fu_179_p1;
wire   [7:0] pixelRed_fu_131_p4;
wire   [7:0] pixelGreen_fu_145_p4;
wire   [7:0] pixelBlue_fu_159_p1;
wire   [0:0] tmp_75_fu_184_p3;
wire   [8:0] colorRed_cast_i_cast_fu_192_p3;
wire  signed [8:0] result3_i_fu_228_p0;
wire  signed [16:0] tmp_s_fu_225_p1;
wire  signed [8:0] result3_i_fu_228_p1;
wire   [16:0] result3_i_fu_228_p2;
wire   [25:0] p_Val2_s_fu_234_p3;
wire   [8:0] colorGreen_cast_i_fu_219_p1;
wire   [8:0] number_assign_1_fu_246_p2;
wire  signed [8:0] result_11_i_fu_255_p0;
wire  signed [16:0] tmp_1_fu_251_p1;
wire  signed [8:0] result_11_i_fu_255_p1;
wire   [16:0] result_11_i_fu_255_p2;
wire   [26:0] p_Val2_1_fu_261_p3;
wire   [8:0] colorBlue_cast_i_fu_222_p1;
wire   [8:0] number_assign_2_fu_273_p2;
wire  signed [8:0] tmp_79_fu_286_p0;
wire  signed [8:0] tmp_79_fu_286_p1;
wire  signed [27:0] p_Val2_cast_i_fu_242_p1;
wire  signed [27:0] p_Val2_1_cast_i_fu_269_p1;
wire   [26:0] p_shl_i_fu_298_p3;
wire   [24:0] p_shl9_i_fu_309_p3;
wire  signed [27:0] p_shl_cast_i_fu_305_p1;
wire  signed [27:0] p_shl9_cast_i_fu_316_p1;
wire   [27:0] p_Val2_2_fu_320_p2;
wire  signed [28:0] p_Val2_2_cast_i_fu_326_p1;
wire  signed [28:0] p_Val2_5_cast_i_fu_330_p1;
wire   [31:0] minimumDistance_fu_354_p1;
wire   [0:0] tmp_1_i_fu_357_p2;
wire   [31:0] minimumDistanceIndex_2_fu_350_p1;
wire    ap_CS_fsm_state19;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
end

Loop_PIXEL_COLOR_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
p_color_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_color_array_address0),
    .ce0(p_color_array_ce0),
    .q0(p_color_array_q0)
);

fxp_sqrt grp_fxp_sqrt_fu_126(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val_V_read(grp_fxp_sqrt_fu_126_in_val_V_read),
    .ap_return(grp_fxp_sqrt_fu_126_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_reg_pp0_iter15_exitcond_i_i_reg_394 == 1'd0))) begin
        minimumDistanceIndex_1_reg_90 <= i_0_minimumDistanceI_fu_363_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        minimumDistanceIndex_1_reg_90 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_reg_394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        minimumDistanceIndex_reg_102 <= i_reg_398;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        minimumDistanceIndex_reg_102 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (ap_reg_pp0_iter15_exitcond_i_i_reg_394 == 1'd0))) begin
        minimumDistance_0_i_s_reg_114 <= distance_0_minimumDi_fu_371_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        minimumDistance_0_i_s_reg_114 <= 32'd2147483647;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_i_i_reg_394 <= ap_reg_pp0_iter9_exitcond_i_i_reg_394;
        ap_reg_pp0_iter10_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter9_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter11_exitcond_i_i_reg_394 <= ap_reg_pp0_iter10_exitcond_i_i_reg_394;
        ap_reg_pp0_iter11_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter10_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter12_exitcond_i_i_reg_394 <= ap_reg_pp0_iter11_exitcond_i_i_reg_394;
        ap_reg_pp0_iter12_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter11_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter13_exitcond_i_i_reg_394 <= ap_reg_pp0_iter12_exitcond_i_i_reg_394;
        ap_reg_pp0_iter13_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter12_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter14_exitcond_i_i_reg_394 <= ap_reg_pp0_iter13_exitcond_i_i_reg_394;
        ap_reg_pp0_iter14_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter13_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter15_exitcond_i_i_reg_394 <= ap_reg_pp0_iter14_exitcond_i_i_reg_394;
        ap_reg_pp0_iter15_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter14_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter2_exitcond_i_i_reg_394 <= ap_reg_pp0_iter1_exitcond_i_i_reg_394;
        ap_reg_pp0_iter2_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter1_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter3_exitcond_i_i_reg_394 <= ap_reg_pp0_iter2_exitcond_i_i_reg_394;
        ap_reg_pp0_iter3_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter2_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter4_exitcond_i_i_reg_394 <= ap_reg_pp0_iter3_exitcond_i_i_reg_394;
        ap_reg_pp0_iter4_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter3_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter5_exitcond_i_i_reg_394 <= ap_reg_pp0_iter4_exitcond_i_i_reg_394;
        ap_reg_pp0_iter5_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter4_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter6_exitcond_i_i_reg_394 <= ap_reg_pp0_iter5_exitcond_i_i_reg_394;
        ap_reg_pp0_iter6_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter5_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter7_exitcond_i_i_reg_394 <= ap_reg_pp0_iter6_exitcond_i_i_reg_394;
        ap_reg_pp0_iter7_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter6_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter8_exitcond_i_i_reg_394 <= ap_reg_pp0_iter7_exitcond_i_i_reg_394;
        ap_reg_pp0_iter8_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter7_minimumDistanceIndex_reg_102;
        ap_reg_pp0_iter9_exitcond_i_i_reg_394 <= ap_reg_pp0_iter8_exitcond_i_i_reg_394;
        ap_reg_pp0_iter9_minimumDistanceIndex_reg_102 <= ap_reg_pp0_iter8_minimumDistanceIndex_reg_102;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_reg_394 <= exitcond_i_i_reg_394;
        ap_reg_pp0_iter1_minimumDistanceIndex_reg_102 <= minimumDistanceIndex_reg_102;
        exitcond_i_i_reg_394 <= exitcond_i_i_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_i_reg_394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        colorBlue_reg_413 <= colorBlue_fu_210_p1;
        colorGreen_reg_408 <= {{p_color_array_q0[15:8]}};
        number_assign_reg_418 <= number_assign_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_398 <= i_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_i_i_reg_394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_5_i_reg_429[27 : 9] <= p_Val2_5_i_fu_292_p2[27 : 9];
        tmp_79_reg_423 <= tmp_79_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pixelBlue_cast_i_reg_389[7 : 0] <= pixelBlue_cast_i_fu_163_p1[7 : 0];
        pixelGreen_cast_i_reg_384[7 : 0] <= pixelGreen_cast_i_fu_155_p1[7 : 0];
        pixelRed_cast_i_reg_379[7 : 0] <= pixelRed_cast_i_fu_141_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter14_exitcond_i_i_reg_394 == 1'd0))) begin
        tmp_2_reg_439 <= {{grp_fxp_sqrt_fu_126_ap_return[19:8]}};
    end
end

always @ (*) begin
    if ((exitcond_i_i_fu_167_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_i_reg_394 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4 = i_reg_398;
    end else begin
        ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4 = minimumDistanceIndex_reg_102;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_color_array_ce0 = 1'b1;
    end else begin
        p_color_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_i_i_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter16 == 1'b1) & (ap_enable_reg_pp0_iter15 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_i_i_fu_167_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = minimumDistanceIndex_1_reg_90;

assign colorBlue_cast_i_fu_222_p1 = colorBlue_reg_413;

assign colorBlue_fu_210_p1 = p_color_array_q0[7:0];

assign colorGreen_cast_i_fu_219_p1 = colorGreen_reg_408;

assign colorRed_cast_i_cast_fu_192_p3 = ((tmp_75_fu_184_p3[0:0] === 1'b1) ? 9'd255 : 9'd0);

assign distance_0_minimumDi_fu_371_p3 = ((tmp_1_i_fu_357_p2[0:0] === 1'b1) ? minimumDistance_fu_354_p1 : minimumDistance_0_i_s_reg_114);

assign exitcond_i_i_fu_167_p2 = ((ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fxp_sqrt_fu_126_in_val_V_read = ($signed(p_Val2_2_cast_i_fu_326_p1) + $signed(p_Val2_5_cast_i_fu_330_p1));

assign i_0_minimumDistanceI_fu_363_p3 = ((tmp_1_i_fu_357_p2[0:0] === 1'b1) ? minimumDistanceIndex_2_fu_350_p1 : minimumDistanceIndex_1_reg_90);

assign i_fu_173_p2 = (ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4 + 3'd1);

assign minimumDistanceIndex_2_fu_350_p1 = ap_reg_pp0_iter15_minimumDistanceIndex_reg_102;

assign minimumDistance_fu_354_p1 = tmp_2_reg_439;

assign number_assign_1_fu_246_p2 = (pixelGreen_cast_i_reg_384 - colorGreen_cast_i_fu_219_p1);

assign number_assign_2_fu_273_p2 = (pixelBlue_cast_i_reg_389 - colorBlue_cast_i_fu_222_p1);

assign number_assign_fu_214_p2 = (pixelRed_cast_i_reg_379 - colorRed_cast_i_cast_fu_192_p3);

assign p_Val2_1_cast_i_fu_269_p1 = $signed(p_Val2_1_fu_261_p3);

assign p_Val2_1_fu_261_p3 = {{result_11_i_fu_255_p2}, {10'd0}};

assign p_Val2_2_cast_i_fu_326_p1 = $signed(p_Val2_2_fu_320_p2);

assign p_Val2_2_fu_320_p2 = ($signed(p_shl_cast_i_fu_305_p1) - $signed(p_shl9_cast_i_fu_316_p1));

assign p_Val2_5_cast_i_fu_330_p1 = $signed(p_Val2_5_i_reg_429);

assign p_Val2_5_i_fu_292_p2 = ($signed(p_Val2_cast_i_fu_242_p1) + $signed(p_Val2_1_cast_i_fu_269_p1));

assign p_Val2_cast_i_fu_242_p1 = $signed(p_Val2_s_fu_234_p3);

assign p_Val2_s_fu_234_p3 = {{result3_i_fu_228_p2}, {9'd0}};

assign p_color_array_address0 = tmp_i_fu_179_p1;

assign p_shl9_cast_i_fu_316_p1 = $signed(p_shl9_i_fu_309_p3);

assign p_shl9_i_fu_309_p3 = {{tmp_79_reg_423}, {8'd0}};

assign p_shl_cast_i_fu_305_p1 = $signed(p_shl_i_fu_298_p3);

assign p_shl_i_fu_298_p3 = {{tmp_79_reg_423}, {10'd0}};

assign pixelBlue_cast_i_fu_163_p1 = pixelBlue_fu_159_p1;

assign pixelBlue_fu_159_p1 = pixel[7:0];

assign pixelGreen_cast_i_fu_155_p1 = pixelGreen_fu_145_p4;

assign pixelGreen_fu_145_p4 = {{pixel[15:8]}};

assign pixelRed_cast_i_fu_141_p1 = pixelRed_fu_131_p4;

assign pixelRed_fu_131_p4 = {{pixel[23:16]}};

assign result3_i_fu_228_p0 = tmp_s_fu_225_p1;

assign result3_i_fu_228_p1 = tmp_s_fu_225_p1;

assign result3_i_fu_228_p2 = ($signed(result3_i_fu_228_p0) * $signed(result3_i_fu_228_p1));

assign result_11_i_fu_255_p0 = tmp_1_fu_251_p1;

assign result_11_i_fu_255_p1 = tmp_1_fu_251_p1;

assign result_11_i_fu_255_p2 = ($signed(result_11_i_fu_255_p0) * $signed(result_11_i_fu_255_p1));

assign tmp_1_fu_251_p1 = $signed(number_assign_1_fu_246_p2);

assign tmp_1_i_fu_357_p2 = (($signed(minimumDistance_fu_354_p1) < $signed(minimumDistance_0_i_s_reg_114)) ? 1'b1 : 1'b0);

assign tmp_75_fu_184_p3 = p_color_array_q0[32'd16];

assign tmp_79_fu_286_p0 = number_assign_2_fu_273_p2;

assign tmp_79_fu_286_p1 = number_assign_2_fu_273_p2;

assign tmp_79_fu_286_p2 = ($signed(tmp_79_fu_286_p0) * $signed(tmp_79_fu_286_p1));

assign tmp_i_fu_179_p1 = ap_phi_mux_minimumDistanceIndex_phi_fu_106_p4;

assign tmp_s_fu_225_p1 = $signed(number_assign_reg_418);

always @ (posedge ap_clk) begin
    pixelRed_cast_i_reg_379[8] <= 1'b0;
    pixelGreen_cast_i_reg_384[8] <= 1'b0;
    pixelBlue_cast_i_reg_389[8] <= 1'b0;
    p_Val2_5_i_reg_429[8:0] <= 9'b000000000;
end

endmodule //Loop_PIXEL_COLOR_LOO
