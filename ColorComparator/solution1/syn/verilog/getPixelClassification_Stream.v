// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getPixelClassification_Stream,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.679625,HLS_SYN_LAT=22,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=2759,HLS_SYN_LUT=13927}" *)

module getPixelClassification_Stream (
        ap_clk,
        ap_rst_n,
        in_pixel_V_TDATA,
        in_pixel_V_TVALID,
        in_pixel_V_TREADY,
        out_pixel_V_TDATA,
        out_pixel_V_TVALID,
        out_pixel_V_TREADY,
        in_switch_V
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input  [23:0] in_pixel_V_TDATA;
input   in_pixel_V_TVALID;
output   in_pixel_V_TREADY;
output  [23:0] out_pixel_V_TDATA;
output   out_pixel_V_TVALID;
input   out_pixel_V_TREADY;
input  [3:0] in_switch_V;

reg    ap_rst_n_inv;
reg   [23:0] in_pixel_V_0_data_out;
wire    in_pixel_V_0_vld_in;
wire    in_pixel_V_0_vld_out;
wire    in_pixel_V_0_ack_in;
reg    in_pixel_V_0_ack_out;
reg   [23:0] in_pixel_V_0_payload_A;
reg   [23:0] in_pixel_V_0_payload_B;
reg    in_pixel_V_0_sel_rd;
reg    in_pixel_V_0_sel_wr;
wire    in_pixel_V_0_sel;
wire    in_pixel_V_0_load_A;
wire    in_pixel_V_0_load_B;
reg   [1:0] in_pixel_V_0_state;
wire    in_pixel_V_0_state_cmp_full;
reg   [23:0] out_pixel_V_1_data_out;
reg    out_pixel_V_1_vld_in;
wire    out_pixel_V_1_vld_out;
wire    out_pixel_V_1_ack_in;
wire    out_pixel_V_1_ack_out;
reg   [23:0] out_pixel_V_1_payload_A;
reg   [23:0] out_pixel_V_1_payload_B;
reg    out_pixel_V_1_sel_rd;
reg    out_pixel_V_1_sel_wr;
wire    out_pixel_V_1_sel;
wire    out_pixel_V_1_load_A;
wire    out_pixel_V_1_load_B;
reg   [1:0] out_pixel_V_1_state;
wire    out_pixel_V_1_state_cmp_full;
wire   [2:0] p_color_array_stream_s_address0;
reg    p_color_array_stream_s_ce0;
wire   [16:0] p_color_array_stream_s_q0;
wire   [2:0] p_color_array_stream_s_address1;
reg    p_color_array_stream_s_ce1;
wire   [16:0] p_color_array_stream_s_q1;
wire   [2:0] p_color_array_stream_s_address2;
reg    p_color_array_stream_s_ce2;
wire   [16:0] p_color_array_stream_s_q2;
wire   [2:0] p_color_array_stream_s_address3;
reg    p_color_array_stream_s_ce3;
wire   [16:0] p_color_array_stream_s_q3;
reg    in_pixel_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] do_init_reg_146;
reg    out_pixel_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter20;
reg   [0:0] exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter19_exitcond_reg_549;
reg    ap_enable_reg_pp0_iter21;
reg   [0:0] ap_reg_pp0_iter20_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter1_do_init_reg_146;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
reg    ap_block_state22_io;
reg    ap_block_state23_pp0_stage0_iter21;
reg    ap_block_state23_io;
reg    ap_block_pp0_stage0_11001;
reg   [1:0] minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter1_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter2_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter3_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter4_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter5_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter6_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter7_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter8_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter9_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter10_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter11_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter12_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter13_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter14_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter15_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter16_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter17_minimumDistanceIndex_9_reg_162;
reg   [1:0] ap_reg_pp0_iter18_minimumDistanceIndex_9_reg_162;
reg   [23:0] in_pixel_V5_rewind_reg_177;
reg   [3:0] in_switch_V6_rewind_reg_191;
reg   [23:0] in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter3_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter4_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter5_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter6_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter7_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter8_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter9_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter10_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter11_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter12_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter13_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter14_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter15_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter16_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter17_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter18_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_reg_pp0_iter19_in_pixel_V5_phi_reg_205;
reg   [3:0] in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter3_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter4_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter5_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter6_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter7_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter8_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter9_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter10_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter11_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter12_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter13_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter14_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter15_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter16_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter17_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter18_in_switch_V6_phi_reg_217;
reg   [3:0] ap_reg_pp0_iter19_in_switch_V6_phi_reg_217;
reg   [31:0] minimumDistance4_reg_229;
reg   [31:0] minimumDistanceIndex_3_reg_243;
reg   [3:0] in_switch_V_read_reg_519;
reg   [0:0] ap_phi_mux_do_init_phi_fu_150_p6;
wire   [2:0] minimumDistanceIndex_fu_278_p1;
reg   [2:0] minimumDistanceIndex_reg_524;
wire   [2:0] i_fu_287_p2;
reg   [2:0] i_reg_534;
reg   [2:0] ap_reg_pp0_iter1_i_reg_534;
reg   [2:0] ap_reg_pp0_iter2_i_reg_534;
reg   [2:0] ap_reg_pp0_iter3_i_reg_534;
reg   [2:0] ap_reg_pp0_iter4_i_reg_534;
reg   [2:0] ap_reg_pp0_iter5_i_reg_534;
reg   [2:0] ap_reg_pp0_iter6_i_reg_534;
reg   [2:0] ap_reg_pp0_iter7_i_reg_534;
reg   [2:0] ap_reg_pp0_iter8_i_reg_534;
reg   [2:0] ap_reg_pp0_iter9_i_reg_534;
reg   [2:0] ap_reg_pp0_iter10_i_reg_534;
reg   [2:0] ap_reg_pp0_iter11_i_reg_534;
reg   [2:0] ap_reg_pp0_iter12_i_reg_534;
reg   [2:0] ap_reg_pp0_iter13_i_reg_534;
reg   [2:0] ap_reg_pp0_iter14_i_reg_534;
reg   [2:0] ap_reg_pp0_iter15_i_reg_534;
reg   [2:0] ap_reg_pp0_iter16_i_reg_534;
reg   [2:0] ap_reg_pp0_iter17_i_reg_534;
reg   [2:0] ap_reg_pp0_iter18_i_reg_534;
wire   [1:0] tmp_5_fu_304_p1;
reg   [1:0] tmp_5_reg_544;
wire   [0:0] exitcond_fu_308_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter2_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter3_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter4_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter5_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter6_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter7_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter8_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter9_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter10_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter11_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter12_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter13_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter14_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter15_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter16_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter17_exitcond_reg_549;
reg   [0:0] ap_reg_pp0_iter18_exitcond_reg_549;
reg   [16:0] p_color_array_stream_1_reg_558;
reg   [16:0] p_color_array_stream_3_reg_563;
wire   [2:0] i_1_fu_314_p2;
reg   [2:0] i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter2_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter3_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter4_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter5_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter6_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter7_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter8_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter9_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter10_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter11_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter12_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter13_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter14_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter15_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter16_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter17_i_1_reg_568;
reg   [2:0] ap_reg_pp0_iter18_i_1_reg_568;
reg   [16:0] p_color_array_stream_5_reg_578;
reg    ap_enable_reg_pp0_iter2;
wire   [11:0] grp_getColorDistance_Str_fu_257_ap_return;
reg   [11:0] minimumDistance_4_reg_583;
wire   [11:0] grp_getColorDistance_Str_fu_264_ap_return;
reg   [11:0] minimumDistance_4_1_reg_589;
wire   [0:0] tmp_2_fu_327_p2;
reg   [0:0] tmp_2_reg_595;
wire   [0:0] tmp_4_fu_333_p2;
reg   [0:0] tmp_4_reg_600;
wire   [0:0] tmp_2_1_fu_357_p2;
reg   [0:0] tmp_2_1_reg_605;
wire   [0:0] tmp_4_1_fu_363_p2;
reg   [0:0] tmp_4_1_reg_610;
wire   [31:0] minimumDistance_2_1_fu_376_p3;
reg   [31:0] minimumDistance_2_1_reg_615;
wire   [11:0] grp_getColorDistance_Str_fu_271_ap_return;
reg   [11:0] minimumDistance_4_2_reg_622;
wire   [31:0] minimumDistanceIndex_8_fu_450_p3;
reg   [31:0] minimumDistanceIndex_8_reg_628;
reg    ap_enable_reg_pp0_iter19;
wire   [31:0] minimumDistance_2_2_fu_458_p3;
wire   [23:0] storemerge1_fu_508_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
wire    ap_CS_fsm_state1;
wire    grp_getColorDistance_Str_fu_257_ap_start;
wire    grp_getColorDistance_Str_fu_257_ap_done;
wire    grp_getColorDistance_Str_fu_257_ap_idle;
wire    grp_getColorDistance_Str_fu_257_ap_ready;
reg    grp_getColorDistance_Str_fu_257_ap_ce;
wire    grp_getColorDistance_Str_fu_257_pixel_V_TREADY;
wire    grp_getColorDistance_Str_fu_257_pixel_V_TDATA_blk_n;
wire    grp_getColorDistance_Str_fu_264_ap_start;
wire    grp_getColorDistance_Str_fu_264_ap_done;
wire    grp_getColorDistance_Str_fu_264_ap_idle;
wire    grp_getColorDistance_Str_fu_264_ap_ready;
reg    grp_getColorDistance_Str_fu_264_ap_ce;
wire    grp_getColorDistance_Str_fu_264_pixel_V_TREADY;
wire    grp_getColorDistance_Str_fu_264_pixel_V_TDATA_blk_n;
wire    grp_getColorDistance_Str_fu_271_ap_start;
wire    grp_getColorDistance_Str_fu_271_ap_done;
wire    grp_getColorDistance_Str_fu_271_ap_idle;
wire    grp_getColorDistance_Str_fu_271_ap_ready;
reg    grp_getColorDistance_Str_fu_271_ap_ce;
wire    grp_getColorDistance_Str_fu_271_pixel_V_TREADY;
wire    grp_getColorDistance_Str_fu_271_pixel_V_TDATA_blk_n;
reg   [1:0] ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6;
reg   [23:0] ap_phi_mux_in_pixel_V5_rewind_phi_fu_181_p6;
reg   [3:0] ap_phi_mux_in_switch_V6_rewind_phi_fu_195_p6;
reg   [23:0] ap_phi_mux_in_pixel_V5_phi_phi_fu_209_p4;
wire   [23:0] ap_phi_reg_pp0_iter0_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_phi_reg_pp0_iter1_in_pixel_V5_phi_reg_205;
reg   [23:0] ap_phi_reg_pp0_iter2_in_pixel_V5_phi_reg_205;
wire   [3:0] ap_phi_reg_pp0_iter0_in_switch_V6_phi_reg_217;
reg   [3:0] ap_phi_reg_pp0_iter1_in_switch_V6_phi_reg_217;
reg   [3:0] ap_phi_reg_pp0_iter2_in_switch_V6_phi_reg_217;
reg   [31:0] ap_phi_mux_minimumDistance4_phi_fu_233_p6;
reg   [31:0] ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6;
reg    ap_reg_grp_getColorDistance_Str_fu_257_ap_start;
reg    ap_reg_grp_getColorDistance_Str_fu_264_ap_start;
reg    ap_reg_grp_getColorDistance_Str_fu_271_ap_start;
wire   [63:0] tmp_s_fu_282_p1;
wire   [63:0] tmp_1_1_fu_293_p1;
wire   [63:0] tmp_1_2_fu_319_p1;
wire  signed [63:0] tmp_6_fu_465_p1;
reg    ap_block_pp0_stage0_01001;
wire   [2:0] i_2_fu_298_p2;
wire   [31:0] minimumDistance_4_ex_fu_324_p1;
wire   [31:0] minimumDistance_1_fu_338_p3;
wire   [31:0] minimumDistance_4_1_s_fu_354_p1;
wire   [31:0] minimumDistance_2_fu_346_p3;
wire   [31:0] minimumDistance_1_1_fu_368_p3;
wire   [31:0] minimumDistanceIndex_4_fu_384_p1;
wire   [31:0] minimumDistanceIndex_1_fu_388_p3;
wire   [31:0] i_cast_fu_402_p1;
wire   [31:0] minimumDistanceIndex_2_fu_395_p3;
wire   [31:0] minimumDistanceIndex_5_fu_405_p3;
wire   [31:0] minimumDistance_4_2_s_fu_422_p1;
wire   [0:0] tmp_4_2_fu_430_p2;
wire   [31:0] i_1_cast_fu_419_p1;
wire   [31:0] minimumDistanceIndex_6_fu_412_p3;
wire   [0:0] tmp_2_2_fu_425_p2;
wire   [31:0] minimumDistanceIndex_7_fu_435_p3;
wire   [31:0] minimumDistance_1_2_fu_443_p3;
wire   [31:0] lhs_V_fu_480_p1;
wire   [31:0] rhs_V_fu_475_p2;
wire   [0:0] tmp_fu_470_p2;
wire   [0:0] tmp_3_fu_484_p2;
wire   [0:0] sel_tmp_fu_494_p2;
wire  signed [23:0] p_color_array_stream_8_fu_490_p1;
wire   [23:0] sel_tmp2_fu_500_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_170;
reg    ap_condition_379;

// power-on initialization
initial begin
#0 in_pixel_V_0_sel_rd = 1'b0;
#0 in_pixel_V_0_sel_wr = 1'b0;
#0 in_pixel_V_0_state = 2'd0;
#0 out_pixel_V_1_sel_rd = 1'b0;
#0 out_pixel_V_1_sel_wr = 1'b0;
#0 out_pixel_V_1_state = 2'd0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_reg_grp_getColorDistance_Str_fu_257_ap_start = 1'b0;
#0 ap_reg_grp_getColorDistance_Str_fu_264_ap_start = 1'b0;
#0 ap_reg_grp_getColorDistance_Str_fu_271_ap_start = 1'b0;
end

getPixelClassificcud #(
    .DataWidth( 17 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
p_color_array_stream_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(p_color_array_stream_s_address0),
    .ce0(p_color_array_stream_s_ce0),
    .q0(p_color_array_stream_s_q0),
    .address1(p_color_array_stream_s_address1),
    .ce1(p_color_array_stream_s_ce1),
    .q1(p_color_array_stream_s_q1),
    .address2(p_color_array_stream_s_address2),
    .ce2(p_color_array_stream_s_ce2),
    .q2(p_color_array_stream_s_q2),
    .address3(p_color_array_stream_s_address3),
    .ce3(p_color_array_stream_s_ce3),
    .q3(p_color_array_stream_s_q3)
);

getColorDistance_Str grp_getColorDistance_Str_fu_257(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_Str_fu_257_ap_start),
    .ap_done(grp_getColorDistance_Str_fu_257_ap_done),
    .ap_idle(grp_getColorDistance_Str_fu_257_ap_idle),
    .ap_ready(grp_getColorDistance_Str_fu_257_ap_ready),
    .pixel_V_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_Str_fu_257_ap_ce),
    .pixel_V_TDATA(ap_phi_mux_in_pixel_V5_phi_phi_fu_209_p4),
    .pixel_V_TREADY(grp_getColorDistance_Str_fu_257_pixel_V_TREADY),
    .color_V(p_color_array_stream_1_reg_558),
    .ap_return(grp_getColorDistance_Str_fu_257_ap_return),
    .pixel_V_TDATA_blk_n(grp_getColorDistance_Str_fu_257_pixel_V_TDATA_blk_n)
);

getColorDistance_Str grp_getColorDistance_Str_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_Str_fu_264_ap_start),
    .ap_done(grp_getColorDistance_Str_fu_264_ap_done),
    .ap_idle(grp_getColorDistance_Str_fu_264_ap_idle),
    .ap_ready(grp_getColorDistance_Str_fu_264_ap_ready),
    .pixel_V_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_Str_fu_264_ap_ce),
    .pixel_V_TDATA(ap_phi_mux_in_pixel_V5_phi_phi_fu_209_p4),
    .pixel_V_TREADY(grp_getColorDistance_Str_fu_264_pixel_V_TREADY),
    .color_V(p_color_array_stream_3_reg_563),
    .ap_return(grp_getColorDistance_Str_fu_264_ap_return),
    .pixel_V_TDATA_blk_n(grp_getColorDistance_Str_fu_264_pixel_V_TDATA_blk_n)
);

getColorDistance_Str grp_getColorDistance_Str_fu_271(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_getColorDistance_Str_fu_271_ap_start),
    .ap_done(grp_getColorDistance_Str_fu_271_ap_done),
    .ap_idle(grp_getColorDistance_Str_fu_271_ap_idle),
    .ap_ready(grp_getColorDistance_Str_fu_271_ap_ready),
    .pixel_V_TVALID(1'b1),
    .ap_ce(grp_getColorDistance_Str_fu_271_ap_ce),
    .pixel_V_TDATA(in_pixel_V5_phi_reg_205),
    .pixel_V_TREADY(grp_getColorDistance_Str_fu_271_pixel_V_TREADY),
    .color_V(p_color_array_stream_5_reg_578),
    .ap_return(grp_getColorDistance_Str_fu_271_ap_return),
    .pixel_V_TDATA_blk_n(grp_getColorDistance_Str_fu_271_pixel_V_TDATA_blk_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_Str_fu_257_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_getColorDistance_Str_fu_257_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_Str_fu_257_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_Str_fu_257_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_Str_fu_264_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_getColorDistance_Str_fu_264_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_Str_fu_264_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_Str_fu_264_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_getColorDistance_Str_fu_271_ap_start <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_reg_grp_getColorDistance_Str_fu_271_ap_start <= 1'b1;
        end else if ((grp_getColorDistance_Str_fu_271_ap_ready == 1'b1)) begin
            ap_reg_grp_getColorDistance_Str_fu_271_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_pixel_V_0_ack_out == 1'b1) & (in_pixel_V_0_vld_out == 1'b1))) begin
            in_pixel_V_0_sel_rd <= ~in_pixel_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_pixel_V_0_ack_in == 1'b1) & (in_pixel_V_0_vld_in == 1'b1))) begin
            in_pixel_V_0_sel_wr <= ~in_pixel_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_pixel_V_0_state <= 2'd0;
    end else begin
        if ((((in_pixel_V_0_vld_in == 1'b0) & (in_pixel_V_0_state == 2'd2)) | ((in_pixel_V_0_vld_in == 1'b0) & (in_pixel_V_0_state == 2'd3) & (in_pixel_V_0_ack_out == 1'b1)))) begin
            in_pixel_V_0_state <= 2'd2;
        end else if ((((in_pixel_V_0_ack_out == 1'b0) & (in_pixel_V_0_state == 2'd1)) | ((in_pixel_V_0_ack_out == 1'b0) & (in_pixel_V_0_state == 2'd3) & (in_pixel_V_0_vld_in == 1'b1)))) begin
            in_pixel_V_0_state <= 2'd1;
        end else if (((~((in_pixel_V_0_vld_in == 1'b0) & (in_pixel_V_0_ack_out == 1'b1)) & ~((in_pixel_V_0_ack_out == 1'b0) & (in_pixel_V_0_vld_in == 1'b1)) & (in_pixel_V_0_state == 2'd3)) | ((in_pixel_V_0_state == 2'd1) & (in_pixel_V_0_ack_out == 1'b1)) | ((in_pixel_V_0_state == 2'd2) & (in_pixel_V_0_vld_in == 1'b1)))) begin
            in_pixel_V_0_state <= 2'd3;
        end else begin
            in_pixel_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_pixel_V_1_ack_out == 1'b1) & (out_pixel_V_1_vld_out == 1'b1))) begin
            out_pixel_V_1_sel_rd <= ~out_pixel_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_pixel_V_1_ack_in == 1'b1) & (out_pixel_V_1_vld_in == 1'b1))) begin
            out_pixel_V_1_sel_wr <= ~out_pixel_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_pixel_V_1_state <= 2'd0;
    end else begin
        if ((((out_pixel_V_1_state == 2'd2) & (out_pixel_V_1_vld_in == 1'b0)) | ((out_pixel_V_1_state == 2'd3) & (out_pixel_V_1_vld_in == 1'b0) & (out_pixel_V_1_ack_out == 1'b1)))) begin
            out_pixel_V_1_state <= 2'd2;
        end else if ((((out_pixel_V_1_state == 2'd3) & (out_pixel_V_1_ack_out == 1'b0) & (out_pixel_V_1_vld_in == 1'b1)) | ((out_pixel_V_1_state == 2'd1) & (out_pixel_V_1_ack_out == 1'b0)))) begin
            out_pixel_V_1_state <= 2'd1;
        end else if ((((out_pixel_V_1_state == 2'd2) & (out_pixel_V_1_vld_in == 1'b1)) | (~((out_pixel_V_1_vld_in == 1'b0) & (out_pixel_V_1_ack_out == 1'b1)) & ~((out_pixel_V_1_ack_out == 1'b0) & (out_pixel_V_1_vld_in == 1'b1)) & (out_pixel_V_1_state == 2'd3)) | ((out_pixel_V_1_state == 2'd1) & (out_pixel_V_1_ack_out == 1'b1)))) begin
            out_pixel_V_1_state <= 2'd3;
        end else begin
            out_pixel_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_379)) begin
        if ((do_init_reg_146 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_in_pixel_V5_phi_reg_205 <= in_pixel_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_in_pixel_V5_phi_reg_205 <= ap_phi_reg_pp0_iter1_in_pixel_V5_phi_reg_205;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_379)) begin
        if ((do_init_reg_146 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_in_switch_V6_phi_reg_217 <= in_switch_V_read_reg_519;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_in_switch_V6_phi_reg_217 <= ap_phi_reg_pp0_iter1_in_switch_V6_phi_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_549 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        do_init_reg_146 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((exitcond_reg_549 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        do_init_reg_146 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_reg_pp0_iter1_do_init_reg_146 == 1'd0)) begin
            in_pixel_V5_phi_reg_205 <= ap_phi_mux_in_pixel_V5_rewind_phi_fu_181_p6;
        end else if ((1'b1 == 1'b1)) begin
            in_pixel_V5_phi_reg_205 <= ap_phi_reg_pp0_iter2_in_pixel_V5_phi_reg_205;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_reg_pp0_iter1_do_init_reg_146 == 1'd0)) begin
            in_switch_V6_phi_reg_217 <= ap_phi_mux_in_switch_V6_rewind_phi_fu_195_p6;
        end else if ((1'b1 == 1'b1)) begin
            in_switch_V6_phi_reg_217 <= ap_phi_reg_pp0_iter2_in_switch_V6_phi_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter18_exitcond_reg_549 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        minimumDistance4_reg_229 <= minimumDistance_2_2_fu_458_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((ap_reg_pp0_iter18_exitcond_reg_549 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1)))) begin
        minimumDistance4_reg_229 <= 32'd2147483647;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        minimumDistanceIndex_3_reg_243 <= minimumDistanceIndex_8_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1)))) begin
        minimumDistanceIndex_3_reg_243 <= 32'd7;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_549 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        minimumDistanceIndex_9_reg_162 <= tmp_5_reg_544;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((exitcond_reg_549 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        minimumDistanceIndex_9_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_in_pixel_V5_phi_reg_205 <= ap_phi_reg_pp0_iter0_in_pixel_V5_phi_reg_205;
        ap_phi_reg_pp0_iter1_in_switch_V6_phi_reg_217 <= ap_phi_reg_pp0_iter0_in_switch_V6_phi_reg_217;
        tmp_5_reg_544 <= tmp_5_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_reg_549 <= ap_reg_pp0_iter9_exitcond_reg_549;
        ap_reg_pp0_iter10_i_1_reg_568 <= ap_reg_pp0_iter9_i_1_reg_568;
        ap_reg_pp0_iter10_i_reg_534 <= ap_reg_pp0_iter9_i_reg_534;
        ap_reg_pp0_iter10_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter9_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter10_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter9_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter10_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter9_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter11_exitcond_reg_549 <= ap_reg_pp0_iter10_exitcond_reg_549;
        ap_reg_pp0_iter11_i_1_reg_568 <= ap_reg_pp0_iter10_i_1_reg_568;
        ap_reg_pp0_iter11_i_reg_534 <= ap_reg_pp0_iter10_i_reg_534;
        ap_reg_pp0_iter11_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter10_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter11_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter10_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter11_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter10_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter12_exitcond_reg_549 <= ap_reg_pp0_iter11_exitcond_reg_549;
        ap_reg_pp0_iter12_i_1_reg_568 <= ap_reg_pp0_iter11_i_1_reg_568;
        ap_reg_pp0_iter12_i_reg_534 <= ap_reg_pp0_iter11_i_reg_534;
        ap_reg_pp0_iter12_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter11_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter12_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter11_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter12_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter11_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter13_exitcond_reg_549 <= ap_reg_pp0_iter12_exitcond_reg_549;
        ap_reg_pp0_iter13_i_1_reg_568 <= ap_reg_pp0_iter12_i_1_reg_568;
        ap_reg_pp0_iter13_i_reg_534 <= ap_reg_pp0_iter12_i_reg_534;
        ap_reg_pp0_iter13_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter12_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter13_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter12_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter13_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter12_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter14_exitcond_reg_549 <= ap_reg_pp0_iter13_exitcond_reg_549;
        ap_reg_pp0_iter14_i_1_reg_568 <= ap_reg_pp0_iter13_i_1_reg_568;
        ap_reg_pp0_iter14_i_reg_534 <= ap_reg_pp0_iter13_i_reg_534;
        ap_reg_pp0_iter14_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter13_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter14_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter13_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter14_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter13_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter15_exitcond_reg_549 <= ap_reg_pp0_iter14_exitcond_reg_549;
        ap_reg_pp0_iter15_i_1_reg_568 <= ap_reg_pp0_iter14_i_1_reg_568;
        ap_reg_pp0_iter15_i_reg_534 <= ap_reg_pp0_iter14_i_reg_534;
        ap_reg_pp0_iter15_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter14_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter15_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter14_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter15_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter14_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter16_exitcond_reg_549 <= ap_reg_pp0_iter15_exitcond_reg_549;
        ap_reg_pp0_iter16_i_1_reg_568 <= ap_reg_pp0_iter15_i_1_reg_568;
        ap_reg_pp0_iter16_i_reg_534 <= ap_reg_pp0_iter15_i_reg_534;
        ap_reg_pp0_iter16_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter15_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter16_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter15_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter16_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter15_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter17_exitcond_reg_549 <= ap_reg_pp0_iter16_exitcond_reg_549;
        ap_reg_pp0_iter17_i_1_reg_568 <= ap_reg_pp0_iter16_i_1_reg_568;
        ap_reg_pp0_iter17_i_reg_534 <= ap_reg_pp0_iter16_i_reg_534;
        ap_reg_pp0_iter17_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter16_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter17_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter16_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter17_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter16_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter18_exitcond_reg_549 <= ap_reg_pp0_iter17_exitcond_reg_549;
        ap_reg_pp0_iter18_i_1_reg_568 <= ap_reg_pp0_iter17_i_1_reg_568;
        ap_reg_pp0_iter18_i_reg_534 <= ap_reg_pp0_iter17_i_reg_534;
        ap_reg_pp0_iter18_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter17_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter18_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter17_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter18_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter17_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter19_exitcond_reg_549 <= ap_reg_pp0_iter18_exitcond_reg_549;
        ap_reg_pp0_iter19_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter18_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter19_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter18_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter20_exitcond_reg_549 <= ap_reg_pp0_iter19_exitcond_reg_549;
        ap_reg_pp0_iter2_exitcond_reg_549 <= ap_reg_pp0_iter1_exitcond_reg_549;
        ap_reg_pp0_iter2_i_1_reg_568 <= i_1_reg_568;
        ap_reg_pp0_iter2_i_reg_534 <= ap_reg_pp0_iter1_i_reg_534;
        ap_reg_pp0_iter2_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter1_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter3_exitcond_reg_549 <= ap_reg_pp0_iter2_exitcond_reg_549;
        ap_reg_pp0_iter3_i_1_reg_568 <= ap_reg_pp0_iter2_i_1_reg_568;
        ap_reg_pp0_iter3_i_reg_534 <= ap_reg_pp0_iter2_i_reg_534;
        ap_reg_pp0_iter3_in_pixel_V5_phi_reg_205 <= in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter3_in_switch_V6_phi_reg_217 <= in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter3_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter2_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter4_exitcond_reg_549 <= ap_reg_pp0_iter3_exitcond_reg_549;
        ap_reg_pp0_iter4_i_1_reg_568 <= ap_reg_pp0_iter3_i_1_reg_568;
        ap_reg_pp0_iter4_i_reg_534 <= ap_reg_pp0_iter3_i_reg_534;
        ap_reg_pp0_iter4_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter3_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter4_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter3_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter4_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter3_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter5_exitcond_reg_549 <= ap_reg_pp0_iter4_exitcond_reg_549;
        ap_reg_pp0_iter5_i_1_reg_568 <= ap_reg_pp0_iter4_i_1_reg_568;
        ap_reg_pp0_iter5_i_reg_534 <= ap_reg_pp0_iter4_i_reg_534;
        ap_reg_pp0_iter5_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter4_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter5_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter4_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter5_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter4_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter6_exitcond_reg_549 <= ap_reg_pp0_iter5_exitcond_reg_549;
        ap_reg_pp0_iter6_i_1_reg_568 <= ap_reg_pp0_iter5_i_1_reg_568;
        ap_reg_pp0_iter6_i_reg_534 <= ap_reg_pp0_iter5_i_reg_534;
        ap_reg_pp0_iter6_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter5_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter6_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter5_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter6_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter5_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter7_exitcond_reg_549 <= ap_reg_pp0_iter6_exitcond_reg_549;
        ap_reg_pp0_iter7_i_1_reg_568 <= ap_reg_pp0_iter6_i_1_reg_568;
        ap_reg_pp0_iter7_i_reg_534 <= ap_reg_pp0_iter6_i_reg_534;
        ap_reg_pp0_iter7_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter6_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter7_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter6_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter7_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter6_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter8_exitcond_reg_549 <= ap_reg_pp0_iter7_exitcond_reg_549;
        ap_reg_pp0_iter8_i_1_reg_568 <= ap_reg_pp0_iter7_i_1_reg_568;
        ap_reg_pp0_iter8_i_reg_534 <= ap_reg_pp0_iter7_i_reg_534;
        ap_reg_pp0_iter8_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter7_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter8_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter7_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter8_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter7_minimumDistanceIndex_9_reg_162;
        ap_reg_pp0_iter9_exitcond_reg_549 <= ap_reg_pp0_iter8_exitcond_reg_549;
        ap_reg_pp0_iter9_i_1_reg_568 <= ap_reg_pp0_iter8_i_1_reg_568;
        ap_reg_pp0_iter9_i_reg_534 <= ap_reg_pp0_iter8_i_reg_534;
        ap_reg_pp0_iter9_in_pixel_V5_phi_reg_205 <= ap_reg_pp0_iter8_in_pixel_V5_phi_reg_205;
        ap_reg_pp0_iter9_in_switch_V6_phi_reg_217 <= ap_reg_pp0_iter8_in_switch_V6_phi_reg_217;
        ap_reg_pp0_iter9_minimumDistanceIndex_9_reg_162 <= ap_reg_pp0_iter8_minimumDistanceIndex_9_reg_162;
        minimumDistance_2_1_reg_615 <= minimumDistance_2_1_fu_376_p3;
        minimumDistance_4_1_reg_589 <= grp_getColorDistance_Str_fu_264_ap_return;
        minimumDistance_4_2_reg_622 <= grp_getColorDistance_Str_fu_271_ap_return;
        minimumDistance_4_reg_583 <= grp_getColorDistance_Str_fu_257_ap_return;
        tmp_2_1_reg_605 <= tmp_2_1_fu_357_p2;
        tmp_2_reg_595 <= tmp_2_fu_327_p2;
        tmp_4_1_reg_610 <= tmp_4_1_fu_363_p2;
        tmp_4_reg_600 <= tmp_4_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_do_init_reg_146 <= do_init_reg_146;
        ap_reg_pp0_iter1_exitcond_reg_549 <= exitcond_reg_549;
        ap_reg_pp0_iter1_i_reg_534 <= i_reg_534;
        ap_reg_pp0_iter1_minimumDistanceIndex_9_reg_162 <= minimumDistanceIndex_9_reg_162;
        exitcond_reg_549 <= exitcond_fu_308_p2;
        i_1_reg_568 <= i_1_fu_314_p2;
        i_reg_534 <= i_fu_287_p2;
        minimumDistanceIndex_reg_524[1 : 0] <= minimumDistanceIndex_fu_278_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_549 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        in_pixel_V5_rewind_reg_177 <= in_pixel_V5_phi_reg_205;
        in_switch_V6_rewind_reg_191 <= in_switch_V6_phi_reg_217;
    end
end

always @ (posedge ap_clk) begin
    if ((in_pixel_V_0_load_A == 1'b1)) begin
        in_pixel_V_0_payload_A <= in_pixel_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_pixel_V_0_load_B == 1'b1)) begin
        in_pixel_V_0_payload_B <= in_pixel_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_do_init_phi_fu_150_p6 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_switch_V_read_reg_519 <= in_switch_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        minimumDistanceIndex_8_reg_628 <= minimumDistanceIndex_8_fu_450_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pixel_V_1_load_A == 1'b1)) begin
        out_pixel_V_1_payload_A <= storemerge1_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((out_pixel_V_1_load_B == 1'b1)) begin
        out_pixel_V_1_payload_B <= storemerge1_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_color_array_stream_1_reg_558 <= p_color_array_stream_s_q0;
        p_color_array_stream_3_reg_563 <= p_color_array_stream_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_color_array_stream_5_reg_578 <= p_color_array_stream_s_q2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((exitcond_reg_549 == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_150_p6 = 1'd1;
        end else if ((exitcond_reg_549 == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_150_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_150_p6 = do_init_reg_146;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_150_p6 = do_init_reg_146;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter1_do_init_reg_146 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_in_pixel_V5_phi_phi_fu_209_p4 = ap_phi_mux_in_pixel_V5_rewind_phi_fu_181_p6;
    end else begin
        ap_phi_mux_in_pixel_V5_phi_phi_fu_209_p4 = ap_phi_reg_pp0_iter2_in_pixel_V5_phi_reg_205;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_549 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_in_pixel_V5_rewind_phi_fu_181_p6 = in_pixel_V5_phi_reg_205;
    end else begin
        ap_phi_mux_in_pixel_V5_rewind_phi_fu_181_p6 = in_pixel_V5_rewind_reg_177;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_reg_549 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_in_switch_V6_rewind_phi_fu_195_p6 = in_switch_V6_phi_reg_217;
    end else begin
        ap_phi_mux_in_switch_V6_rewind_phi_fu_195_p6 = in_switch_V6_rewind_reg_191;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_reg_pp0_iter18_exitcond_reg_549 == 1'd1)) begin
            ap_phi_mux_minimumDistance4_phi_fu_233_p6 = 32'd2147483647;
        end else if ((ap_reg_pp0_iter18_exitcond_reg_549 == 1'd0)) begin
            ap_phi_mux_minimumDistance4_phi_fu_233_p6 = minimumDistance_2_2_fu_458_p3;
        end else begin
            ap_phi_mux_minimumDistance4_phi_fu_233_p6 = minimumDistance4_reg_229;
        end
    end else begin
        ap_phi_mux_minimumDistance4_phi_fu_233_p6 = minimumDistance4_reg_229;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd1)) begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6 = 32'd7;
        end else if ((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd0)) begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6 = minimumDistanceIndex_8_reg_628;
        end else begin
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6 = minimumDistanceIndex_3_reg_243;
        end
    end else begin
        ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6 = minimumDistanceIndex_3_reg_243;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_170)) begin
        if ((exitcond_reg_549 == 1'd1)) begin
            ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6 = 2'd0;
        end else if ((exitcond_reg_549 == 1'd0)) begin
            ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6 = tmp_5_reg_544;
        end else begin
            ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6 = minimumDistanceIndex_9_reg_162;
        end
    end else begin
        ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6 = minimumDistanceIndex_9_reg_162;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_Str_fu_257_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_Str_fu_257_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_Str_fu_264_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_Str_fu_264_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_getColorDistance_Str_fu_271_ap_ce = 1'b1;
    end else begin
        grp_getColorDistance_Str_fu_271_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_146 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_pixel_V_0_ack_out = 1'b1;
    end else begin
        in_pixel_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_pixel_V_0_sel == 1'b1)) begin
        in_pixel_V_0_data_out = in_pixel_V_0_payload_B;
    end else begin
        in_pixel_V_0_data_out = in_pixel_V_0_payload_A;
    end
end

always @ (*) begin
    if (((do_init_reg_146 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in_pixel_V_TDATA_blk_n = in_pixel_V_0_state[1'd0];
    end else begin
        in_pixel_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((out_pixel_V_1_sel == 1'b1)) begin
        out_pixel_V_1_data_out = out_pixel_V_1_payload_B;
    end else begin
        out_pixel_V_1_data_out = out_pixel_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        out_pixel_V_1_vld_in = 1'b1;
    end else begin
        out_pixel_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_reg_pp0_iter20_exitcond_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd1) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_pixel_V_TDATA_blk_n = out_pixel_V_1_state[1'd1];
    end else begin
        out_pixel_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_color_array_stream_s_ce0 = 1'b1;
    end else begin
        p_color_array_stream_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_color_array_stream_s_ce1 = 1'b1;
    end else begin
        p_color_array_stream_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_color_array_stream_s_ce2 = 1'b1;
    end else begin
        p_color_array_stream_s_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        p_color_array_stream_s_ce3 = 1'b1;
    end else begin
        p_color_array_stream_s_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_pixel_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1)) | ((do_init_reg_146 == 1'd1) & (in_pixel_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter21 == 1'b1) & ((out_pixel_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state23_io))) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((do_init_reg_146 == 1'd1) & (in_pixel_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter21 == 1'b1) & ((out_pixel_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state23_io))) | ((1'b1 == ap_block_state22_io) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((do_init_reg_146 == 1'd1) & (in_pixel_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((ap_reg_pp0_iter19_exitcond_reg_549 == 1'd1) & (out_pixel_V_1_ack_in == 1'b0));
end

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((ap_reg_pp0_iter20_exitcond_reg_549 == 1'd1) & (out_pixel_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state23_pp0_stage0_iter21 = (out_pixel_V_1_ack_in == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((do_init_reg_146 == 1'd1) & (in_pixel_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_170 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_379 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_in_pixel_V5_phi_reg_205 = 'bx;

assign ap_phi_reg_pp0_iter0_in_switch_V6_phi_reg_217 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_308_p2 = ((i_2_fu_298_p2 == 3'd6) ? 1'b1 : 1'b0);

assign grp_getColorDistance_Str_fu_257_ap_start = ap_reg_grp_getColorDistance_Str_fu_257_ap_start;

assign grp_getColorDistance_Str_fu_264_ap_start = ap_reg_grp_getColorDistance_Str_fu_264_ap_start;

assign grp_getColorDistance_Str_fu_271_ap_start = ap_reg_grp_getColorDistance_Str_fu_271_ap_start;

assign i_1_cast_fu_419_p1 = ap_reg_pp0_iter18_i_1_reg_568;

assign i_1_fu_314_p2 = (3'd2 + minimumDistanceIndex_reg_524);

assign i_2_fu_298_p2 = (3'd3 + minimumDistanceIndex_fu_278_p1);

assign i_cast_fu_402_p1 = ap_reg_pp0_iter18_i_reg_534;

assign i_fu_287_p2 = (3'd1 + minimumDistanceIndex_fu_278_p1);

assign in_pixel_V_0_ack_in = in_pixel_V_0_state[1'd1];

assign in_pixel_V_0_load_A = (in_pixel_V_0_state_cmp_full & ~in_pixel_V_0_sel_wr);

assign in_pixel_V_0_load_B = (in_pixel_V_0_state_cmp_full & in_pixel_V_0_sel_wr);

assign in_pixel_V_0_sel = in_pixel_V_0_sel_rd;

assign in_pixel_V_0_state_cmp_full = ((in_pixel_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_pixel_V_0_vld_in = in_pixel_V_TVALID;

assign in_pixel_V_0_vld_out = in_pixel_V_0_state[1'd0];

assign in_pixel_V_TREADY = in_pixel_V_0_state[1'd1];

assign lhs_V_fu_480_p1 = ap_reg_pp0_iter19_in_switch_V6_phi_reg_217;

assign minimumDistanceIndex_1_fu_388_p3 = ((tmp_4_reg_600[0:0] === 1'b1) ? minimumDistanceIndex_4_fu_384_p1 : ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6);

assign minimumDistanceIndex_2_fu_395_p3 = ((tmp_2_reg_595[0:0] === 1'b1) ? minimumDistanceIndex_1_fu_388_p3 : ap_phi_mux_minimumDistanceIndex_3_phi_fu_247_p6);

assign minimumDistanceIndex_4_fu_384_p1 = ap_reg_pp0_iter18_minimumDistanceIndex_9_reg_162;

assign minimumDistanceIndex_5_fu_405_p3 = ((tmp_4_1_reg_610[0:0] === 1'b1) ? i_cast_fu_402_p1 : minimumDistanceIndex_2_fu_395_p3);

assign minimumDistanceIndex_6_fu_412_p3 = ((tmp_2_1_reg_605[0:0] === 1'b1) ? minimumDistanceIndex_5_fu_405_p3 : minimumDistanceIndex_2_fu_395_p3);

assign minimumDistanceIndex_7_fu_435_p3 = ((tmp_4_2_fu_430_p2[0:0] === 1'b1) ? i_1_cast_fu_419_p1 : minimumDistanceIndex_6_fu_412_p3);

assign minimumDistanceIndex_8_fu_450_p3 = ((tmp_2_2_fu_425_p2[0:0] === 1'b1) ? minimumDistanceIndex_7_fu_435_p3 : minimumDistanceIndex_6_fu_412_p3);

assign minimumDistanceIndex_fu_278_p1 = ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6;

assign minimumDistance_1_1_fu_368_p3 = ((tmp_4_1_fu_363_p2[0:0] === 1'b1) ? minimumDistance_4_1_s_fu_354_p1 : minimumDistance_2_fu_346_p3);

assign minimumDistance_1_2_fu_443_p3 = ((tmp_4_2_fu_430_p2[0:0] === 1'b1) ? minimumDistance_4_2_s_fu_422_p1 : minimumDistance_2_1_reg_615);

assign minimumDistance_1_fu_338_p3 = ((tmp_4_fu_333_p2[0:0] === 1'b1) ? minimumDistance_4_ex_fu_324_p1 : ap_phi_mux_minimumDistance4_phi_fu_233_p6);

assign minimumDistance_2_1_fu_376_p3 = ((tmp_2_1_fu_357_p2[0:0] === 1'b1) ? minimumDistance_1_1_fu_368_p3 : minimumDistance_2_fu_346_p3);

assign minimumDistance_2_2_fu_458_p3 = ((tmp_2_2_fu_425_p2[0:0] === 1'b1) ? minimumDistance_1_2_fu_443_p3 : minimumDistance_2_1_reg_615);

assign minimumDistance_2_fu_346_p3 = ((tmp_2_fu_327_p2[0:0] === 1'b1) ? minimumDistance_1_fu_338_p3 : ap_phi_mux_minimumDistance4_phi_fu_233_p6);

assign minimumDistance_4_1_s_fu_354_p1 = minimumDistance_4_1_reg_589;

assign minimumDistance_4_2_s_fu_422_p1 = minimumDistance_4_2_reg_622;

assign minimumDistance_4_ex_fu_324_p1 = minimumDistance_4_reg_583;

assign out_pixel_V_1_ack_in = out_pixel_V_1_state[1'd1];

assign out_pixel_V_1_ack_out = out_pixel_V_TREADY;

assign out_pixel_V_1_load_A = (out_pixel_V_1_state_cmp_full & ~out_pixel_V_1_sel_wr);

assign out_pixel_V_1_load_B = (out_pixel_V_1_state_cmp_full & out_pixel_V_1_sel_wr);

assign out_pixel_V_1_sel = out_pixel_V_1_sel_rd;

assign out_pixel_V_1_state_cmp_full = ((out_pixel_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_pixel_V_1_vld_out = out_pixel_V_1_state[1'd0];

assign out_pixel_V_TDATA = out_pixel_V_1_data_out;

assign out_pixel_V_TVALID = out_pixel_V_1_state[1'd0];

assign p_color_array_stream_8_fu_490_p1 = $signed(p_color_array_stream_s_q3);

assign p_color_array_stream_s_address0 = tmp_s_fu_282_p1;

assign p_color_array_stream_s_address1 = tmp_1_1_fu_293_p1;

assign p_color_array_stream_s_address2 = tmp_1_2_fu_319_p1;

assign p_color_array_stream_s_address3 = tmp_6_fu_465_p1;

assign rhs_V_fu_475_p2 = (minimumDistanceIndex_8_reg_628 + 32'd1);

assign sel_tmp2_fu_500_p3 = ((sel_tmp_fu_494_p2[0:0] === 1'b1) ? p_color_array_stream_8_fu_490_p1 : ap_reg_pp0_iter19_in_pixel_V5_phi_reg_205);

assign sel_tmp_fu_494_p2 = (tmp_fu_470_p2 & tmp_3_fu_484_p2);

assign storemerge1_fu_508_p3 = ((tmp_fu_470_p2[0:0] === 1'b1) ? sel_tmp2_fu_500_p3 : ap_reg_pp0_iter19_in_pixel_V5_phi_reg_205);

assign tmp_1_1_fu_293_p1 = i_fu_287_p2;

assign tmp_1_2_fu_319_p1 = i_1_fu_314_p2;

assign tmp_2_1_fu_357_p2 = (($signed(minimumDistance_4_1_s_fu_354_p1) < $signed(minimumDistance_2_fu_346_p3)) ? 1'b1 : 1'b0);

assign tmp_2_2_fu_425_p2 = (($signed(minimumDistance_4_2_s_fu_422_p1) < $signed(minimumDistance_2_1_reg_615)) ? 1'b1 : 1'b0);

assign tmp_2_fu_327_p2 = (($signed(minimumDistance_4_ex_fu_324_p1) < $signed(ap_phi_mux_minimumDistance4_phi_fu_233_p6)) ? 1'b1 : 1'b0);

assign tmp_3_fu_484_p2 = ((lhs_V_fu_480_p1 == rhs_V_fu_475_p2) ? 1'b1 : 1'b0);

assign tmp_4_1_fu_363_p2 = ((minimumDistance_4_1_reg_589 < 12'd265) ? 1'b1 : 1'b0);

assign tmp_4_2_fu_430_p2 = ((minimumDistance_4_2_reg_622 < 12'd265) ? 1'b1 : 1'b0);

assign tmp_4_fu_333_p2 = ((minimumDistance_4_reg_583 < 12'd265) ? 1'b1 : 1'b0);

assign tmp_5_fu_304_p1 = i_2_fu_298_p2[1:0];

assign tmp_6_fu_465_p1 = $signed(minimumDistanceIndex_8_fu_450_p3);

assign tmp_fu_470_p2 = (($signed(minimumDistanceIndex_8_reg_628) < $signed(32'd5)) ? 1'b1 : 1'b0);

assign tmp_s_fu_282_p1 = ap_phi_mux_minimumDistanceIndex_9_phi_fu_166_p6;

always @ (posedge ap_clk) begin
    minimumDistanceIndex_reg_524[2] <= 1'b0;
end

endmodule //getPixelClassification_Stream
