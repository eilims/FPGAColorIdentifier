// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getPixelClassification_HH_
#define _getPixelClassification_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_PIXEL_COLOR_LOO.h"
#include "p_ColorComparator_Co.h"
#include "fifo_w32_d2_A.h"

namespace ap_rtl {

struct getPixelClassification : public sc_module {
    // Port declarations 8
    sc_in< sc_lv<32> > pixel;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<32> > ap_return;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    getPixelClassification(sc_module_name name);
    SC_HAS_PROCESS(getPixelClassification);

    ~getPixelClassification();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Loop_PIXEL_COLOR_LOO* Loop_PIXEL_COLOR_LOO_U0;
    p_ColorComparator_Co* p_ColorComparator_Co_U0;
    fifo_w32_d2_A* minimumDistanceIndex_U;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_ap_start;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_ap_done;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_ap_continue;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_ap_idle;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_ap_ready;
    sc_signal< sc_lv<32> > Loop_PIXEL_COLOR_LOO_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_minimumDistanceIndex;
    sc_signal< sc_logic > minimumDistanceIndex_full_n;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_ap_start;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_ap_done;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_ap_continue;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_ap_idle;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_ap_ready;
    sc_signal< sc_lv<32> > p_ColorComparator_Co_U0_ap_return;
    sc_signal< sc_lv<32> > tmp_p_ColorComparator_Co_fu_38_ap_return;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_lv<32> > minimumDistanceIndex_dout;
    sc_signal< sc_logic > minimumDistanceIndex_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_start_full_n;
    sc_signal< sc_logic > Loop_PIXEL_COLOR_LOO_U0_start_write;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_start_full_n;
    sc_signal< sc_logic > p_ColorComparator_Co_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Loop_PIXEL_COLOR_LOO_U0_ap_continue();
    void thread_Loop_PIXEL_COLOR_LOO_U0_ap_start();
    void thread_Loop_PIXEL_COLOR_LOO_U0_start_full_n();
    void thread_Loop_PIXEL_COLOR_LOO_U0_start_write();
    void thread_ap_channel_done_minimumDistanceIndex();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_p_ColorComparator_Co_U0_ap_continue();
    void thread_p_ColorComparator_Co_U0_ap_start();
    void thread_p_ColorComparator_Co_U0_start_full_n();
    void thread_p_ColorComparator_Co_U0_start_write();
    void thread_tmp_p_ColorComparator_Co_fu_38_ap_return();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
