// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getPixelClassification.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getPixelClassification::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> getPixelClassification::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getPixelClassification::ap_const_lv32_1 = "1";
const sc_logic getPixelClassification::ap_const_logic_0 = sc_dt::Log_0;

getPixelClassification::getPixelClassification(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Loop_PIXEL_COLOR_LOO_U0 = new Loop_PIXEL_COLOR_LOO("Loop_PIXEL_COLOR_LOO_U0");
    Loop_PIXEL_COLOR_LOO_U0->ap_clk(ap_clk);
    Loop_PIXEL_COLOR_LOO_U0->ap_rst(ap_rst);
    Loop_PIXEL_COLOR_LOO_U0->ap_start(Loop_PIXEL_COLOR_LOO_U0_ap_start);
    Loop_PIXEL_COLOR_LOO_U0->ap_done(Loop_PIXEL_COLOR_LOO_U0_ap_done);
    Loop_PIXEL_COLOR_LOO_U0->ap_continue(Loop_PIXEL_COLOR_LOO_U0_ap_continue);
    Loop_PIXEL_COLOR_LOO_U0->ap_idle(Loop_PIXEL_COLOR_LOO_U0_ap_idle);
    Loop_PIXEL_COLOR_LOO_U0->ap_ready(Loop_PIXEL_COLOR_LOO_U0_ap_ready);
    Loop_PIXEL_COLOR_LOO_U0->pixel(pixel);
    Loop_PIXEL_COLOR_LOO_U0->ap_return(Loop_PIXEL_COLOR_LOO_U0_ap_return);
    p_ColorComparator_Co_U0 = new p_ColorComparator_Co("p_ColorComparator_Co_U0");
    p_ColorComparator_Co_U0->ap_clk(ap_clk);
    p_ColorComparator_Co_U0->ap_rst(ap_rst);
    p_ColorComparator_Co_U0->ap_start(p_ColorComparator_Co_U0_ap_start);
    p_ColorComparator_Co_U0->ap_done(p_ColorComparator_Co_U0_ap_done);
    p_ColorComparator_Co_U0->ap_continue(p_ColorComparator_Co_U0_ap_continue);
    p_ColorComparator_Co_U0->ap_idle(p_ColorComparator_Co_U0_ap_idle);
    p_ColorComparator_Co_U0->ap_ready(p_ColorComparator_Co_U0_ap_ready);
    p_ColorComparator_Co_U0->p_read(minimumDistanceIndex_dout);
    p_ColorComparator_Co_U0->ap_return(p_ColorComparator_Co_U0_ap_return);
    minimumDistanceIndex_U = new fifo_w32_d2_A("minimumDistanceIndex_U");
    minimumDistanceIndex_U->clk(ap_clk);
    minimumDistanceIndex_U->reset(ap_rst);
    minimumDistanceIndex_U->if_read_ce(ap_var_for_const0);
    minimumDistanceIndex_U->if_write_ce(ap_var_for_const0);
    minimumDistanceIndex_U->if_din(Loop_PIXEL_COLOR_LOO_U0_ap_return);
    minimumDistanceIndex_U->if_full_n(minimumDistanceIndex_full_n);
    minimumDistanceIndex_U->if_write(Loop_PIXEL_COLOR_LOO_U0_ap_done);
    minimumDistanceIndex_U->if_dout(minimumDistanceIndex_dout);
    minimumDistanceIndex_U->if_empty_n(minimumDistanceIndex_empty_n);
    minimumDistanceIndex_U->if_read(p_ColorComparator_Co_U0_ap_ready);

    SC_METHOD(thread_Loop_PIXEL_COLOR_LOO_U0_ap_continue);
    sensitive << ( minimumDistanceIndex_full_n );

    SC_METHOD(thread_Loop_PIXEL_COLOR_LOO_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_PIXEL_COLOR_LOO_U0_start_full_n);

    SC_METHOD(thread_Loop_PIXEL_COLOR_LOO_U0_start_write);

    SC_METHOD(thread_ap_channel_done_minimumDistanceIndex);
    sensitive << ( Loop_PIXEL_COLOR_LOO_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( p_ColorComparator_Co_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_PIXEL_COLOR_LOO_U0_ap_idle );
    sensitive << ( p_ColorComparator_Co_U0_ap_idle );
    sensitive << ( minimumDistanceIndex_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_PIXEL_COLOR_LOO_U0_ap_ready );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_ColorComparator_Co_U0_ap_return );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( p_ColorComparator_Co_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_PIXEL_COLOR_LOO_U0_ap_ready );

    SC_METHOD(thread_p_ColorComparator_Co_U0_ap_continue);

    SC_METHOD(thread_p_ColorComparator_Co_U0_ap_start);
    sensitive << ( minimumDistanceIndex_empty_n );

    SC_METHOD(thread_p_ColorComparator_Co_U0_start_full_n);

    SC_METHOD(thread_p_ColorComparator_Co_U0_start_write);

    SC_METHOD(thread_tmp_p_ColorComparator_Co_fu_38_ap_return);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getPixelClassification_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, pixel, "(port)pixel");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_start, "Loop_PIXEL_COLOR_LOO_U0_ap_start");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_done, "Loop_PIXEL_COLOR_LOO_U0_ap_done");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_continue, "Loop_PIXEL_COLOR_LOO_U0_ap_continue");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_idle, "Loop_PIXEL_COLOR_LOO_U0_ap_idle");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_ready, "Loop_PIXEL_COLOR_LOO_U0_ap_ready");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_ap_return, "Loop_PIXEL_COLOR_LOO_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_minimumDistanceIndex, "ap_channel_done_minimumDistanceIndex");
    sc_trace(mVcdFile, minimumDistanceIndex_full_n, "minimumDistanceIndex_full_n");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_start, "p_ColorComparator_Co_U0_ap_start");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_done, "p_ColorComparator_Co_U0_ap_done");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_continue, "p_ColorComparator_Co_U0_ap_continue");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_idle, "p_ColorComparator_Co_U0_ap_idle");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_ready, "p_ColorComparator_Co_U0_ap_ready");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_ap_return, "p_ColorComparator_Co_U0_ap_return");
    sc_trace(mVcdFile, tmp_p_ColorComparator_Co_fu_38_ap_return, "tmp_p_ColorComparator_Co_fu_38_ap_return");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, minimumDistanceIndex_dout, "minimumDistanceIndex_dout");
    sc_trace(mVcdFile, minimumDistanceIndex_empty_n, "minimumDistanceIndex_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_start_full_n, "Loop_PIXEL_COLOR_LOO_U0_start_full_n");
    sc_trace(mVcdFile, Loop_PIXEL_COLOR_LOO_U0_start_write, "Loop_PIXEL_COLOR_LOO_U0_start_write");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_start_full_n, "p_ColorComparator_Co_U0_start_full_n");
    sc_trace(mVcdFile, p_ColorComparator_Co_U0_start_write, "p_ColorComparator_Co_U0_start_write");
#endif

    }
    mHdltvinHandle.open("getPixelClassification.hdltvin.dat");
    mHdltvoutHandle.open("getPixelClassification.hdltvout.dat");
}

getPixelClassification::~getPixelClassification() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Loop_PIXEL_COLOR_LOO_U0;
    delete p_ColorComparator_Co_U0;
    delete minimumDistanceIndex_U;
}

void getPixelClassification::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void getPixelClassification::thread_Loop_PIXEL_COLOR_LOO_U0_ap_continue() {
    Loop_PIXEL_COLOR_LOO_U0_ap_continue = minimumDistanceIndex_full_n.read();
}

void getPixelClassification::thread_Loop_PIXEL_COLOR_LOO_U0_ap_start() {
    Loop_PIXEL_COLOR_LOO_U0_ap_start = ap_start.read();
}

void getPixelClassification::thread_Loop_PIXEL_COLOR_LOO_U0_start_full_n() {
    Loop_PIXEL_COLOR_LOO_U0_start_full_n = ap_const_logic_1;
}

void getPixelClassification::thread_Loop_PIXEL_COLOR_LOO_U0_start_write() {
    Loop_PIXEL_COLOR_LOO_U0_start_write = ap_const_logic_0;
}

void getPixelClassification::thread_ap_channel_done_minimumDistanceIndex() {
    ap_channel_done_minimumDistanceIndex = Loop_PIXEL_COLOR_LOO_U0_ap_done.read();
}

void getPixelClassification::thread_ap_done() {
    ap_done = p_ColorComparator_Co_U0_ap_done.read();
}

void getPixelClassification::thread_ap_idle() {
    ap_idle = (Loop_PIXEL_COLOR_LOO_U0_ap_idle.read() & p_ColorComparator_Co_U0_ap_idle.read() & (minimumDistanceIndex_empty_n.read() ^ 
  ap_const_logic_1));
}

void getPixelClassification::thread_ap_ready() {
    ap_ready = Loop_PIXEL_COLOR_LOO_U0_ap_ready.read();
}

void getPixelClassification::thread_ap_return() {
    ap_return = p_ColorComparator_Co_U0_ap_return.read();
}

void getPixelClassification::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void getPixelClassification::thread_ap_sync_done() {
    ap_sync_done = p_ColorComparator_Co_U0_ap_done.read();
}

void getPixelClassification::thread_ap_sync_ready() {
    ap_sync_ready = Loop_PIXEL_COLOR_LOO_U0_ap_ready.read();
}

void getPixelClassification::thread_p_ColorComparator_Co_U0_ap_continue() {
    p_ColorComparator_Co_U0_ap_continue = ap_const_logic_1;
}

void getPixelClassification::thread_p_ColorComparator_Co_U0_ap_start() {
    p_ColorComparator_Co_U0_ap_start = minimumDistanceIndex_empty_n.read();
}

void getPixelClassification::thread_p_ColorComparator_Co_U0_start_full_n() {
    p_ColorComparator_Co_U0_start_full_n = ap_const_logic_1;
}

void getPixelClassification::thread_p_ColorComparator_Co_U0_start_write() {
    p_ColorComparator_Co_U0_start_write = ap_const_logic_0;
}

void getPixelClassification::thread_tmp_p_ColorComparator_Co_fu_38_ap_return() {
    tmp_p_ColorComparator_Co_fu_38_ap_return = ap_const_lv32_0;
}

void getPixelClassification::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"pixel\" :  \"" << pixel.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

