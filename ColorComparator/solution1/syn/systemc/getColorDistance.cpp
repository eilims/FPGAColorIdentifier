// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getColorDistance.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getColorDistance::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getColorDistance::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> getColorDistance::ap_ST_fsm_pp0_stage0 = "1";
const bool getColorDistance::ap_const_boolean_1 = true;
const sc_lv<32> getColorDistance::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getColorDistance::ap_const_boolean_0 = false;
const sc_lv<32> getColorDistance::ap_const_lv32_10 = "10000";
const sc_lv<32> getColorDistance::ap_const_lv32_17 = "10111";
const sc_lv<32> getColorDistance::ap_const_lv32_8 = "1000";
const sc_lv<32> getColorDistance::ap_const_lv32_F = "1111";
const sc_lv<9> getColorDistance::ap_const_lv9_FF = "11111111";
const sc_lv<9> getColorDistance::ap_const_lv9_0 = "000000000";
const sc_lv<10> getColorDistance::ap_const_lv10_0 = "0000000000";
const sc_lv<8> getColorDistance::ap_const_lv8_0 = "00000000";
const sc_lv<32> getColorDistance::ap_const_lv32_13 = "10011";

getColorDistance::getColorDistance(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_fxp_sqrt_fu_66 = new fxp_sqrt("grp_fxp_sqrt_fu_66");
    grp_fxp_sqrt_fu_66->ap_clk(ap_clk);
    grp_fxp_sqrt_fu_66->ap_rst(ap_rst);
    grp_fxp_sqrt_fu_66->in_val_V_read(grp_fxp_sqrt_fu_66_in_val_V_read);
    grp_fxp_sqrt_fu_66->ap_return(grp_fxp_sqrt_fu_66_ap_return);
    grp_fxp_sqrt_fu_66->ap_ce(grp_fxp_sqrt_fu_66_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( pixel_TVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( pixel_TVALID );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter13);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( pixel_TVALID );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter8);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );

    SC_METHOD(thread_ap_idle_pp0_0to12);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to12 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( grp_fxp_sqrt_fu_66_ap_return );

    SC_METHOD(thread_colorBlue_cast_fu_141_p1);
    sensitive << ( colorBlue_fu_137_p1 );

    SC_METHOD(thread_colorBlue_fu_137_p1);
    sensitive << ( color );

    SC_METHOD(thread_colorGreen_cast_fu_133_p1);
    sensitive << ( colorGreen_fu_123_p4 );

    SC_METHOD(thread_colorGreen_fu_123_p4);
    sensitive << ( color );

    SC_METHOD(thread_colorRed_cast_fu_115_p3);
    sensitive << ( tmp_5_fu_107_p3 );

    SC_METHOD(thread_grp_fxp_sqrt_fu_66_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fxp_sqrt_fu_66_in_val_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( p_Val2_cast_fu_234_p1 );
    sensitive << ( tmp5_cast_fu_258_p1 );

    SC_METHOD(thread_number_assign_1_cast_fu_167_p1);
    sensitive << ( number_assign_1_fu_161_p2 );

    SC_METHOD(thread_number_assign_1_fu_161_p2);
    sensitive << ( pixelGreen_cast_fu_95_p1 );
    sensitive << ( colorGreen_cast_fu_133_p1 );

    SC_METHOD(thread_number_assign_2_fu_177_p2);
    sensitive << ( pixelBlue_cast_fu_103_p1 );
    sensitive << ( colorBlue_cast_fu_141_p1 );

    SC_METHOD(thread_number_assign_cast_c_fu_151_p1);
    sensitive << ( number_assign_fu_145_p2 );

    SC_METHOD(thread_number_assign_fu_145_p2);
    sensitive << ( pixelRed_cast_fu_81_p1 );
    sensitive << ( colorRed_cast_fu_115_p3 );

    SC_METHOD(thread_p_Val2_1_cast_fu_245_p1);
    sensitive << ( tmp_2_fu_238_p3 );

    SC_METHOD(thread_p_Val2_2_cast_cast_fu_249_p1);
    sensitive << ( p_Val2_s_reg_289 );

    SC_METHOD(thread_p_Val2_cast_fu_234_p1);
    sensitive << ( tmp_fu_227_p3 );

    SC_METHOD(thread_p_Val2_s_fu_221_p2);
    sensitive << ( p_shl_cast_fu_205_p1 );
    sensitive << ( p_shl9_cast_fu_217_p1 );

    SC_METHOD(thread_p_shl9_cast_fu_217_p1);
    sensitive << ( p_shl9_fu_209_p3 );

    SC_METHOD(thread_p_shl9_fu_209_p3);
    sensitive << ( tmp_9_fu_191_p2 );

    SC_METHOD(thread_p_shl_cast_fu_205_p1);
    sensitive << ( p_shl_fu_197_p3 );

    SC_METHOD(thread_p_shl_fu_197_p3);
    sensitive << ( tmp_9_fu_191_p2 );

    SC_METHOD(thread_pixelBlue_cast_fu_103_p1);
    sensitive << ( pixelBlue_fu_99_p1 );

    SC_METHOD(thread_pixelBlue_fu_99_p1);
    sensitive << ( pixel_TDATA );

    SC_METHOD(thread_pixelGreen_cast_fu_95_p1);
    sensitive << ( pixelGreen_fu_85_p4 );

    SC_METHOD(thread_pixelGreen_fu_85_p4);
    sensitive << ( pixel_TDATA );

    SC_METHOD(thread_pixelRed_cast_fu_81_p1);
    sensitive << ( pixelRed_fu_71_p4 );

    SC_METHOD(thread_pixelRed_fu_71_p4);
    sensitive << ( pixel_TDATA );

    SC_METHOD(thread_pixel_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( pixel_TVALID );

    SC_METHOD(thread_pixel_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_result_1_fu_171_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_1_cast_fu_167_p1 );

    SC_METHOD(thread_result_1_fu_171_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_1_cast_fu_167_p1 );

    SC_METHOD(thread_result_1_fu_171_p2);
    sensitive << ( result_1_fu_171_p0 );
    sensitive << ( result_1_fu_171_p1 );

    SC_METHOD(thread_result_fu_155_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_cast_c_fu_151_p1 );

    SC_METHOD(thread_result_fu_155_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_cast_c_fu_151_p1 );

    SC_METHOD(thread_result_fu_155_p2);
    sensitive << ( result_fu_155_p0 );
    sensitive << ( result_fu_155_p1 );

    SC_METHOD(thread_tmp5_cast_fu_258_p1);
    sensitive << ( tmp5_fu_252_p2 );

    SC_METHOD(thread_tmp5_fu_252_p2);
    sensitive << ( p_Val2_2_cast_cast_fu_249_p1 );
    sensitive << ( p_Val2_1_cast_fu_245_p1 );

    SC_METHOD(thread_tmp_2_fu_238_p3);
    sensitive << ( result_1_reg_284 );

    SC_METHOD(thread_tmp_5_fu_107_p3);
    sensitive << ( color );

    SC_METHOD(thread_tmp_9_fu_191_p0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_2_fu_177_p2 );

    SC_METHOD(thread_tmp_9_fu_191_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( number_assign_2_fu_177_p2 );

    SC_METHOD(thread_tmp_9_fu_191_p2);
    sensitive << ( tmp_9_fu_191_p0 );
    sensitive << ( tmp_9_fu_191_p1 );

    SC_METHOD(thread_tmp_fu_227_p3);
    sensitive << ( result_reg_279 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getColorDistance_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, pixel_TVALID, "(port)pixel_TVALID");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, pixel_TDATA, "(port)pixel_TDATA");
    sc_trace(mVcdFile, pixel_TREADY, "(port)pixel_TREADY");
    sc_trace(mVcdFile, color, "(port)color");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, pixel_TDATA_blk_n, "(port)pixel_TDATA_blk_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter8, "ap_block_state9_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter9, "ap_block_state10_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter10, "ap_block_state11_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter11, "ap_block_state12_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter12, "ap_block_state13_pp0_stage0_iter12");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter13, "ap_block_state14_pp0_stage0_iter13");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, result_fu_155_p2, "result_fu_155_p2");
    sc_trace(mVcdFile, result_reg_279, "result_reg_279");
    sc_trace(mVcdFile, result_1_fu_171_p2, "result_1_fu_171_p2");
    sc_trace(mVcdFile, result_1_reg_284, "result_1_reg_284");
    sc_trace(mVcdFile, p_Val2_s_fu_221_p2, "p_Val2_s_fu_221_p2");
    sc_trace(mVcdFile, p_Val2_s_reg_289, "p_Val2_s_reg_289");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_66_in_val_V_read, "grp_fxp_sqrt_fu_66_in_val_V_read");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_66_ap_return, "grp_fxp_sqrt_fu_66_ap_return");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_66_ap_ce, "grp_fxp_sqrt_fu_66_ap_ce");
    sc_trace(mVcdFile, pixelRed_fu_71_p4, "pixelRed_fu_71_p4");
    sc_trace(mVcdFile, pixelGreen_fu_85_p4, "pixelGreen_fu_85_p4");
    sc_trace(mVcdFile, pixelBlue_fu_99_p1, "pixelBlue_fu_99_p1");
    sc_trace(mVcdFile, tmp_5_fu_107_p3, "tmp_5_fu_107_p3");
    sc_trace(mVcdFile, colorGreen_fu_123_p4, "colorGreen_fu_123_p4");
    sc_trace(mVcdFile, colorBlue_fu_137_p1, "colorBlue_fu_137_p1");
    sc_trace(mVcdFile, pixelRed_cast_fu_81_p1, "pixelRed_cast_fu_81_p1");
    sc_trace(mVcdFile, colorRed_cast_fu_115_p3, "colorRed_cast_fu_115_p3");
    sc_trace(mVcdFile, number_assign_fu_145_p2, "number_assign_fu_145_p2");
    sc_trace(mVcdFile, result_fu_155_p0, "result_fu_155_p0");
    sc_trace(mVcdFile, number_assign_cast_c_fu_151_p1, "number_assign_cast_c_fu_151_p1");
    sc_trace(mVcdFile, result_fu_155_p1, "result_fu_155_p1");
    sc_trace(mVcdFile, pixelGreen_cast_fu_95_p1, "pixelGreen_cast_fu_95_p1");
    sc_trace(mVcdFile, colorGreen_cast_fu_133_p1, "colorGreen_cast_fu_133_p1");
    sc_trace(mVcdFile, number_assign_1_fu_161_p2, "number_assign_1_fu_161_p2");
    sc_trace(mVcdFile, result_1_fu_171_p0, "result_1_fu_171_p0");
    sc_trace(mVcdFile, number_assign_1_cast_fu_167_p1, "number_assign_1_cast_fu_167_p1");
    sc_trace(mVcdFile, result_1_fu_171_p1, "result_1_fu_171_p1");
    sc_trace(mVcdFile, pixelBlue_cast_fu_103_p1, "pixelBlue_cast_fu_103_p1");
    sc_trace(mVcdFile, colorBlue_cast_fu_141_p1, "colorBlue_cast_fu_141_p1");
    sc_trace(mVcdFile, number_assign_2_fu_177_p2, "number_assign_2_fu_177_p2");
    sc_trace(mVcdFile, tmp_9_fu_191_p0, "tmp_9_fu_191_p0");
    sc_trace(mVcdFile, tmp_9_fu_191_p1, "tmp_9_fu_191_p1");
    sc_trace(mVcdFile, tmp_9_fu_191_p2, "tmp_9_fu_191_p2");
    sc_trace(mVcdFile, p_shl_fu_197_p3, "p_shl_fu_197_p3");
    sc_trace(mVcdFile, p_shl9_fu_209_p3, "p_shl9_fu_209_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_205_p1, "p_shl_cast_fu_205_p1");
    sc_trace(mVcdFile, p_shl9_cast_fu_217_p1, "p_shl9_cast_fu_217_p1");
    sc_trace(mVcdFile, tmp_fu_227_p3, "tmp_fu_227_p3");
    sc_trace(mVcdFile, tmp_2_fu_238_p3, "tmp_2_fu_238_p3");
    sc_trace(mVcdFile, p_Val2_2_cast_cast_fu_249_p1, "p_Val2_2_cast_cast_fu_249_p1");
    sc_trace(mVcdFile, p_Val2_1_cast_fu_245_p1, "p_Val2_1_cast_fu_245_p1");
    sc_trace(mVcdFile, tmp5_fu_252_p2, "tmp5_fu_252_p2");
    sc_trace(mVcdFile, p_Val2_cast_fu_234_p1, "p_Val2_cast_fu_234_p1");
    sc_trace(mVcdFile, tmp5_cast_fu_258_p1, "tmp5_cast_fu_258_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to12, "ap_idle_pp0_0to12");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

getColorDistance::~getColorDistance() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_fxp_sqrt_fu_66;
}

void getColorDistance::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        p_Val2_s_reg_289 = p_Val2_s_fu_221_p2.read();
        result_1_reg_284 = result_1_fu_171_p2.read();
        result_reg_279 = result_fu_155_p2.read();
    }
}

void getColorDistance::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void getColorDistance::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, pixel_TVALID.read())));
}

void getColorDistance::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, pixel_TVALID.read()))) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void getColorDistance::thread_ap_block_state10_pp0_stage0_iter9() {
    ap_block_state10_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state11_pp0_stage0_iter10() {
    ap_block_state11_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state12_pp0_stage0_iter11() {
    ap_block_state12_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state13_pp0_stage0_iter12() {
    ap_block_state13_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state14_pp0_stage0_iter13() {
    ap_block_state14_pp0_stage0_iter13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, pixel_TVALID.read()));
}

void getColorDistance::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_block_state9_pp0_stage0_iter8() {
    ap_block_state9_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter13.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getColorDistance::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void getColorDistance::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_idle_pp0_0to12() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()))) {
        ap_idle_pp0_0to12 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to12 = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to12.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getColorDistance::thread_ap_return() {
    ap_return = grp_fxp_sqrt_fu_66_ap_return.read().range(19, 8);
}

void getColorDistance::thread_colorBlue_cast_fu_141_p1() {
    colorBlue_cast_fu_141_p1 = esl_zext<9,8>(colorBlue_fu_137_p1.read());
}

void getColorDistance::thread_colorBlue_fu_137_p1() {
    colorBlue_fu_137_p1 = color.read().range(8-1, 0);
}

void getColorDistance::thread_colorGreen_cast_fu_133_p1() {
    colorGreen_cast_fu_133_p1 = esl_zext<9,8>(colorGreen_fu_123_p4.read());
}

void getColorDistance::thread_colorGreen_fu_123_p4() {
    colorGreen_fu_123_p4 = color.read().range(15, 8);
}

void getColorDistance::thread_colorRed_cast_fu_115_p3() {
    colorRed_cast_fu_115_p3 = (!tmp_5_fu_107_p3.read()[0].is_01())? sc_lv<9>(): ((tmp_5_fu_107_p3.read()[0].to_bool())? ap_const_lv9_FF: ap_const_lv9_0);
}

void getColorDistance::thread_grp_fxp_sqrt_fu_66_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fxp_sqrt_fu_66_ap_ce = ap_const_logic_1;
    } else {
        grp_fxp_sqrt_fu_66_ap_ce = ap_const_logic_0;
    }
}

void getColorDistance::thread_grp_fxp_sqrt_fu_66_in_val_V_read() {
    grp_fxp_sqrt_fu_66_in_val_V_read = (!p_Val2_cast_fu_234_p1.read().is_01() || !tmp5_cast_fu_258_p1.read().is_01())? sc_lv<30>(): (sc_bigint<30>(p_Val2_cast_fu_234_p1.read()) + sc_bigint<30>(tmp5_cast_fu_258_p1.read()));
}

void getColorDistance::thread_number_assign_1_cast_fu_167_p1() {
    number_assign_1_cast_fu_167_p1 = esl_sext<18,9>(number_assign_1_fu_161_p2.read());
}

void getColorDistance::thread_number_assign_1_fu_161_p2() {
    number_assign_1_fu_161_p2 = (!pixelGreen_cast_fu_95_p1.read().is_01() || !colorGreen_cast_fu_133_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(pixelGreen_cast_fu_95_p1.read()) - sc_biguint<9>(colorGreen_cast_fu_133_p1.read()));
}

void getColorDistance::thread_number_assign_2_fu_177_p2() {
    number_assign_2_fu_177_p2 = (!pixelBlue_cast_fu_103_p1.read().is_01() || !colorBlue_cast_fu_141_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(pixelBlue_cast_fu_103_p1.read()) - sc_biguint<9>(colorBlue_cast_fu_141_p1.read()));
}

void getColorDistance::thread_number_assign_cast_c_fu_151_p1() {
    number_assign_cast_c_fu_151_p1 = esl_sext<18,9>(number_assign_fu_145_p2.read());
}

void getColorDistance::thread_number_assign_fu_145_p2() {
    number_assign_fu_145_p2 = (!pixelRed_cast_fu_81_p1.read().is_01() || !colorRed_cast_fu_115_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(pixelRed_cast_fu_81_p1.read()) - sc_biguint<9>(colorRed_cast_fu_115_p3.read()));
}

void getColorDistance::thread_p_Val2_1_cast_fu_245_p1() {
    p_Val2_1_cast_fu_245_p1 = esl_sext<29,28>(tmp_2_fu_238_p3.read());
}

void getColorDistance::thread_p_Val2_2_cast_cast_fu_249_p1() {
    p_Val2_2_cast_cast_fu_249_p1 = esl_sext<29,28>(p_Val2_s_reg_289.read());
}

void getColorDistance::thread_p_Val2_cast_fu_234_p1() {
    p_Val2_cast_fu_234_p1 = esl_sext<30,27>(tmp_fu_227_p3.read());
}

void getColorDistance::thread_p_Val2_s_fu_221_p2() {
    p_Val2_s_fu_221_p2 = (!p_shl_cast_fu_205_p1.read().is_01() || !p_shl9_cast_fu_217_p1.read().is_01())? sc_lv<28>(): (sc_bigint<28>(p_shl_cast_fu_205_p1.read()) - sc_bigint<28>(p_shl9_cast_fu_217_p1.read()));
}

void getColorDistance::thread_p_shl9_cast_fu_217_p1() {
    p_shl9_cast_fu_217_p1 = esl_sext<28,25>(p_shl9_fu_209_p3.read());
}

void getColorDistance::thread_p_shl9_fu_209_p3() {
    p_shl9_fu_209_p3 = esl_concat<17,8>(tmp_9_fu_191_p2.read(), ap_const_lv8_0);
}

void getColorDistance::thread_p_shl_cast_fu_205_p1() {
    p_shl_cast_fu_205_p1 = esl_sext<28,27>(p_shl_fu_197_p3.read());
}

void getColorDistance::thread_p_shl_fu_197_p3() {
    p_shl_fu_197_p3 = esl_concat<17,10>(tmp_9_fu_191_p2.read(), ap_const_lv10_0);
}

void getColorDistance::thread_pixelBlue_cast_fu_103_p1() {
    pixelBlue_cast_fu_103_p1 = esl_zext<9,8>(pixelBlue_fu_99_p1.read());
}

void getColorDistance::thread_pixelBlue_fu_99_p1() {
    pixelBlue_fu_99_p1 = pixel_TDATA.read().range(8-1, 0);
}

void getColorDistance::thread_pixelGreen_cast_fu_95_p1() {
    pixelGreen_cast_fu_95_p1 = esl_zext<9,8>(pixelGreen_fu_85_p4.read());
}

void getColorDistance::thread_pixelGreen_fu_85_p4() {
    pixelGreen_fu_85_p4 = pixel_TDATA.read().range(15, 8);
}

void getColorDistance::thread_pixelRed_cast_fu_81_p1() {
    pixelRed_cast_fu_81_p1 = esl_zext<9,8>(pixelRed_fu_71_p4.read());
}

void getColorDistance::thread_pixelRed_fu_71_p4() {
    pixelRed_fu_71_p4 = pixel_TDATA.read().range(23, 16);
}

void getColorDistance::thread_pixel_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pixel_TDATA_blk_n = pixel_TVALID.read();
    } else {
        pixel_TDATA_blk_n = ap_const_logic_1;
    }
}

void getColorDistance::thread_pixel_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        pixel_TREADY = ap_const_logic_1;
    } else {
        pixel_TREADY = ap_const_logic_0;
    }
}

void getColorDistance::thread_result_1_fu_171_p0() {
    result_1_fu_171_p0 =  (sc_lv<9>) (number_assign_1_cast_fu_167_p1.read());
}

void getColorDistance::thread_result_1_fu_171_p1() {
    result_1_fu_171_p1 =  (sc_lv<9>) (number_assign_1_cast_fu_167_p1.read());
}

void getColorDistance::thread_result_1_fu_171_p2() {
    result_1_fu_171_p2 = (!result_1_fu_171_p0.read().is_01() || !result_1_fu_171_p1.read().is_01())? sc_lv<18>(): sc_bigint<9>(result_1_fu_171_p0.read()) * sc_bigint<9>(result_1_fu_171_p1.read());
}

void getColorDistance::thread_result_fu_155_p0() {
    result_fu_155_p0 =  (sc_lv<9>) (number_assign_cast_c_fu_151_p1.read());
}

void getColorDistance::thread_result_fu_155_p1() {
    result_fu_155_p1 =  (sc_lv<9>) (number_assign_cast_c_fu_151_p1.read());
}

void getColorDistance::thread_result_fu_155_p2() {
    result_fu_155_p2 = (!result_fu_155_p0.read().is_01() || !result_fu_155_p1.read().is_01())? sc_lv<18>(): sc_bigint<9>(result_fu_155_p0.read()) * sc_bigint<9>(result_fu_155_p1.read());
}

void getColorDistance::thread_tmp5_cast_fu_258_p1() {
    tmp5_cast_fu_258_p1 = esl_sext<30,29>(tmp5_fu_252_p2.read());
}

void getColorDistance::thread_tmp5_fu_252_p2() {
    tmp5_fu_252_p2 = (!p_Val2_2_cast_cast_fu_249_p1.read().is_01() || !p_Val2_1_cast_fu_245_p1.read().is_01())? sc_lv<29>(): (sc_bigint<29>(p_Val2_2_cast_cast_fu_249_p1.read()) + sc_bigint<29>(p_Val2_1_cast_fu_245_p1.read()));
}

void getColorDistance::thread_tmp_2_fu_238_p3() {
    tmp_2_fu_238_p3 = esl_concat<18,10>(result_1_reg_284.read(), ap_const_lv10_0);
}

void getColorDistance::thread_tmp_5_fu_107_p3() {
    tmp_5_fu_107_p3 = color.read().range(16, 16);
}

void getColorDistance::thread_tmp_9_fu_191_p0() {
    tmp_9_fu_191_p0 = number_assign_2_fu_177_p2.read();
}

void getColorDistance::thread_tmp_9_fu_191_p1() {
    tmp_9_fu_191_p1 = number_assign_2_fu_177_p2.read();
}

void getColorDistance::thread_tmp_9_fu_191_p2() {
    tmp_9_fu_191_p2 = (!tmp_9_fu_191_p0.read().is_01() || !tmp_9_fu_191_p1.read().is_01())? sc_lv<17>(): sc_bigint<9>(tmp_9_fu_191_p0.read()) * sc_bigint<9>(tmp_9_fu_191_p1.read());
}

void getColorDistance::thread_tmp_fu_227_p3() {
    tmp_fu_227_p3 = esl_concat<18,9>(result_reg_279.read(), ap_const_lv9_0);
}

void getColorDistance::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

