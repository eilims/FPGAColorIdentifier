// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getPixelClassification_Stream.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getPixelClassification_Stream::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getPixelClassification_Stream::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> getPixelClassification_Stream::ap_ST_fsm_state1 = "1";
const sc_lv<2> getPixelClassification_Stream::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<32> getPixelClassification_Stream::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getPixelClassification_Stream::ap_const_boolean_1 = true;
const sc_lv<1> getPixelClassification_Stream::ap_const_lv1_1 = "1";
const sc_lv<32> getPixelClassification_Stream::ap_const_lv32_1 = "1";
const bool getPixelClassification_Stream::ap_const_boolean_0 = false;
const sc_lv<1> getPixelClassification_Stream::ap_const_lv1_0 = "0";
const sc_lv<2> getPixelClassification_Stream::ap_const_lv2_0 = "00";
const sc_lv<2> getPixelClassification_Stream::ap_const_lv2_2 = "10";
const sc_lv<2> getPixelClassification_Stream::ap_const_lv2_3 = "11";
const sc_lv<2> getPixelClassification_Stream::ap_const_lv2_1 = "1";
const int getPixelClassification_Stream::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> getPixelClassification_Stream::ap_const_lv32_7FFFFFFF = "1111111111111111111111111111111";
const sc_lv<3> getPixelClassification_Stream::ap_const_lv3_3 = "11";
const sc_lv<3> getPixelClassification_Stream::ap_const_lv3_6 = "110";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_10000 = "10000000000000000";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_100FF = "10000000011111111";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_FF00 = "1111111100000000";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_1FF00 = "11111111100000000";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_FF = "11111111";
const sc_lv<17> getPixelClassification_Stream::ap_const_lv17_FFFF = "1111111111111111";
const sc_lv<3> getPixelClassification_Stream::ap_const_lv3_2 = "10";
const sc_lv<3> getPixelClassification_Stream::ap_const_lv3_1 = "1";

getPixelClassification_Stream::getPixelClassification_Stream(sc_module_name name) : sc_module(name), mVcdFile(0) {
    getPixelClassification_Stream_AXILiteS_s_axi_U = new getPixelClassification_Stream_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("getPixelClassification_Stream_AXILiteS_s_axi_U");
    getPixelClassification_Stream_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    getPixelClassification_Stream_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    getPixelClassification_Stream_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    getPixelClassification_Stream_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    getPixelClassification_Stream_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    getPixelClassification_Stream_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    getPixelClassification_Stream_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    getPixelClassification_Stream_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    getPixelClassification_Stream_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    getPixelClassification_Stream_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    getPixelClassification_Stream_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    getPixelClassification_Stream_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    getPixelClassification_Stream_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    getPixelClassification_Stream_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ACLK(ap_clk);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ap_start(ap_start);
    getPixelClassification_Stream_AXILiteS_s_axi_U->interrupt(interrupt);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ap_ready(ap_ready);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ap_done(ap_done);
    getPixelClassification_Stream_AXILiteS_s_axi_U->ap_idle(ap_idle);
    grp_getColorDistance_fu_179 = new getColorDistance("grp_getColorDistance_fu_179");
    grp_getColorDistance_fu_179->ap_clk(ap_clk);
    grp_getColorDistance_fu_179->ap_rst(ap_rst_n_inv);
    grp_getColorDistance_fu_179->ap_start(grp_getColorDistance_fu_179_ap_start);
    grp_getColorDistance_fu_179->ap_done(grp_getColorDistance_fu_179_ap_done);
    grp_getColorDistance_fu_179->ap_idle(grp_getColorDistance_fu_179_ap_idle);
    grp_getColorDistance_fu_179->ap_ready(grp_getColorDistance_fu_179_ap_ready);
    grp_getColorDistance_fu_179->pixel_TVALID(ap_var_for_const0);
    grp_getColorDistance_fu_179->ap_ce(grp_getColorDistance_fu_179_ap_ce);
    grp_getColorDistance_fu_179->pixel_TDATA(in_pixel6_phi_reg_138);
    grp_getColorDistance_fu_179->pixel_TREADY(grp_getColorDistance_fu_179_pixel_TREADY);
    grp_getColorDistance_fu_179->color(p_color_array_load_0_s_reg_374);
    grp_getColorDistance_fu_179->ap_return(grp_getColorDistance_fu_179_ap_return);
    grp_getColorDistance_fu_179->pixel_TDATA_blk_n(grp_getColorDistance_fu_179_pixel_TDATA_blk_n);
    grp_getColorDistance_fu_186 = new getColorDistance("grp_getColorDistance_fu_186");
    grp_getColorDistance_fu_186->ap_clk(ap_clk);
    grp_getColorDistance_fu_186->ap_rst(ap_rst_n_inv);
    grp_getColorDistance_fu_186->ap_start(grp_getColorDistance_fu_186_ap_start);
    grp_getColorDistance_fu_186->ap_done(grp_getColorDistance_fu_186_ap_done);
    grp_getColorDistance_fu_186->ap_idle(grp_getColorDistance_fu_186_ap_idle);
    grp_getColorDistance_fu_186->ap_ready(grp_getColorDistance_fu_186_ap_ready);
    grp_getColorDistance_fu_186->pixel_TVALID(ap_var_for_const0);
    grp_getColorDistance_fu_186->ap_ce(grp_getColorDistance_fu_186_ap_ce);
    grp_getColorDistance_fu_186->pixel_TDATA(in_pixel6_phi_reg_138);
    grp_getColorDistance_fu_186->pixel_TREADY(grp_getColorDistance_fu_186_pixel_TREADY);
    grp_getColorDistance_fu_186->color(p_color_array_load_1_s_reg_379);
    grp_getColorDistance_fu_186->ap_return(grp_getColorDistance_fu_186_ap_return);
    grp_getColorDistance_fu_186->pixel_TDATA_blk_n(grp_getColorDistance_fu_186_pixel_TDATA_blk_n);
    grp_getColorDistance_fu_193 = new getColorDistance("grp_getColorDistance_fu_193");
    grp_getColorDistance_fu_193->ap_clk(ap_clk);
    grp_getColorDistance_fu_193->ap_rst(ap_rst_n_inv);
    grp_getColorDistance_fu_193->ap_start(grp_getColorDistance_fu_193_ap_start);
    grp_getColorDistance_fu_193->ap_done(grp_getColorDistance_fu_193_ap_done);
    grp_getColorDistance_fu_193->ap_idle(grp_getColorDistance_fu_193_ap_idle);
    grp_getColorDistance_fu_193->ap_ready(grp_getColorDistance_fu_193_ap_ready);
    grp_getColorDistance_fu_193->pixel_TVALID(ap_var_for_const0);
    grp_getColorDistance_fu_193->ap_ce(grp_getColorDistance_fu_193_ap_ce);
    grp_getColorDistance_fu_193->pixel_TDATA(ap_reg_pp0_iter2_in_pixel6_phi_reg_138);
    grp_getColorDistance_fu_193->pixel_TREADY(grp_getColorDistance_fu_193_pixel_TREADY);
    grp_getColorDistance_fu_193->color(p_color_array_load_2_s_reg_384);
    grp_getColorDistance_fu_193->ap_return(grp_getColorDistance_fu_193_ap_return);
    grp_getColorDistance_fu_193->pixel_TDATA_blk_n(grp_getColorDistance_fu_193_pixel_TDATA_blk_n);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_pixel_0_vld_out );
    sensitive << ( do_init_reg_93 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_pixel_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter19 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_pixel_0_vld_out );
    sensitive << ( do_init_reg_93 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_pixel_1_ack_in );
    sensitive << ( ap_block_state20_io );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_block_state21_io );
    sensitive << ( ap_enable_reg_pp0_iter19 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_pixel_0_vld_out );
    sensitive << ( do_init_reg_93 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_pixel_1_ack_in );
    sensitive << ( ap_block_state20_io );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_block_state21_io );
    sensitive << ( ap_enable_reg_pp0_iter19 );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter8);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter13);

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter14);

    SC_METHOD(thread_ap_block_state17_pp0_stage0_iter15);

    SC_METHOD(thread_ap_block_state18_pp0_stage0_iter16);

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter17);

    SC_METHOD(thread_ap_block_state20_io);
    sensitive << ( out_pixel_1_ack_in );
    sensitive << ( ap_reg_pp0_iter17_exitcond_reg_365 );

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter18);

    SC_METHOD(thread_ap_block_state21_io);
    sensitive << ( out_pixel_1_ack_in );
    sensitive << ( ap_reg_pp0_iter18_exitcond_reg_365 );

    SC_METHOD(thread_ap_block_state21_pp0_stage0_iter19);
    sensitive << ( out_pixel_1_ack_in );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( in_pixel_0_vld_out );
    sensitive << ( do_init_reg_93 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_219);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_condition_449);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_reg_pp0_iter18_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_enable_reg_pp0_iter16 );

    SC_METHOD(thread_ap_idle_pp0_0to18);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_enable_reg_pp0_iter16 );

    SC_METHOD(thread_ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( in_pixel6_rewind_reg_124 );
    sensitive << ( in_pixel6_phi_reg_138 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_minimumDistance4_phi_fu_155_p6);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( minimumDistance4_reg_151 );
    sensitive << ( ap_reg_pp0_iter16_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( distance_0_minimumDi_2_fu_332_p3 );

    SC_METHOD(thread_ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6);
    sensitive << ( ap_reg_pp0_iter17_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( minimumDistanceIndex_1_reg_165 );
    sensitive << ( newSel3_reg_420 );

    SC_METHOD(thread_ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6);
    sensitive << ( exitcond_reg_365 );
    sensitive << ( minimumDistanceIndex_3_reg_109 );
    sensitive << ( tmp_3_reg_360 );
    sensitive << ( ap_condition_219 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138);

    SC_METHOD(thread_ap_ready);
    sensitive << ( exitcond_fu_214_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to18 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_cond_fu_220_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( minimumDistanceIndex_3_reg_109 );

    SC_METHOD(thread_distance_0_minimumDi_1_fu_275_p3);
    sensitive << ( tmp_2_1_fu_269_p2 );
    sensitive << ( minimumDistance_2_1_s_fu_266_p1 );
    sensitive << ( distance_0_minimumDi_fu_258_p3 );

    SC_METHOD(thread_distance_0_minimumDi_2_fu_332_p3);
    sensitive << ( distance_0_minimumDi_1_reg_409 );
    sensitive << ( minimumDistance_2_2_s_fu_287_p1 );
    sensitive << ( tmp_2_2_fu_290_p2 );

    SC_METHOD(thread_distance_0_minimumDi_fu_258_p3);
    sensitive << ( tmp_2_fu_252_p2 );
    sensitive << ( ap_phi_mux_minimumDistance4_phi_fu_155_p6 );
    sensitive << ( minimumDistance_2_ex_fu_249_p1 );

    SC_METHOD(thread_exitcond_fu_214_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_2_fu_204_p2 );

    SC_METHOD(thread_grp_getColorDistance_fu_179_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_getColorDistance_fu_179_ap_start);
    sensitive << ( ap_reg_grp_getColorDistance_fu_179_ap_start );

    SC_METHOD(thread_grp_getColorDistance_fu_186_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_getColorDistance_fu_186_ap_start);
    sensitive << ( ap_reg_grp_getColorDistance_fu_186_ap_start );

    SC_METHOD(thread_grp_getColorDistance_fu_193_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_getColorDistance_fu_193_ap_start);
    sensitive << ( ap_reg_grp_getColorDistance_fu_193_ap_start );

    SC_METHOD(thread_i_2_fu_204_p2);
    sensitive << ( minimumDistanceIndex_fu_200_p1 );

    SC_METHOD(thread_in_pixel_0_ack_in);
    sensitive << ( in_pixel_0_state );

    SC_METHOD(thread_in_pixel_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( do_init_reg_93 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_pixel_0_data_out);
    sensitive << ( in_pixel_0_payload_A );
    sensitive << ( in_pixel_0_payload_B );
    sensitive << ( in_pixel_0_sel );

    SC_METHOD(thread_in_pixel_0_load_A);
    sensitive << ( in_pixel_0_sel_wr );
    sensitive << ( in_pixel_0_state_cmp_full );

    SC_METHOD(thread_in_pixel_0_load_B);
    sensitive << ( in_pixel_0_sel_wr );
    sensitive << ( in_pixel_0_state_cmp_full );

    SC_METHOD(thread_in_pixel_0_sel);
    sensitive << ( in_pixel_0_sel_rd );

    SC_METHOD(thread_in_pixel_0_state_cmp_full);
    sensitive << ( in_pixel_0_state );

    SC_METHOD(thread_in_pixel_0_vld_in);
    sensitive << ( in_pixel_TVALID );

    SC_METHOD(thread_in_pixel_0_vld_out);
    sensitive << ( in_pixel_0_state );

    SC_METHOD(thread_in_pixel_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( do_init_reg_93 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( in_pixel_0_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in_pixel_TREADY);
    sensitive << ( in_pixel_0_state );

    SC_METHOD(thread_in_pixel_assign_fu_344_p3);
    sensitive << ( ap_reg_pp0_iter17_in_pixel6_phi_reg_138 );
    sensitive << ( tmp_fu_339_p2 );

    SC_METHOD(thread_minimumDistanceIndex_2_fu_283_p1);
    sensitive << ( ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_109 );

    SC_METHOD(thread_minimumDistanceIndex_fu_200_p1);
    sensitive << ( ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6 );

    SC_METHOD(thread_minimumDistance_2_1_s_fu_266_p1);
    sensitive << ( minimumDistance_2_1_reg_394 );

    SC_METHOD(thread_minimumDistance_2_2_s_fu_287_p1);
    sensitive << ( minimumDistance_2_2_reg_415 );

    SC_METHOD(thread_minimumDistance_2_ex_fu_249_p1);
    sensitive << ( minimumDistance_2_reg_389 );

    SC_METHOD(thread_newSel1_fu_317_p3);
    sensitive << ( tmp_2_reg_399 );
    sensitive << ( ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6 );
    sensitive << ( minimumDistanceIndex_2_fu_283_p1 );

    SC_METHOD(thread_newSel3_fu_324_p3);
    sensitive << ( or_cond_fu_312_p2 );
    sensitive << ( newSel_cast_fu_308_p1 );
    sensitive << ( newSel1_fu_317_p3 );

    SC_METHOD(thread_newSel_cast_fu_308_p1);
    sensitive << ( newSel_fu_303_p2 );

    SC_METHOD(thread_newSel_fu_303_p2);
    sensitive << ( ap_reg_pp0_iter16_minimumDistanceIndex_reg_355 );
    sensitive << ( newSel_v_cast_cast_fu_295_p3 );

    SC_METHOD(thread_newSel_v_cast_cast_fu_295_p3);
    sensitive << ( tmp_2_2_fu_290_p2 );

    SC_METHOD(thread_or_cond_fu_312_p2);
    sensitive << ( tmp_2_1_reg_404 );
    sensitive << ( tmp_2_2_fu_290_p2 );

    SC_METHOD(thread_out_pixel_1_ack_in);
    sensitive << ( out_pixel_1_state );

    SC_METHOD(thread_out_pixel_1_ack_out);
    sensitive << ( out_pixel_TREADY );

    SC_METHOD(thread_out_pixel_1_data_out);
    sensitive << ( out_pixel_1_payload_A );
    sensitive << ( out_pixel_1_payload_B );
    sensitive << ( out_pixel_1_sel );

    SC_METHOD(thread_out_pixel_1_load_A);
    sensitive << ( out_pixel_1_sel_wr );
    sensitive << ( out_pixel_1_state_cmp_full );

    SC_METHOD(thread_out_pixel_1_load_B);
    sensitive << ( out_pixel_1_sel_wr );
    sensitive << ( out_pixel_1_state_cmp_full );

    SC_METHOD(thread_out_pixel_1_sel);
    sensitive << ( out_pixel_1_sel_rd );

    SC_METHOD(thread_out_pixel_1_state_cmp_full);
    sensitive << ( out_pixel_1_state );

    SC_METHOD(thread_out_pixel_1_vld_in);
    sensitive << ( ap_reg_pp0_iter17_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_pixel_1_vld_out);
    sensitive << ( out_pixel_1_state );

    SC_METHOD(thread_out_pixel_TDATA);
    sensitive << ( out_pixel_1_data_out );

    SC_METHOD(thread_out_pixel_TDATA_blk_n);
    sensitive << ( ap_reg_pp0_iter17_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_reg_pp0_iter18_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter19 );
    sensitive << ( out_pixel_1_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_out_pixel_TVALID);
    sensitive << ( out_pixel_1_state );

    SC_METHOD(thread_p_color_array_load_0_s_fu_226_p3);
    sensitive << ( cond_fu_220_p2 );

    SC_METHOD(thread_p_color_array_load_1_s_fu_234_p3);
    sensitive << ( cond_fu_220_p2 );

    SC_METHOD(thread_p_color_array_load_2_s_fu_242_p3);
    sensitive << ( cond_reg_369 );

    SC_METHOD(thread_tmp_2_1_fu_269_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter16 );
    sensitive << ( minimumDistance_2_1_s_fu_266_p1 );
    sensitive << ( distance_0_minimumDi_fu_258_p3 );

    SC_METHOD(thread_tmp_2_2_fu_290_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( distance_0_minimumDi_1_reg_409 );
    sensitive << ( ap_enable_reg_pp0_iter17 );
    sensitive << ( minimumDistance_2_2_s_fu_287_p1 );

    SC_METHOD(thread_tmp_2_fu_252_p2);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter16 );
    sensitive << ( ap_phi_mux_minimumDistance4_phi_fu_155_p6 );
    sensitive << ( minimumDistance_2_ex_fu_249_p1 );

    SC_METHOD(thread_tmp_3_fu_210_p1);
    sensitive << ( i_2_fu_204_p2 );

    SC_METHOD(thread_tmp_fu_339_p2);
    sensitive << ( ap_reg_pp0_iter17_exitcond_reg_365 );
    sensitive << ( ap_enable_reg_pp0_iter18 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( newSel3_reg_420 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "01";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter18 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter19 = SC_LOGIC_0;
    in_pixel_0_sel_rd = SC_LOGIC_0;
    in_pixel_0_sel_wr = SC_LOGIC_0;
    in_pixel_0_state = "00";
    out_pixel_1_sel_rd = SC_LOGIC_0;
    out_pixel_1_sel_wr = SC_LOGIC_0;
    out_pixel_1_state = "00";
    ap_enable_reg_pp0_iter17 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter14 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter15 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter16 = SC_LOGIC_0;
    ap_reg_grp_getColorDistance_fu_179_ap_start = SC_LOGIC_0;
    ap_reg_grp_getColorDistance_fu_186_ap_start = SC_LOGIC_0;
    ap_reg_grp_getColorDistance_fu_193_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getPixelClassification_Stream_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, out_pixel_TREADY, "(port)out_pixel_TREADY");
    sc_trace(mVcdFile, in_pixel_TDATA, "(port)in_pixel_TDATA");
    sc_trace(mVcdFile, in_pixel_TVALID, "(port)in_pixel_TVALID");
    sc_trace(mVcdFile, in_pixel_TREADY, "(port)in_pixel_TREADY");
    sc_trace(mVcdFile, out_pixel_TDATA, "(port)out_pixel_TDATA");
    sc_trace(mVcdFile, out_pixel_TVALID, "(port)out_pixel_TVALID");
    sc_trace(mVcdFile, StreamClk, "(port)StreamClk");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, exitcond_fu_214_p2, "exitcond_fu_214_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, in_pixel_0_vld_out, "in_pixel_0_vld_out");
    sc_trace(mVcdFile, do_init_reg_93, "do_init_reg_93");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter8, "ap_block_state10_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter9, "ap_block_state11_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter10, "ap_block_state12_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter11, "ap_block_state13_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter12, "ap_block_state14_pp0_stage0_iter12");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter13, "ap_block_state15_pp0_stage0_iter13");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter14, "ap_block_state16_pp0_stage0_iter14");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage0_iter15, "ap_block_state17_pp0_stage0_iter15");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage0_iter16, "ap_block_state18_pp0_stage0_iter16");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter17, "ap_block_state19_pp0_stage0_iter17");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter18, "ap_block_state20_pp0_stage0_iter18");
    sc_trace(mVcdFile, out_pixel_1_ack_in, "out_pixel_1_ack_in");
    sc_trace(mVcdFile, exitcond_reg_365, "exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter17_exitcond_reg_365, "ap_reg_pp0_iter17_exitcond_reg_365");
    sc_trace(mVcdFile, ap_block_state20_io, "ap_block_state20_io");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter18, "ap_enable_reg_pp0_iter18");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage0_iter19, "ap_block_state21_pp0_stage0_iter19");
    sc_trace(mVcdFile, ap_reg_pp0_iter18_exitcond_reg_365, "ap_reg_pp0_iter18_exitcond_reg_365");
    sc_trace(mVcdFile, ap_block_state21_io, "ap_block_state21_io");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter19, "ap_enable_reg_pp0_iter19");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, in_pixel_0_data_out, "in_pixel_0_data_out");
    sc_trace(mVcdFile, in_pixel_0_vld_in, "in_pixel_0_vld_in");
    sc_trace(mVcdFile, in_pixel_0_ack_in, "in_pixel_0_ack_in");
    sc_trace(mVcdFile, in_pixel_0_ack_out, "in_pixel_0_ack_out");
    sc_trace(mVcdFile, in_pixel_0_payload_A, "in_pixel_0_payload_A");
    sc_trace(mVcdFile, in_pixel_0_payload_B, "in_pixel_0_payload_B");
    sc_trace(mVcdFile, in_pixel_0_sel_rd, "in_pixel_0_sel_rd");
    sc_trace(mVcdFile, in_pixel_0_sel_wr, "in_pixel_0_sel_wr");
    sc_trace(mVcdFile, in_pixel_0_sel, "in_pixel_0_sel");
    sc_trace(mVcdFile, in_pixel_0_load_A, "in_pixel_0_load_A");
    sc_trace(mVcdFile, in_pixel_0_load_B, "in_pixel_0_load_B");
    sc_trace(mVcdFile, in_pixel_0_state, "in_pixel_0_state");
    sc_trace(mVcdFile, in_pixel_0_state_cmp_full, "in_pixel_0_state_cmp_full");
    sc_trace(mVcdFile, out_pixel_1_data_out, "out_pixel_1_data_out");
    sc_trace(mVcdFile, out_pixel_1_vld_in, "out_pixel_1_vld_in");
    sc_trace(mVcdFile, out_pixel_1_vld_out, "out_pixel_1_vld_out");
    sc_trace(mVcdFile, out_pixel_1_ack_out, "out_pixel_1_ack_out");
    sc_trace(mVcdFile, out_pixel_1_payload_A, "out_pixel_1_payload_A");
    sc_trace(mVcdFile, out_pixel_1_payload_B, "out_pixel_1_payload_B");
    sc_trace(mVcdFile, out_pixel_1_sel_rd, "out_pixel_1_sel_rd");
    sc_trace(mVcdFile, out_pixel_1_sel_wr, "out_pixel_1_sel_wr");
    sc_trace(mVcdFile, out_pixel_1_sel, "out_pixel_1_sel");
    sc_trace(mVcdFile, out_pixel_1_load_A, "out_pixel_1_load_A");
    sc_trace(mVcdFile, out_pixel_1_load_B, "out_pixel_1_load_B");
    sc_trace(mVcdFile, out_pixel_1_state, "out_pixel_1_state");
    sc_trace(mVcdFile, out_pixel_1_state_cmp_full, "out_pixel_1_state_cmp_full");
    sc_trace(mVcdFile, in_pixel_TDATA_blk_n, "in_pixel_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, out_pixel_TDATA_blk_n, "out_pixel_TDATA_blk_n");
    sc_trace(mVcdFile, minimumDistanceIndex_3_reg_109, "minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_109, "ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_109");
    sc_trace(mVcdFile, in_pixel6_rewind_reg_124, "in_pixel6_rewind_reg_124");
    sc_trace(mVcdFile, in_pixel6_phi_reg_138, "in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_in_pixel6_phi_reg_138, "ap_reg_pp0_iter2_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_in_pixel6_phi_reg_138, "ap_reg_pp0_iter3_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_in_pixel6_phi_reg_138, "ap_reg_pp0_iter4_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter5_in_pixel6_phi_reg_138, "ap_reg_pp0_iter5_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter6_in_pixel6_phi_reg_138, "ap_reg_pp0_iter6_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_in_pixel6_phi_reg_138, "ap_reg_pp0_iter7_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_in_pixel6_phi_reg_138, "ap_reg_pp0_iter8_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_in_pixel6_phi_reg_138, "ap_reg_pp0_iter9_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_in_pixel6_phi_reg_138, "ap_reg_pp0_iter10_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_in_pixel6_phi_reg_138, "ap_reg_pp0_iter11_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_in_pixel6_phi_reg_138, "ap_reg_pp0_iter12_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_in_pixel6_phi_reg_138, "ap_reg_pp0_iter13_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_in_pixel6_phi_reg_138, "ap_reg_pp0_iter14_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_in_pixel6_phi_reg_138, "ap_reg_pp0_iter15_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_in_pixel6_phi_reg_138, "ap_reg_pp0_iter16_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_reg_pp0_iter17_in_pixel6_phi_reg_138, "ap_reg_pp0_iter17_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, minimumDistance4_reg_151, "minimumDistance4_reg_151");
    sc_trace(mVcdFile, minimumDistanceIndex_1_reg_165, "minimumDistanceIndex_1_reg_165");
    sc_trace(mVcdFile, minimumDistanceIndex_fu_200_p1, "minimumDistanceIndex_fu_200_p1");
    sc_trace(mVcdFile, minimumDistanceIndex_reg_355, "minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter1_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter2_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter3_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter4_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter5_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter5_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter6_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter6_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter7_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter8_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter9_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter10_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter11_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter12_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter13_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter14_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter15_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_minimumDistanceIndex_reg_355, "ap_reg_pp0_iter16_minimumDistanceIndex_reg_355");
    sc_trace(mVcdFile, tmp_3_fu_210_p1, "tmp_3_fu_210_p1");
    sc_trace(mVcdFile, tmp_3_reg_360, "tmp_3_reg_360");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_reg_365, "ap_reg_pp0_iter1_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_exitcond_reg_365, "ap_reg_pp0_iter2_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_exitcond_reg_365, "ap_reg_pp0_iter3_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter4_exitcond_reg_365, "ap_reg_pp0_iter4_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter5_exitcond_reg_365, "ap_reg_pp0_iter5_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter6_exitcond_reg_365, "ap_reg_pp0_iter6_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter7_exitcond_reg_365, "ap_reg_pp0_iter7_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter8_exitcond_reg_365, "ap_reg_pp0_iter8_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter9_exitcond_reg_365, "ap_reg_pp0_iter9_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter10_exitcond_reg_365, "ap_reg_pp0_iter10_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter11_exitcond_reg_365, "ap_reg_pp0_iter11_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter12_exitcond_reg_365, "ap_reg_pp0_iter12_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter13_exitcond_reg_365, "ap_reg_pp0_iter13_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter14_exitcond_reg_365, "ap_reg_pp0_iter14_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter15_exitcond_reg_365, "ap_reg_pp0_iter15_exitcond_reg_365");
    sc_trace(mVcdFile, ap_reg_pp0_iter16_exitcond_reg_365, "ap_reg_pp0_iter16_exitcond_reg_365");
    sc_trace(mVcdFile, cond_fu_220_p2, "cond_fu_220_p2");
    sc_trace(mVcdFile, cond_reg_369, "cond_reg_369");
    sc_trace(mVcdFile, p_color_array_load_0_s_fu_226_p3, "p_color_array_load_0_s_fu_226_p3");
    sc_trace(mVcdFile, p_color_array_load_0_s_reg_374, "p_color_array_load_0_s_reg_374");
    sc_trace(mVcdFile, p_color_array_load_1_s_fu_234_p3, "p_color_array_load_1_s_fu_234_p3");
    sc_trace(mVcdFile, p_color_array_load_1_s_reg_379, "p_color_array_load_1_s_reg_379");
    sc_trace(mVcdFile, p_color_array_load_2_s_fu_242_p3, "p_color_array_load_2_s_fu_242_p3");
    sc_trace(mVcdFile, p_color_array_load_2_s_reg_384, "p_color_array_load_2_s_reg_384");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_return, "grp_getColorDistance_fu_179_ap_return");
    sc_trace(mVcdFile, minimumDistance_2_reg_389, "minimumDistance_2_reg_389");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_return, "grp_getColorDistance_fu_186_ap_return");
    sc_trace(mVcdFile, minimumDistance_2_1_reg_394, "minimumDistance_2_1_reg_394");
    sc_trace(mVcdFile, tmp_2_fu_252_p2, "tmp_2_fu_252_p2");
    sc_trace(mVcdFile, tmp_2_reg_399, "tmp_2_reg_399");
    sc_trace(mVcdFile, tmp_2_1_fu_269_p2, "tmp_2_1_fu_269_p2");
    sc_trace(mVcdFile, tmp_2_1_reg_404, "tmp_2_1_reg_404");
    sc_trace(mVcdFile, distance_0_minimumDi_1_fu_275_p3, "distance_0_minimumDi_1_fu_275_p3");
    sc_trace(mVcdFile, distance_0_minimumDi_1_reg_409, "distance_0_minimumDi_1_reg_409");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_return, "grp_getColorDistance_fu_193_ap_return");
    sc_trace(mVcdFile, minimumDistance_2_2_reg_415, "minimumDistance_2_2_reg_415");
    sc_trace(mVcdFile, newSel3_fu_324_p3, "newSel3_fu_324_p3");
    sc_trace(mVcdFile, newSel3_reg_420, "newSel3_reg_420");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter17, "ap_enable_reg_pp0_iter17");
    sc_trace(mVcdFile, distance_0_minimumDi_2_fu_332_p3, "distance_0_minimumDi_2_fu_332_p3");
    sc_trace(mVcdFile, in_pixel_assign_fu_344_p3, "in_pixel_assign_fu_344_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter14, "ap_enable_reg_pp0_iter14");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter15, "ap_enable_reg_pp0_iter15");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter16, "ap_enable_reg_pp0_iter16");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_start, "grp_getColorDistance_fu_179_ap_start");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_done, "grp_getColorDistance_fu_179_ap_done");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_idle, "grp_getColorDistance_fu_179_ap_idle");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_ready, "grp_getColorDistance_fu_179_ap_ready");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_ap_ce, "grp_getColorDistance_fu_179_ap_ce");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_pixel_TREADY, "grp_getColorDistance_fu_179_pixel_TREADY");
    sc_trace(mVcdFile, grp_getColorDistance_fu_179_pixel_TDATA_blk_n, "grp_getColorDistance_fu_179_pixel_TDATA_blk_n");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_start, "grp_getColorDistance_fu_186_ap_start");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_done, "grp_getColorDistance_fu_186_ap_done");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_idle, "grp_getColorDistance_fu_186_ap_idle");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_ready, "grp_getColorDistance_fu_186_ap_ready");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_ap_ce, "grp_getColorDistance_fu_186_ap_ce");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_pixel_TREADY, "grp_getColorDistance_fu_186_pixel_TREADY");
    sc_trace(mVcdFile, grp_getColorDistance_fu_186_pixel_TDATA_blk_n, "grp_getColorDistance_fu_186_pixel_TDATA_blk_n");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_start, "grp_getColorDistance_fu_193_ap_start");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_done, "grp_getColorDistance_fu_193_ap_done");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_idle, "grp_getColorDistance_fu_193_ap_idle");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_ready, "grp_getColorDistance_fu_193_ap_ready");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_ap_ce, "grp_getColorDistance_fu_193_ap_ce");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_pixel_TREADY, "grp_getColorDistance_fu_193_pixel_TREADY");
    sc_trace(mVcdFile, grp_getColorDistance_fu_193_pixel_TDATA_blk_n, "grp_getColorDistance_fu_193_pixel_TDATA_blk_n");
    sc_trace(mVcdFile, ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6, "ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6");
    sc_trace(mVcdFile, ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6, "ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138, "ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138");
    sc_trace(mVcdFile, ap_phi_mux_minimumDistance4_phi_fu_155_p6, "ap_phi_mux_minimumDistance4_phi_fu_155_p6");
    sc_trace(mVcdFile, ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6, "ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6");
    sc_trace(mVcdFile, ap_reg_grp_getColorDistance_fu_179_ap_start, "ap_reg_grp_getColorDistance_fu_179_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_getColorDistance_fu_186_ap_start, "ap_reg_grp_getColorDistance_fu_186_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_getColorDistance_fu_193_ap_start, "ap_reg_grp_getColorDistance_fu_193_ap_start");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, i_2_fu_204_p2, "i_2_fu_204_p2");
    sc_trace(mVcdFile, minimumDistance_2_ex_fu_249_p1, "minimumDistance_2_ex_fu_249_p1");
    sc_trace(mVcdFile, minimumDistance_2_1_s_fu_266_p1, "minimumDistance_2_1_s_fu_266_p1");
    sc_trace(mVcdFile, distance_0_minimumDi_fu_258_p3, "distance_0_minimumDi_fu_258_p3");
    sc_trace(mVcdFile, minimumDistance_2_2_s_fu_287_p1, "minimumDistance_2_2_s_fu_287_p1");
    sc_trace(mVcdFile, tmp_2_2_fu_290_p2, "tmp_2_2_fu_290_p2");
    sc_trace(mVcdFile, newSel_v_cast_cast_fu_295_p3, "newSel_v_cast_cast_fu_295_p3");
    sc_trace(mVcdFile, newSel_fu_303_p2, "newSel_fu_303_p2");
    sc_trace(mVcdFile, minimumDistanceIndex_2_fu_283_p1, "minimumDistanceIndex_2_fu_283_p1");
    sc_trace(mVcdFile, or_cond_fu_312_p2, "or_cond_fu_312_p2");
    sc_trace(mVcdFile, newSel_cast_fu_308_p1, "newSel_cast_fu_308_p1");
    sc_trace(mVcdFile, newSel1_fu_317_p3, "newSel1_fu_317_p3");
    sc_trace(mVcdFile, tmp_fu_339_p2, "tmp_fu_339_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to18, "ap_idle_pp0_0to18");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_219, "ap_condition_219");
    sc_trace(mVcdFile, ap_condition_449, "ap_condition_449");
#endif

    }
    mHdltvinHandle.open("getPixelClassification_Stream.hdltvin.dat");
    mHdltvoutHandle.open("getPixelClassification_Stream.hdltvout.dat");
}

getPixelClassification_Stream::~getPixelClassification_Stream() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete getPixelClassification_Stream_AXILiteS_s_axi_U;
    delete grp_getColorDistance_fu_179;
    delete grp_getColorDistance_fu_186;
    delete grp_getColorDistance_fu_193;
}

void getPixelClassification_Stream::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void getPixelClassification_Stream::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter14 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter14 = ap_enable_reg_pp0_iter13.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter15 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter15 = ap_enable_reg_pp0_iter14.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter16 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter16 = ap_enable_reg_pp0_iter15.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter17 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter17 = ap_enable_reg_pp0_iter16.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter18 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter18 = ap_enable_reg_pp0_iter17.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter19 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter19 = ap_enable_reg_pp0_iter18.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter19 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_getColorDistance_fu_179_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_reg_grp_getColorDistance_fu_179_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_getColorDistance_fu_179_ap_ready.read())) {
            ap_reg_grp_getColorDistance_fu_179_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_getColorDistance_fu_186_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            ap_reg_grp_getColorDistance_fu_186_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_getColorDistance_fu_186_ap_ready.read())) {
            ap_reg_grp_getColorDistance_fu_186_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_grp_getColorDistance_fu_193_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
            ap_reg_grp_getColorDistance_fu_193_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_getColorDistance_fu_193_ap_ready.read())) {
            ap_reg_grp_getColorDistance_fu_193_ap_start = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_365.read(), ap_const_lv1_0))) {
        do_init_reg_93 = ap_const_lv1_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_reg_365.read())))) {
        do_init_reg_93 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_condition_449.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(do_init_reg_93.read(), ap_const_lv1_0)) {
            in_pixel6_phi_reg_138 = ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read())) {
            in_pixel6_phi_reg_138 = in_pixel_0_data_out.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            in_pixel6_phi_reg_138 = ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_pixel_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_vld_out.read()))) {
            in_pixel_0_sel_rd =  (sc_logic) (~in_pixel_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_pixel_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_ack_in.read()))) {
            in_pixel_0_sel_wr =  (sc_logic) (~in_pixel_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_pixel_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_2)))) {
            in_pixel_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_1)))) {
            in_pixel_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_pixel_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_ack_out.read()))))) {
            in_pixel_0_state = ap_const_lv2_3;
        } else {
            in_pixel_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter16_exitcond_reg_365.read()))) {
        minimumDistance4_reg_151 = distance_0_minimumDi_2_fu_332_p3.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter17.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter16_exitcond_reg_365.read())))) {
        minimumDistance4_reg_151 = ap_const_lv32_7FFFFFFF;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_reg_pp0_iter17_exitcond_reg_365.read(), ap_const_lv1_0))) {
        minimumDistanceIndex_1_reg_165 = newSel3_reg_420.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter17_exitcond_reg_365.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        minimumDistanceIndex_1_reg_165 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_reg_365.read(), ap_const_lv1_0))) {
        minimumDistanceIndex_3_reg_109 = tmp_3_reg_360.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_reg_365.read())))) {
        minimumDistanceIndex_3_reg_109 = ap_const_lv2_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pixel_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_vld_out.read()))) {
            out_pixel_1_sel_rd =  (sc_logic) (~out_pixel_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pixel_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_ack_in.read()))) {
            out_pixel_1_sel_wr =  (sc_logic) (~out_pixel_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_pixel_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_pixel_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_pixel_1_state.read())))) {
            out_pixel_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_pixel_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_pixel_1_state.read())))) {
            out_pixel_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_pixel_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_pixel_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_pixel_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_ack_out.read()))))) {
            out_pixel_1_state = ap_const_lv2_3;
        } else {
            out_pixel_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        ap_reg_pp0_iter10_exitcond_reg_365 = ap_reg_pp0_iter9_exitcond_reg_365.read();
        ap_reg_pp0_iter10_in_pixel6_phi_reg_138 = ap_reg_pp0_iter9_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter10_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter9_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter11_exitcond_reg_365 = ap_reg_pp0_iter10_exitcond_reg_365.read();
        ap_reg_pp0_iter11_in_pixel6_phi_reg_138 = ap_reg_pp0_iter10_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter10_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter11_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter10_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter12_exitcond_reg_365 = ap_reg_pp0_iter11_exitcond_reg_365.read();
        ap_reg_pp0_iter12_in_pixel6_phi_reg_138 = ap_reg_pp0_iter11_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter11_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter12_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter11_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter13_exitcond_reg_365 = ap_reg_pp0_iter12_exitcond_reg_365.read();
        ap_reg_pp0_iter13_in_pixel6_phi_reg_138 = ap_reg_pp0_iter12_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter12_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter13_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter12_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter14_exitcond_reg_365 = ap_reg_pp0_iter13_exitcond_reg_365.read();
        ap_reg_pp0_iter14_in_pixel6_phi_reg_138 = ap_reg_pp0_iter13_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter13_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter14_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter13_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter15_exitcond_reg_365 = ap_reg_pp0_iter14_exitcond_reg_365.read();
        ap_reg_pp0_iter15_in_pixel6_phi_reg_138 = ap_reg_pp0_iter14_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter14_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter15_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter14_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter16_exitcond_reg_365 = ap_reg_pp0_iter15_exitcond_reg_365.read();
        ap_reg_pp0_iter16_in_pixel6_phi_reg_138 = ap_reg_pp0_iter15_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter15_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter16_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter15_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter17_exitcond_reg_365 = ap_reg_pp0_iter16_exitcond_reg_365.read();
        ap_reg_pp0_iter17_in_pixel6_phi_reg_138 = ap_reg_pp0_iter16_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter18_exitcond_reg_365 = ap_reg_pp0_iter17_exitcond_reg_365.read();
        ap_reg_pp0_iter2_exitcond_reg_365 = ap_reg_pp0_iter1_exitcond_reg_365.read();
        ap_reg_pp0_iter2_in_pixel6_phi_reg_138 = in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter2_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter1_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter3_exitcond_reg_365 = ap_reg_pp0_iter2_exitcond_reg_365.read();
        ap_reg_pp0_iter3_in_pixel6_phi_reg_138 = ap_reg_pp0_iter2_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter2_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter3_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter2_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter4_exitcond_reg_365 = ap_reg_pp0_iter3_exitcond_reg_365.read();
        ap_reg_pp0_iter4_in_pixel6_phi_reg_138 = ap_reg_pp0_iter3_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter3_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter4_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter3_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter5_exitcond_reg_365 = ap_reg_pp0_iter4_exitcond_reg_365.read();
        ap_reg_pp0_iter5_in_pixel6_phi_reg_138 = ap_reg_pp0_iter4_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter4_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter5_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter4_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter6_exitcond_reg_365 = ap_reg_pp0_iter5_exitcond_reg_365.read();
        ap_reg_pp0_iter6_in_pixel6_phi_reg_138 = ap_reg_pp0_iter5_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter5_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter6_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter5_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter7_exitcond_reg_365 = ap_reg_pp0_iter6_exitcond_reg_365.read();
        ap_reg_pp0_iter7_in_pixel6_phi_reg_138 = ap_reg_pp0_iter6_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter6_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter7_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter6_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter8_exitcond_reg_365 = ap_reg_pp0_iter7_exitcond_reg_365.read();
        ap_reg_pp0_iter8_in_pixel6_phi_reg_138 = ap_reg_pp0_iter7_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter7_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter8_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter7_minimumDistanceIndex_reg_355.read();
        ap_reg_pp0_iter9_exitcond_reg_365 = ap_reg_pp0_iter8_exitcond_reg_365.read();
        ap_reg_pp0_iter9_in_pixel6_phi_reg_138 = ap_reg_pp0_iter8_in_pixel6_phi_reg_138.read();
        ap_reg_pp0_iter9_minimumDistanceIndex_3_reg_109 = ap_reg_pp0_iter8_minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter9_minimumDistanceIndex_reg_355 = ap_reg_pp0_iter8_minimumDistanceIndex_reg_355.read();
        distance_0_minimumDi_1_reg_409 = distance_0_minimumDi_1_fu_275_p3.read();
        minimumDistance_2_1_reg_394 = grp_getColorDistance_fu_186_ap_return.read();
        minimumDistance_2_2_reg_415 = grp_getColorDistance_fu_193_ap_return.read();
        minimumDistance_2_reg_389 = grp_getColorDistance_fu_179_ap_return.read();
        p_color_array_load_2_s_reg_384 = p_color_array_load_2_s_fu_242_p3.read();
        tmp_2_1_reg_404 = tmp_2_1_fu_269_p2.read();
        tmp_2_reg_399 = tmp_2_fu_252_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_reg_365 = exitcond_reg_365.read();
        ap_reg_pp0_iter1_minimumDistanceIndex_3_reg_109 = minimumDistanceIndex_3_reg_109.read();
        ap_reg_pp0_iter1_minimumDistanceIndex_reg_355 = minimumDistanceIndex_reg_355.read();
        cond_reg_369 = cond_fu_220_p2.read();
        exitcond_reg_365 = exitcond_fu_214_p2.read();
        minimumDistanceIndex_reg_355 = minimumDistanceIndex_fu_200_p1.read();
        p_color_array_load_0_s_reg_374 = p_color_array_load_0_s_fu_226_p3.read();
        p_color_array_load_1_s_reg_379 = p_color_array_load_1_s_fu_234_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_365.read()))) {
        in_pixel6_rewind_reg_124 = in_pixel6_phi_reg_138.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_load_A.read())) {
        in_pixel_0_payload_A = in_pixel_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_load_B.read())) {
        in_pixel_0_payload_B = in_pixel_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter17.read()))) {
        newSel3_reg_420 = newSel3_fu_324_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_load_A.read())) {
        out_pixel_1_payload_A = in_pixel_assign_fu_344_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_load_B.read())) {
        out_pixel_1_payload_B = in_pixel_assign_fu_344_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_3_reg_360 = tmp_3_fu_210_p1.read();
    }
}

void getPixelClassification_Stream::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void getPixelClassification_Stream::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getPixelClassification_Stream::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read())));
}

void getPixelClassification_Stream::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read())));
}

void getPixelClassification_Stream::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_out.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state20_io.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read())) || ((esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state21_io.read())) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read())));
}

void getPixelClassification_Stream::thread_ap_block_state10_pp0_stage0_iter8() {
    ap_block_state10_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state11_pp0_stage0_iter9() {
    ap_block_state11_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state12_pp0_stage0_iter10() {
    ap_block_state12_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state13_pp0_stage0_iter11() {
    ap_block_state13_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state14_pp0_stage0_iter12() {
    ap_block_state14_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state15_pp0_stage0_iter13() {
    ap_block_state15_pp0_stage0_iter13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state16_pp0_stage0_iter14() {
    ap_block_state16_pp0_stage0_iter14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state17_pp0_stage0_iter15() {
    ap_block_state17_pp0_stage0_iter15 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state18_pp0_stage0_iter16() {
    ap_block_state18_pp0_stage0_iter16 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state19_pp0_stage0_iter17() {
    ap_block_state19_pp0_stage0_iter17 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state20_io() {
    ap_block_state20_io = (esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter17_exitcond_reg_365.read()));
}

void getPixelClassification_Stream::thread_ap_block_state20_pp0_stage0_iter18() {
    ap_block_state20_pp0_stage0_iter18 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state21_io() {
    ap_block_state21_io = (esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter18_exitcond_reg_365.read()));
}

void getPixelClassification_Stream::thread_ap_block_state21_pp0_stage0_iter19() {
    ap_block_state21_pp0_stage0_iter19 = esl_seteq<1,1,1>(ap_const_logic_0, out_pixel_1_ack_in.read());
}

void getPixelClassification_Stream::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_logic_0, in_pixel_0_vld_out.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()));
}

void getPixelClassification_Stream::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getPixelClassification_Stream::thread_ap_condition_219() {
    ap_condition_219 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void getPixelClassification_Stream::thread_ap_condition_449() {
    ap_condition_449 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void getPixelClassification_Stream::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter18_exitcond_reg_365.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getPixelClassification_Stream::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void getPixelClassification_Stream::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter19.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_idle_pp0_0to18() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter16.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter17.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter18.read()))) {
        ap_idle_pp0_0to18 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to18 = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_365.read()))) {
        ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6 = in_pixel6_phi_reg_138.read();
    } else {
        ap_phi_mux_in_pixel6_rewind_phi_fu_128_p6 = in_pixel6_rewind_reg_124.read();
    }
}

void getPixelClassification_Stream::thread_ap_phi_mux_minimumDistance4_phi_fu_155_p6() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter17.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter16_exitcond_reg_365.read())) {
            ap_phi_mux_minimumDistance4_phi_fu_155_p6 = ap_const_lv32_7FFFFFFF;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter16_exitcond_reg_365.read())) {
            ap_phi_mux_minimumDistance4_phi_fu_155_p6 = distance_0_minimumDi_2_fu_332_p3.read();
        } else {
            ap_phi_mux_minimumDistance4_phi_fu_155_p6 = minimumDistance4_reg_151.read();
        }
    } else {
        ap_phi_mux_minimumDistance4_phi_fu_155_p6 = minimumDistance4_reg_151.read();
    }
}

void getPixelClassification_Stream::thread_ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter17_exitcond_reg_365.read())) {
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6 = ap_const_lv32_0;
        } else if (esl_seteq<1,1,1>(ap_reg_pp0_iter17_exitcond_reg_365.read(), ap_const_lv1_0)) {
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6 = newSel3_reg_420.read();
        } else {
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6 = minimumDistanceIndex_1_reg_165.read();
        }
    } else {
        ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6 = minimumDistanceIndex_1_reg_165.read();
    }
}

void getPixelClassification_Stream::thread_ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6() {
    if (esl_seteq<1,1,1>(ap_condition_219.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_reg_365.read())) {
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6 = ap_const_lv2_0;
        } else if (esl_seteq<1,1,1>(exitcond_reg_365.read(), ap_const_lv1_0)) {
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6 = tmp_3_reg_360.read();
        } else {
            ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6 = minimumDistanceIndex_3_reg_109.read();
        }
    } else {
        ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6 = minimumDistanceIndex_3_reg_109.read();
    }
}

void getPixelClassification_Stream::thread_ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138() {
    ap_phi_reg_pp0_iter1_in_pixel6_phi_reg_138 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
}

void getPixelClassification_Stream::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_214_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to18.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void getPixelClassification_Stream::thread_cond_fu_220_p2() {
    cond_fu_220_p2 = (!minimumDistanceIndex_3_reg_109.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(minimumDistanceIndex_3_reg_109.read() == ap_const_lv2_0);
}

void getPixelClassification_Stream::thread_distance_0_minimumDi_1_fu_275_p3() {
    distance_0_minimumDi_1_fu_275_p3 = (!tmp_2_1_fu_269_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_1_fu_269_p2.read()[0].to_bool())? minimumDistance_2_1_s_fu_266_p1.read(): distance_0_minimumDi_fu_258_p3.read());
}

void getPixelClassification_Stream::thread_distance_0_minimumDi_2_fu_332_p3() {
    distance_0_minimumDi_2_fu_332_p3 = (!tmp_2_2_fu_290_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_2_fu_290_p2.read()[0].to_bool())? minimumDistance_2_2_s_fu_287_p1.read(): distance_0_minimumDi_1_reg_409.read());
}

void getPixelClassification_Stream::thread_distance_0_minimumDi_fu_258_p3() {
    distance_0_minimumDi_fu_258_p3 = (!tmp_2_fu_252_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_2_fu_252_p2.read()[0].to_bool())? minimumDistance_2_ex_fu_249_p1.read(): ap_phi_mux_minimumDistance4_phi_fu_155_p6.read());
}

void getPixelClassification_Stream::thread_exitcond_fu_214_p2() {
    exitcond_fu_214_p2 = (!i_2_fu_204_p2.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(i_2_fu_204_p2.read() == ap_const_lv3_6);
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_179_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_getColorDistance_fu_179_ap_ce = ap_const_logic_1;
    } else {
        grp_getColorDistance_fu_179_ap_ce = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_179_ap_start() {
    grp_getColorDistance_fu_179_ap_start = ap_reg_grp_getColorDistance_fu_179_ap_start.read();
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_186_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_getColorDistance_fu_186_ap_ce = ap_const_logic_1;
    } else {
        grp_getColorDistance_fu_186_ap_ce = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_186_ap_start() {
    grp_getColorDistance_fu_186_ap_start = ap_reg_grp_getColorDistance_fu_186_ap_start.read();
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_193_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_getColorDistance_fu_193_ap_ce = ap_const_logic_1;
    } else {
        grp_getColorDistance_fu_193_ap_ce = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_grp_getColorDistance_fu_193_ap_start() {
    grp_getColorDistance_fu_193_ap_start = ap_reg_grp_getColorDistance_fu_193_ap_start.read();
}

void getPixelClassification_Stream::thread_i_2_fu_204_p2() {
    i_2_fu_204_p2 = (!ap_const_lv3_3.is_01() || !minimumDistanceIndex_fu_200_p1.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_3) + sc_biguint<3>(minimumDistanceIndex_fu_200_p1.read()));
}

void getPixelClassification_Stream::thread_in_pixel_0_ack_in() {
    in_pixel_0_ack_in = in_pixel_0_state.read()[1];
}

void getPixelClassification_Stream::thread_in_pixel_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_pixel_0_ack_out = ap_const_logic_1;
    } else {
        in_pixel_0_ack_out = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_in_pixel_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_pixel_0_sel.read())) {
        in_pixel_0_data_out = in_pixel_0_payload_B.read();
    } else {
        in_pixel_0_data_out = in_pixel_0_payload_A.read();
    }
}

void getPixelClassification_Stream::thread_in_pixel_0_load_A() {
    in_pixel_0_load_A = (in_pixel_0_state_cmp_full.read() & ~in_pixel_0_sel_wr.read());
}

void getPixelClassification_Stream::thread_in_pixel_0_load_B() {
    in_pixel_0_load_B = (in_pixel_0_sel_wr.read() & in_pixel_0_state_cmp_full.read());
}

void getPixelClassification_Stream::thread_in_pixel_0_sel() {
    in_pixel_0_sel = in_pixel_0_sel_rd.read();
}

void getPixelClassification_Stream::thread_in_pixel_0_state_cmp_full() {
    in_pixel_0_state_cmp_full =  (sc_logic) ((!in_pixel_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_pixel_0_state.read() != ap_const_lv2_1))[0];
}

void getPixelClassification_Stream::thread_in_pixel_0_vld_in() {
    in_pixel_0_vld_in = in_pixel_TVALID.read();
}

void getPixelClassification_Stream::thread_in_pixel_0_vld_out() {
    in_pixel_0_vld_out = in_pixel_0_state.read()[0];
}

void getPixelClassification_Stream::thread_in_pixel_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, do_init_reg_93.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        in_pixel_TDATA_blk_n = in_pixel_0_state.read()[0];
    } else {
        in_pixel_TDATA_blk_n = ap_const_logic_1;
    }
}

void getPixelClassification_Stream::thread_in_pixel_TREADY() {
    in_pixel_TREADY = in_pixel_0_state.read()[1];
}

void getPixelClassification_Stream::thread_in_pixel_assign_fu_344_p3() {
    in_pixel_assign_fu_344_p3 = (!tmp_fu_339_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_fu_339_p2.read()[0].to_bool())? ap_const_lv32_0: ap_reg_pp0_iter17_in_pixel6_phi_reg_138.read());
}

void getPixelClassification_Stream::thread_minimumDistanceIndex_2_fu_283_p1() {
    minimumDistanceIndex_2_fu_283_p1 = esl_zext<32,2>(ap_reg_pp0_iter16_minimumDistanceIndex_3_reg_109.read());
}

void getPixelClassification_Stream::thread_minimumDistanceIndex_fu_200_p1() {
    minimumDistanceIndex_fu_200_p1 = esl_zext<3,2>(ap_phi_mux_minimumDistanceIndex_3_phi_fu_113_p6.read());
}

void getPixelClassification_Stream::thread_minimumDistance_2_1_s_fu_266_p1() {
    minimumDistance_2_1_s_fu_266_p1 = esl_zext<32,12>(minimumDistance_2_1_reg_394.read());
}

void getPixelClassification_Stream::thread_minimumDistance_2_2_s_fu_287_p1() {
    minimumDistance_2_2_s_fu_287_p1 = esl_zext<32,12>(minimumDistance_2_2_reg_415.read());
}

void getPixelClassification_Stream::thread_minimumDistance_2_ex_fu_249_p1() {
    minimumDistance_2_ex_fu_249_p1 = esl_zext<32,12>(minimumDistance_2_reg_389.read());
}

void getPixelClassification_Stream::thread_newSel1_fu_317_p3() {
    newSel1_fu_317_p3 = (!tmp_2_reg_399.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_399.read()[0].to_bool())? minimumDistanceIndex_2_fu_283_p1.read(): ap_phi_mux_minimumDistanceIndex_1_phi_fu_169_p6.read());
}

void getPixelClassification_Stream::thread_newSel3_fu_324_p3() {
    newSel3_fu_324_p3 = (!or_cond_fu_312_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_312_p2.read()[0].to_bool())? newSel_cast_fu_308_p1.read(): newSel1_fu_317_p3.read());
}

void getPixelClassification_Stream::thread_newSel_cast_fu_308_p1() {
    newSel_cast_fu_308_p1 = esl_zext<32,3>(newSel_fu_303_p2.read());
}

void getPixelClassification_Stream::thread_newSel_fu_303_p2() {
    newSel_fu_303_p2 = (!newSel_v_cast_cast_fu_295_p3.read().is_01() || !ap_reg_pp0_iter16_minimumDistanceIndex_reg_355.read().is_01())? sc_lv<3>(): (sc_biguint<3>(newSel_v_cast_cast_fu_295_p3.read()) + sc_biguint<3>(ap_reg_pp0_iter16_minimumDistanceIndex_reg_355.read()));
}

void getPixelClassification_Stream::thread_newSel_v_cast_cast_fu_295_p3() {
    newSel_v_cast_cast_fu_295_p3 = (!tmp_2_2_fu_290_p2.read()[0].is_01())? sc_lv<3>(): ((tmp_2_2_fu_290_p2.read()[0].to_bool())? ap_const_lv3_2: ap_const_lv3_1);
}

void getPixelClassification_Stream::thread_or_cond_fu_312_p2() {
    or_cond_fu_312_p2 = (tmp_2_2_fu_290_p2.read() | tmp_2_1_reg_404.read());
}

void getPixelClassification_Stream::thread_out_pixel_1_ack_in() {
    out_pixel_1_ack_in = out_pixel_1_state.read()[1];
}

void getPixelClassification_Stream::thread_out_pixel_1_ack_out() {
    out_pixel_1_ack_out = out_pixel_TREADY.read();
}

void getPixelClassification_Stream::thread_out_pixel_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_pixel_1_sel.read())) {
        out_pixel_1_data_out = out_pixel_1_payload_B.read();
    } else {
        out_pixel_1_data_out = out_pixel_1_payload_A.read();
    }
}

void getPixelClassification_Stream::thread_out_pixel_1_load_A() {
    out_pixel_1_load_A = (out_pixel_1_state_cmp_full.read() & ~out_pixel_1_sel_wr.read());
}

void getPixelClassification_Stream::thread_out_pixel_1_load_B() {
    out_pixel_1_load_B = (out_pixel_1_sel_wr.read() & out_pixel_1_state_cmp_full.read());
}

void getPixelClassification_Stream::thread_out_pixel_1_sel() {
    out_pixel_1_sel = out_pixel_1_sel_rd.read();
}

void getPixelClassification_Stream::thread_out_pixel_1_state_cmp_full() {
    out_pixel_1_state_cmp_full =  (sc_logic) ((!out_pixel_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_pixel_1_state.read() != ap_const_lv2_1))[0];
}

void getPixelClassification_Stream::thread_out_pixel_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter17_exitcond_reg_365.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_pixel_1_vld_in = ap_const_logic_1;
    } else {
        out_pixel_1_vld_in = ap_const_logic_0;
    }
}

void getPixelClassification_Stream::thread_out_pixel_1_vld_out() {
    out_pixel_1_vld_out = out_pixel_1_state.read()[0];
}

void getPixelClassification_Stream::thread_out_pixel_TDATA() {
    out_pixel_TDATA = out_pixel_1_data_out.read();
}

void getPixelClassification_Stream::thread_out_pixel_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter17_exitcond_reg_365.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter18.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_reg_pp0_iter18_exitcond_reg_365.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter19.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        out_pixel_TDATA_blk_n = out_pixel_1_state.read()[1];
    } else {
        out_pixel_TDATA_blk_n = ap_const_logic_1;
    }
}

void getPixelClassification_Stream::thread_out_pixel_TVALID() {
    out_pixel_TVALID = out_pixel_1_state.read()[0];
}

void getPixelClassification_Stream::thread_p_color_array_load_0_s_fu_226_p3() {
    p_color_array_load_0_s_fu_226_p3 = (!cond_fu_220_p2.read()[0].is_01())? sc_lv<17>(): ((cond_fu_220_p2.read()[0].to_bool())? ap_const_lv17_10000: ap_const_lv17_100FF);
}

void getPixelClassification_Stream::thread_p_color_array_load_1_s_fu_234_p3() {
    p_color_array_load_1_s_fu_234_p3 = (!cond_fu_220_p2.read()[0].is_01())? sc_lv<17>(): ((cond_fu_220_p2.read()[0].to_bool())? ap_const_lv17_FF00: ap_const_lv17_1FF00);
}

void getPixelClassification_Stream::thread_p_color_array_load_2_s_fu_242_p3() {
    p_color_array_load_2_s_fu_242_p3 = (!cond_reg_369.read()[0].is_01())? sc_lv<17>(): ((cond_reg_369.read()[0].to_bool())? ap_const_lv17_FF: ap_const_lv17_FFFF);
}

void getPixelClassification_Stream::thread_tmp_2_1_fu_269_p2() {
    tmp_2_1_fu_269_p2 = (!minimumDistance_2_1_s_fu_266_p1.read().is_01() || !distance_0_minimumDi_fu_258_p3.read().is_01())? sc_lv<1>(): (sc_bigint<32>(minimumDistance_2_1_s_fu_266_p1.read()) < sc_bigint<32>(distance_0_minimumDi_fu_258_p3.read()));
}

void getPixelClassification_Stream::thread_tmp_2_2_fu_290_p2() {
    tmp_2_2_fu_290_p2 = (!minimumDistance_2_2_s_fu_287_p1.read().is_01() || !distance_0_minimumDi_1_reg_409.read().is_01())? sc_lv<1>(): (sc_bigint<32>(minimumDistance_2_2_s_fu_287_p1.read()) < sc_bigint<32>(distance_0_minimumDi_1_reg_409.read()));
}

void getPixelClassification_Stream::thread_tmp_2_fu_252_p2() {
    tmp_2_fu_252_p2 = (!minimumDistance_2_ex_fu_249_p1.read().is_01() || !ap_phi_mux_minimumDistance4_phi_fu_155_p6.read().is_01())? sc_lv<1>(): (sc_bigint<32>(minimumDistance_2_ex_fu_249_p1.read()) < sc_bigint<32>(ap_phi_mux_minimumDistance4_phi_fu_155_p6.read()));
}

void getPixelClassification_Stream::thread_tmp_3_fu_210_p1() {
    tmp_3_fu_210_p1 = i_2_fu_204_p2.read().range(2-1, 0);
}

void getPixelClassification_Stream::thread_tmp_fu_339_p2() {
    tmp_fu_339_p2 = (!newSel3_reg_420.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(newSel3_reg_420.read() == ap_const_lv32_0);
}

void getPixelClassification_Stream::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void getPixelClassification_Stream::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_pixel_TREADY\" :  \"" << out_pixel_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_pixel_TDATA\" :  \"" << in_pixel_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_pixel_TVALID\" :  \"" << in_pixel_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_pixel_TREADY\" :  \"" << in_pixel_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_pixel_TDATA\" :  \"" << out_pixel_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_pixel_TVALID\" :  \"" << out_pixel_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"StreamClk\" :  \"" << StreamClk.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

