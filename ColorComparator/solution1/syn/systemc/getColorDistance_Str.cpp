// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getColorDistance_Str.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getColorDistance_Str::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getColorDistance_Str::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> getColorDistance_Str::ap_ST_fsm_pp0_stage0 = "1";
const bool getColorDistance_Str::ap_const_boolean_1 = true;
const sc_lv<32> getColorDistance_Str::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getColorDistance_Str::ap_const_boolean_0 = false;
const sc_lv<32> getColorDistance_Str::ap_const_lv32_10 = "10000";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_17 = "10111";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_8 = "1000";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_F = "1111";
const sc_lv<9> getColorDistance_Str::ap_const_lv9_FF = "11111111";
const sc_lv<9> getColorDistance_Str::ap_const_lv9_0 = "000000000";
const sc_lv<14> getColorDistance_Str::ap_const_lv14_B = "1011";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_16 = "10110";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_2 = "10";
const sc_lv<2> getColorDistance_Str::ap_const_lv2_0 = "00";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_13 = "10011";
const sc_lv<20> getColorDistance_Str::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_1 = "1";
const sc_lv<21> getColorDistance_Str::ap_const_lv21_0 = "000000000000000000000";
const sc_lv<32> getColorDistance_Str::ap_const_lv32_14 = "10100";
const sc_lv<8> getColorDistance_Str::ap_const_lv8_0 = "00000000";

getColorDistance_Str::getColorDistance_Str(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_fxp_sqrt_fu_88 = new fxp_sqrt("grp_fxp_sqrt_fu_88");
    grp_fxp_sqrt_fu_88->ap_clk(ap_clk);
    grp_fxp_sqrt_fu_88->ap_rst(ap_rst);
    grp_fxp_sqrt_fu_88->in_val_V_read(grp_fxp_sqrt_fu_88_in_val_V_read);
    grp_fxp_sqrt_fu_88->ap_return(grp_fxp_sqrt_fu_88_ap_return);
    grp_fxp_sqrt_fu_88->ap_ce(grp_fxp_sqrt_fu_88_ap_ce);
    getPixelClassificbkb_U2 = new getPixelClassificbkb<1,1,14,9,23>("getPixelClassificbkb_U2");
    getPixelClassificbkb_U2->din0(tmp1_reg_508);
    getPixelClassificbkb_U2->din1(r_V_1_reg_503);
    getPixelClassificbkb_U2->dout(tmp_5_fu_489_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( pixel_V_TVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( pixel_V_TVALID );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter9);

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter10);

    SC_METHOD(thread_ap_block_state12_pp0_stage0_iter11);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter12);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter13);

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter14);

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter15);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( pixel_V_TVALID );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter7);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter8);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );
    sensitive << ( ap_enable_reg_pp0_iter15 );

    SC_METHOD(thread_ap_idle_pp0_0to14);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter9 );
    sensitive << ( ap_enable_reg_pp0_iter10 );
    sensitive << ( ap_enable_reg_pp0_iter11 );
    sensitive << ( ap_enable_reg_pp0_iter12 );
    sensitive << ( ap_enable_reg_pp0_iter13 );
    sensitive << ( ap_enable_reg_pp0_iter14 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to14 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter15 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );
    sensitive << ( grp_fxp_sqrt_fu_88_ap_return );

    SC_METHOD(thread_colorBlue_V_fu_129_p4);
    sensitive << ( color_V );

    SC_METHOD(thread_colorGreen_V_fu_125_p1);
    sensitive << ( color_V );

    SC_METHOD(thread_grp_fxp_sqrt_fu_88_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_grp_fxp_sqrt_fu_88_in_val_V_read);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( tmp2_fu_466_p2 );
    sensitive << ( p_Val2_1_fu_451_p1 );

    SC_METHOD(thread_lhs_V_1_fu_157_p1);
    sensitive << ( pixelGreen_V_fu_103_p1 );

    SC_METHOD(thread_lhs_V_2_fu_181_p1);
    sensitive << ( pixelBlue_V_fu_107_p4 );

    SC_METHOD(thread_lhs_V_fu_139_p1);
    sensitive << ( pixelRed_V_fu_93_p4 );

    SC_METHOD(thread_number_assign_2_cast_fu_233_p1);
    sensitive << ( r_V_2_reg_513 );

    SC_METHOD(thread_number_assign_cast_fu_195_p1);
    sensitive << ( r_V_reg_498 );

    SC_METHOD(thread_p_Val2_1_fu_451_p1);
    sensitive << ( tmp_17_fu_444_p3 );

    SC_METHOD(thread_p_Val2_2_fu_462_p1);
    sensitive << ( tmp_22_fu_455_p3 );

    SC_METHOD(thread_p_Val2_s_fu_440_p1);
    sensitive << ( tmp_12_fu_433_p3 );

    SC_METHOD(thread_p_neg1_fu_274_p2);
    sensitive << ( tmp_2_fu_260_p2 );

    SC_METHOD(thread_p_neg9_fu_322_p2);
    sensitive << ( tmp_13_reg_528 );

    SC_METHOD(thread_p_neg_fu_385_p2);
    sensitive << ( tmp_9_fu_371_p2 );

    SC_METHOD(thread_p_shl1_cast_fu_256_p1);
    sensitive << ( p_shl1_fu_249_p3 );

    SC_METHOD(thread_p_shl1_fu_249_p3);
    sensitive << ( tmp_reg_523 );

    SC_METHOD(thread_p_shl_cast_fu_367_p1);
    sensitive << ( p_shl_fu_360_p3 );

    SC_METHOD(thread_p_shl_fu_360_p3);
    sensitive << ( tmp_18_reg_548 );

    SC_METHOD(thread_pixelBlue_V_fu_107_p4);
    sensitive << ( pixel_V_TDATA );

    SC_METHOD(thread_pixelGreen_V_fu_103_p1);
    sensitive << ( pixel_V_TDATA );

    SC_METHOD(thread_pixelRed_V_fu_93_p4);
    sensitive << ( pixel_V_TDATA );

    SC_METHOD(thread_pixel_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( pixel_V_TVALID );

    SC_METHOD(thread_pixel_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_r_V_1_fu_165_p2);
    sensitive << ( lhs_V_1_fu_157_p1 );
    sensitive << ( rhs_V_1_fu_161_p1 );

    SC_METHOD(thread_r_V_2_fu_189_p2);
    sensitive << ( lhs_V_2_fu_181_p1 );
    sensitive << ( rhs_V_2_fu_185_p1 );

    SC_METHOD(thread_r_V_fu_151_p2);
    sensitive << ( lhs_V_fu_139_p1 );
    sensitive << ( rhs_V_cast_fu_143_p3 );

    SC_METHOD(thread_result_1_fu_236_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( number_assign_2_cast_fu_233_p1 );

    SC_METHOD(thread_result_1_fu_236_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( number_assign_2_cast_fu_233_p1 );

    SC_METHOD(thread_result_1_fu_236_p2);
    sensitive << ( result_1_fu_236_p0 );
    sensitive << ( result_1_fu_236_p1 );

    SC_METHOD(thread_result_2_cast3_fu_357_p1);
    sensitive << ( result_1_reg_543 );

    SC_METHOD(thread_result_cast6_fu_246_p1);
    sensitive << ( result_reg_518 );

    SC_METHOD(thread_result_fu_198_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( number_assign_cast_fu_195_p1 );

    SC_METHOD(thread_result_fu_198_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( number_assign_cast_fu_195_p1 );

    SC_METHOD(thread_result_fu_198_p2);
    sensitive << ( result_fu_198_p0 );
    sensitive << ( result_fu_198_p1 );

    SC_METHOD(thread_rhs_V_1_fu_161_p1);
    sensitive << ( colorGreen_V_fu_125_p1 );

    SC_METHOD(thread_rhs_V_2_fu_185_p1);
    sensitive << ( colorBlue_V_fu_129_p4 );

    SC_METHOD(thread_rhs_V_cast_fu_143_p3);
    sensitive << ( rhs_V_fu_117_p3 );

    SC_METHOD(thread_rhs_V_fu_117_p3);
    sensitive << ( color_V );

    SC_METHOD(thread_tmp1_fu_175_p1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( r_V_1_fu_165_p2 );

    SC_METHOD(thread_tmp1_fu_175_p2);
    sensitive << ( tmp1_fu_175_p1 );

    SC_METHOD(thread_tmp2_fu_466_p2);
    sensitive << ( p_Val2_s_fu_440_p1 );
    sensitive << ( p_Val2_2_fu_462_p1 );

    SC_METHOD(thread_tmp_10_cast_fu_337_p1);
    sensitive << ( tmp_15_fu_327_p4 );

    SC_METHOD(thread_tmp_10_fu_300_p4);
    sensitive << ( tmp_2_fu_260_p2 );

    SC_METHOD(thread_tmp_11_cast_fu_347_p1);
    sensitive << ( tmp_4_fu_341_p2 );

    SC_METHOD(thread_tmp_11_fu_405_p2);
    sensitive << ( tmp_14_cast_fu_401_p1 );

    SC_METHOD(thread_tmp_12_fu_433_p3);
    sensitive << ( tmp_s_reg_553 );

    SC_METHOD(thread_tmp_13_fu_214_p1);
    sensitive << ( tmp_5_fu_489_p2 );

    SC_METHOD(thread_tmp_14_cast_fu_401_p1);
    sensitive << ( tmp_20_fu_391_p4 );

    SC_METHOD(thread_tmp_15_fu_327_p4);
    sensitive << ( p_neg9_fu_322_p2 );

    SC_METHOD(thread_tmp_16_fu_425_p3);
    sensitive << ( tmp_19_fu_377_p3 );
    sensitive << ( tmp_11_fu_405_p2 );
    sensitive << ( tmp_17_cast_fu_421_p1 );

    SC_METHOD(thread_tmp_17_cast_fu_421_p1);
    sensitive << ( tmp_21_fu_411_p4 );

    SC_METHOD(thread_tmp_17_fu_444_p3);
    sensitive << ( tmp_6_reg_558 );

    SC_METHOD(thread_tmp_18_fu_242_p1);
    sensitive << ( result_1_fu_236_p2 );

    SC_METHOD(thread_tmp_19_fu_377_p3);
    sensitive << ( tmp_9_fu_371_p2 );

    SC_METHOD(thread_tmp_1_fu_294_p2);
    sensitive << ( tmp_cast_fu_290_p1 );

    SC_METHOD(thread_tmp_20_fu_391_p4);
    sensitive << ( p_neg_fu_385_p2 );

    SC_METHOD(thread_tmp_21_fu_411_p4);
    sensitive << ( tmp_9_fu_371_p2 );

    SC_METHOD(thread_tmp_22_fu_455_p3);
    sensitive << ( tmp_16_reg_563 );

    SC_METHOD(thread_tmp_2_fu_260_p2);
    sensitive << ( result_cast6_fu_246_p1 );
    sensitive << ( p_shl1_cast_fu_256_p1 );

    SC_METHOD(thread_tmp_4_cast_fu_310_p1);
    sensitive << ( tmp_10_fu_300_p4 );

    SC_METHOD(thread_tmp_4_fu_341_p2);
    sensitive << ( tmp_10_cast_fu_337_p1 );

    SC_METHOD(thread_tmp_6_fu_351_p3);
    sensitive << ( tmp_14_reg_533 );
    sensitive << ( tmp_3_reg_538 );
    sensitive << ( tmp_11_cast_fu_347_p1 );

    SC_METHOD(thread_tmp_7_fu_266_p3);
    sensitive << ( tmp_2_fu_260_p2 );

    SC_METHOD(thread_tmp_8_fu_280_p4);
    sensitive << ( p_neg1_fu_274_p2 );

    SC_METHOD(thread_tmp_9_fu_371_p2);
    sensitive << ( p_shl_cast_fu_367_p1 );
    sensitive << ( result_2_cast3_fu_357_p1 );

    SC_METHOD(thread_tmp_cast_fu_290_p1);
    sensitive << ( tmp_8_fu_280_p4 );

    SC_METHOD(thread_tmp_fu_204_p1);
    sensitive << ( result_fu_198_p2 );

    SC_METHOD(thread_tmp_s_fu_314_p3);
    sensitive << ( tmp_7_fu_266_p3 );
    sensitive << ( tmp_1_fu_294_p2 );
    sensitive << ( tmp_4_cast_fu_310_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter9 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter10 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter11 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter12 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter13 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter14 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter15 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getColorDistance_Str_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, pixel_V_TVALID, "(port)pixel_V_TVALID");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, pixel_V_TDATA, "(port)pixel_V_TDATA");
    sc_trace(mVcdFile, pixel_V_TREADY, "(port)pixel_V_TREADY");
    sc_trace(mVcdFile, color_V, "(port)color_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, pixel_V_TDATA_blk_n, "(port)pixel_V_TDATA_blk_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter9, "ap_enable_reg_pp0_iter9");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter10, "ap_enable_reg_pp0_iter10");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter11, "ap_enable_reg_pp0_iter11");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter12, "ap_enable_reg_pp0_iter12");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter13, "ap_enable_reg_pp0_iter13");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter14, "ap_enable_reg_pp0_iter14");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter15, "ap_enable_reg_pp0_iter15");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter7, "ap_block_state8_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter8, "ap_block_state9_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter9, "ap_block_state10_pp0_stage0_iter9");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter10, "ap_block_state11_pp0_stage0_iter10");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage0_iter11, "ap_block_state12_pp0_stage0_iter11");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter12, "ap_block_state13_pp0_stage0_iter12");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter13, "ap_block_state14_pp0_stage0_iter13");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter14, "ap_block_state15_pp0_stage0_iter14");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter15, "ap_block_state16_pp0_stage0_iter15");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, r_V_fu_151_p2, "r_V_fu_151_p2");
    sc_trace(mVcdFile, r_V_reg_498, "r_V_reg_498");
    sc_trace(mVcdFile, r_V_1_fu_165_p2, "r_V_1_fu_165_p2");
    sc_trace(mVcdFile, r_V_1_reg_503, "r_V_1_reg_503");
    sc_trace(mVcdFile, tmp1_fu_175_p2, "tmp1_fu_175_p2");
    sc_trace(mVcdFile, tmp1_reg_508, "tmp1_reg_508");
    sc_trace(mVcdFile, r_V_2_fu_189_p2, "r_V_2_fu_189_p2");
    sc_trace(mVcdFile, r_V_2_reg_513, "r_V_2_reg_513");
    sc_trace(mVcdFile, result_fu_198_p2, "result_fu_198_p2");
    sc_trace(mVcdFile, result_reg_518, "result_reg_518");
    sc_trace(mVcdFile, tmp_fu_204_p1, "tmp_fu_204_p1");
    sc_trace(mVcdFile, tmp_reg_523, "tmp_reg_523");
    sc_trace(mVcdFile, tmp_13_fu_214_p1, "tmp_13_fu_214_p1");
    sc_trace(mVcdFile, tmp_13_reg_528, "tmp_13_reg_528");
    sc_trace(mVcdFile, tmp_14_reg_533, "tmp_14_reg_533");
    sc_trace(mVcdFile, tmp_3_reg_538, "tmp_3_reg_538");
    sc_trace(mVcdFile, result_1_fu_236_p2, "result_1_fu_236_p2");
    sc_trace(mVcdFile, result_1_reg_543, "result_1_reg_543");
    sc_trace(mVcdFile, tmp_18_fu_242_p1, "tmp_18_fu_242_p1");
    sc_trace(mVcdFile, tmp_18_reg_548, "tmp_18_reg_548");
    sc_trace(mVcdFile, tmp_s_fu_314_p3, "tmp_s_fu_314_p3");
    sc_trace(mVcdFile, tmp_s_reg_553, "tmp_s_reg_553");
    sc_trace(mVcdFile, tmp_6_fu_351_p3, "tmp_6_fu_351_p3");
    sc_trace(mVcdFile, tmp_6_reg_558, "tmp_6_reg_558");
    sc_trace(mVcdFile, tmp_16_fu_425_p3, "tmp_16_fu_425_p3");
    sc_trace(mVcdFile, tmp_16_reg_563, "tmp_16_reg_563");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_88_in_val_V_read, "grp_fxp_sqrt_fu_88_in_val_V_read");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_88_ap_return, "grp_fxp_sqrt_fu_88_ap_return");
    sc_trace(mVcdFile, grp_fxp_sqrt_fu_88_ap_ce, "grp_fxp_sqrt_fu_88_ap_ce");
    sc_trace(mVcdFile, pixelRed_V_fu_93_p4, "pixelRed_V_fu_93_p4");
    sc_trace(mVcdFile, rhs_V_fu_117_p3, "rhs_V_fu_117_p3");
    sc_trace(mVcdFile, lhs_V_fu_139_p1, "lhs_V_fu_139_p1");
    sc_trace(mVcdFile, rhs_V_cast_fu_143_p3, "rhs_V_cast_fu_143_p3");
    sc_trace(mVcdFile, pixelGreen_V_fu_103_p1, "pixelGreen_V_fu_103_p1");
    sc_trace(mVcdFile, colorGreen_V_fu_125_p1, "colorGreen_V_fu_125_p1");
    sc_trace(mVcdFile, lhs_V_1_fu_157_p1, "lhs_V_1_fu_157_p1");
    sc_trace(mVcdFile, rhs_V_1_fu_161_p1, "rhs_V_1_fu_161_p1");
    sc_trace(mVcdFile, tmp1_fu_175_p1, "tmp1_fu_175_p1");
    sc_trace(mVcdFile, pixelBlue_V_fu_107_p4, "pixelBlue_V_fu_107_p4");
    sc_trace(mVcdFile, colorBlue_V_fu_129_p4, "colorBlue_V_fu_129_p4");
    sc_trace(mVcdFile, lhs_V_2_fu_181_p1, "lhs_V_2_fu_181_p1");
    sc_trace(mVcdFile, rhs_V_2_fu_185_p1, "rhs_V_2_fu_185_p1");
    sc_trace(mVcdFile, result_fu_198_p0, "result_fu_198_p0");
    sc_trace(mVcdFile, number_assign_cast_fu_195_p1, "number_assign_cast_fu_195_p1");
    sc_trace(mVcdFile, result_fu_198_p1, "result_fu_198_p1");
    sc_trace(mVcdFile, tmp_5_fu_489_p2, "tmp_5_fu_489_p2");
    sc_trace(mVcdFile, result_1_fu_236_p0, "result_1_fu_236_p0");
    sc_trace(mVcdFile, number_assign_2_cast_fu_233_p1, "number_assign_2_cast_fu_233_p1");
    sc_trace(mVcdFile, result_1_fu_236_p1, "result_1_fu_236_p1");
    sc_trace(mVcdFile, p_shl1_fu_249_p3, "p_shl1_fu_249_p3");
    sc_trace(mVcdFile, result_cast6_fu_246_p1, "result_cast6_fu_246_p1");
    sc_trace(mVcdFile, p_shl1_cast_fu_256_p1, "p_shl1_cast_fu_256_p1");
    sc_trace(mVcdFile, tmp_2_fu_260_p2, "tmp_2_fu_260_p2");
    sc_trace(mVcdFile, p_neg1_fu_274_p2, "p_neg1_fu_274_p2");
    sc_trace(mVcdFile, tmp_8_fu_280_p4, "tmp_8_fu_280_p4");
    sc_trace(mVcdFile, tmp_cast_fu_290_p1, "tmp_cast_fu_290_p1");
    sc_trace(mVcdFile, tmp_10_fu_300_p4, "tmp_10_fu_300_p4");
    sc_trace(mVcdFile, tmp_7_fu_266_p3, "tmp_7_fu_266_p3");
    sc_trace(mVcdFile, tmp_1_fu_294_p2, "tmp_1_fu_294_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_310_p1, "tmp_4_cast_fu_310_p1");
    sc_trace(mVcdFile, p_neg9_fu_322_p2, "p_neg9_fu_322_p2");
    sc_trace(mVcdFile, tmp_15_fu_327_p4, "tmp_15_fu_327_p4");
    sc_trace(mVcdFile, tmp_10_cast_fu_337_p1, "tmp_10_cast_fu_337_p1");
    sc_trace(mVcdFile, tmp_4_fu_341_p2, "tmp_4_fu_341_p2");
    sc_trace(mVcdFile, tmp_11_cast_fu_347_p1, "tmp_11_cast_fu_347_p1");
    sc_trace(mVcdFile, p_shl_fu_360_p3, "p_shl_fu_360_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_367_p1, "p_shl_cast_fu_367_p1");
    sc_trace(mVcdFile, result_2_cast3_fu_357_p1, "result_2_cast3_fu_357_p1");
    sc_trace(mVcdFile, tmp_9_fu_371_p2, "tmp_9_fu_371_p2");
    sc_trace(mVcdFile, p_neg_fu_385_p2, "p_neg_fu_385_p2");
    sc_trace(mVcdFile, tmp_20_fu_391_p4, "tmp_20_fu_391_p4");
    sc_trace(mVcdFile, tmp_14_cast_fu_401_p1, "tmp_14_cast_fu_401_p1");
    sc_trace(mVcdFile, tmp_21_fu_411_p4, "tmp_21_fu_411_p4");
    sc_trace(mVcdFile, tmp_19_fu_377_p3, "tmp_19_fu_377_p3");
    sc_trace(mVcdFile, tmp_11_fu_405_p2, "tmp_11_fu_405_p2");
    sc_trace(mVcdFile, tmp_17_cast_fu_421_p1, "tmp_17_cast_fu_421_p1");
    sc_trace(mVcdFile, tmp_12_fu_433_p3, "tmp_12_fu_433_p3");
    sc_trace(mVcdFile, tmp_17_fu_444_p3, "tmp_17_fu_444_p3");
    sc_trace(mVcdFile, tmp_22_fu_455_p3, "tmp_22_fu_455_p3");
    sc_trace(mVcdFile, p_Val2_s_fu_440_p1, "p_Val2_s_fu_440_p1");
    sc_trace(mVcdFile, p_Val2_2_fu_462_p1, "p_Val2_2_fu_462_p1");
    sc_trace(mVcdFile, tmp2_fu_466_p2, "tmp2_fu_466_p2");
    sc_trace(mVcdFile, p_Val2_1_fu_451_p1, "p_Val2_1_fu_451_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to14, "ap_idle_pp0_0to14");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

getColorDistance_Str::~getColorDistance_Str() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_fxp_sqrt_fu_88;
    delete getPixelClassificbkb_U2;
}

void getColorDistance_Str::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter10 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter10 = ap_enable_reg_pp0_iter9.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter11 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter11 = ap_enable_reg_pp0_iter10.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter12 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter12 = ap_enable_reg_pp0_iter11.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter13 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter13 = ap_enable_reg_pp0_iter12.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter14 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter14 = ap_enable_reg_pp0_iter13.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter15 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter15 = ap_enable_reg_pp0_iter14.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter9 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter9 = ap_enable_reg_pp0_iter8.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        r_V_1_reg_503 = r_V_1_fu_165_p2.read();
        r_V_2_reg_513 = r_V_2_fu_189_p2.read();
        r_V_reg_498 = r_V_fu_151_p2.read();
        result_1_reg_543 = result_1_fu_236_p2.read();
        result_reg_518 = result_fu_198_p2.read();
        tmp1_reg_508 = tmp1_fu_175_p2.read();
        tmp_13_reg_528 = tmp_13_fu_214_p1.read();
        tmp_14_reg_533 = tmp_5_fu_489_p2.read().range(22, 22);
        tmp_18_reg_548 = tmp_18_fu_242_p1.read();
        tmp_3_reg_538 = tmp_5_fu_489_p2.read().range(22, 2);
        tmp_reg_523 = tmp_fu_204_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        tmp_16_reg_563 = tmp_16_fu_425_p3.read();
        tmp_6_reg_558 = tmp_6_fu_351_p3.read();
        tmp_s_reg_553 = tmp_s_fu_314_p3.read();
    }
}

void getColorDistance_Str::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void getColorDistance_Str::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, pixel_V_TVALID.read())));
}

void getColorDistance_Str::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, pixel_V_TVALID.read()))) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void getColorDistance_Str::thread_ap_block_state10_pp0_stage0_iter9() {
    ap_block_state10_pp0_stage0_iter9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state11_pp0_stage0_iter10() {
    ap_block_state11_pp0_stage0_iter10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state12_pp0_stage0_iter11() {
    ap_block_state12_pp0_stage0_iter11 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state13_pp0_stage0_iter12() {
    ap_block_state13_pp0_stage0_iter12 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state14_pp0_stage0_iter13() {
    ap_block_state14_pp0_stage0_iter13 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state15_pp0_stage0_iter14() {
    ap_block_state15_pp0_stage0_iter14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state16_pp0_stage0_iter15() {
    ap_block_state16_pp0_stage0_iter15 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, pixel_V_TVALID.read()));
}

void getColorDistance_Str::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state8_pp0_stage0_iter7() {
    ap_block_state8_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_block_state9_pp0_stage0_iter8() {
    ap_block_state9_pp0_stage0_iter8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getColorDistance_Str::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter15.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getColorDistance_Str::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void getColorDistance_Str::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter15.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_idle_pp0_0to14() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter9.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter10.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter11.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter12.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter13.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter14.read()))) {
        ap_idle_pp0_0to14 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to14 = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to14.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_ap_return() {
    ap_return = grp_fxp_sqrt_fu_88_ap_return.read().range(19, 8);
}

void getColorDistance_Str::thread_colorBlue_V_fu_129_p4() {
    colorBlue_V_fu_129_p4 = color_V.read().range(15, 8);
}

void getColorDistance_Str::thread_colorGreen_V_fu_125_p1() {
    colorGreen_V_fu_125_p1 = color_V.read().range(8-1, 0);
}

void getColorDistance_Str::thread_grp_fxp_sqrt_fu_88_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read()))) {
        grp_fxp_sqrt_fu_88_ap_ce = ap_const_logic_1;
    } else {
        grp_fxp_sqrt_fu_88_ap_ce = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_grp_fxp_sqrt_fu_88_in_val_V_read() {
    grp_fxp_sqrt_fu_88_in_val_V_read = (!tmp2_fu_466_p2.read().is_01() || !p_Val2_1_fu_451_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp2_fu_466_p2.read()) + sc_bigint<32>(p_Val2_1_fu_451_p1.read()));
}

void getColorDistance_Str::thread_lhs_V_1_fu_157_p1() {
    lhs_V_1_fu_157_p1 = esl_zext<9,8>(pixelGreen_V_fu_103_p1.read());
}

void getColorDistance_Str::thread_lhs_V_2_fu_181_p1() {
    lhs_V_2_fu_181_p1 = esl_zext<9,8>(pixelBlue_V_fu_107_p4.read());
}

void getColorDistance_Str::thread_lhs_V_fu_139_p1() {
    lhs_V_fu_139_p1 = esl_zext<9,8>(pixelRed_V_fu_93_p4.read());
}

void getColorDistance_Str::thread_number_assign_2_cast_fu_233_p1() {
    number_assign_2_cast_fu_233_p1 = esl_sext<18,9>(r_V_2_reg_513.read());
}

void getColorDistance_Str::thread_number_assign_cast_fu_195_p1() {
    number_assign_cast_fu_195_p1 = esl_sext<18,9>(r_V_reg_498.read());
}

void getColorDistance_Str::thread_p_Val2_1_fu_451_p1() {
    p_Val2_1_fu_451_p1 = esl_sext<32,29>(tmp_17_fu_444_p3.read());
}

void getColorDistance_Str::thread_p_Val2_2_fu_462_p1() {
    p_Val2_2_fu_462_p1 = esl_sext<32,28>(tmp_22_fu_455_p3.read());
}

void getColorDistance_Str::thread_p_Val2_s_fu_440_p1() {
    p_Val2_s_fu_440_p1 = esl_sext<32,28>(tmp_12_fu_433_p3.read());
}

void getColorDistance_Str::thread_p_neg1_fu_274_p2() {
    p_neg1_fu_274_p2 = (!ap_const_lv20_0.is_01() || !tmp_2_fu_260_p2.read().is_01())? sc_lv<20>(): (sc_biguint<20>(ap_const_lv20_0) - sc_biguint<20>(tmp_2_fu_260_p2.read()));
}

void getColorDistance_Str::thread_p_neg9_fu_322_p2() {
    p_neg9_fu_322_p2 = (!ap_const_lv21_0.is_01() || !tmp_13_reg_528.read().is_01())? sc_lv<21>(): (sc_biguint<21>(ap_const_lv21_0) - sc_biguint<21>(tmp_13_reg_528.read()));
}

void getColorDistance_Str::thread_p_neg_fu_385_p2() {
    p_neg_fu_385_p2 = (!ap_const_lv20_0.is_01() || !tmp_9_fu_371_p2.read().is_01())? sc_lv<20>(): (sc_biguint<20>(ap_const_lv20_0) - sc_biguint<20>(tmp_9_fu_371_p2.read()));
}

void getColorDistance_Str::thread_p_shl1_cast_fu_256_p1() {
    p_shl1_cast_fu_256_p1 = esl_sext<20,19>(p_shl1_fu_249_p3.read());
}

void getColorDistance_Str::thread_p_shl1_fu_249_p3() {
    p_shl1_fu_249_p3 = esl_concat<17,2>(tmp_reg_523.read(), ap_const_lv2_0);
}

void getColorDistance_Str::thread_p_shl_cast_fu_367_p1() {
    p_shl_cast_fu_367_p1 = esl_sext<20,19>(p_shl_fu_360_p3.read());
}

void getColorDistance_Str::thread_p_shl_fu_360_p3() {
    p_shl_fu_360_p3 = esl_concat<17,2>(tmp_18_reg_548.read(), ap_const_lv2_0);
}

void getColorDistance_Str::thread_pixelBlue_V_fu_107_p4() {
    pixelBlue_V_fu_107_p4 = pixel_V_TDATA.read().range(15, 8);
}

void getColorDistance_Str::thread_pixelGreen_V_fu_103_p1() {
    pixelGreen_V_fu_103_p1 = pixel_V_TDATA.read().range(8-1, 0);
}

void getColorDistance_Str::thread_pixelRed_V_fu_93_p4() {
    pixelRed_V_fu_93_p4 = pixel_V_TDATA.read().range(23, 16);
}

void getColorDistance_Str::thread_pixel_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        pixel_V_TDATA_blk_n = pixel_V_TVALID.read();
    } else {
        pixel_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void getColorDistance_Str::thread_pixel_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        pixel_V_TREADY = ap_const_logic_1;
    } else {
        pixel_V_TREADY = ap_const_logic_0;
    }
}

void getColorDistance_Str::thread_r_V_1_fu_165_p2() {
    r_V_1_fu_165_p2 = (!lhs_V_1_fu_157_p1.read().is_01() || !rhs_V_1_fu_161_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(lhs_V_1_fu_157_p1.read()) - sc_biguint<9>(rhs_V_1_fu_161_p1.read()));
}

void getColorDistance_Str::thread_r_V_2_fu_189_p2() {
    r_V_2_fu_189_p2 = (!lhs_V_2_fu_181_p1.read().is_01() || !rhs_V_2_fu_185_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(lhs_V_2_fu_181_p1.read()) - sc_biguint<9>(rhs_V_2_fu_185_p1.read()));
}

void getColorDistance_Str::thread_r_V_fu_151_p2() {
    r_V_fu_151_p2 = (!lhs_V_fu_139_p1.read().is_01() || !rhs_V_cast_fu_143_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(lhs_V_fu_139_p1.read()) - sc_biguint<9>(rhs_V_cast_fu_143_p3.read()));
}

void getColorDistance_Str::thread_result_1_fu_236_p0() {
    result_1_fu_236_p0 =  (sc_lv<9>) (number_assign_2_cast_fu_233_p1.read());
}

void getColorDistance_Str::thread_result_1_fu_236_p1() {
    result_1_fu_236_p1 =  (sc_lv<9>) (number_assign_2_cast_fu_233_p1.read());
}

void getColorDistance_Str::thread_result_1_fu_236_p2() {
    result_1_fu_236_p2 = (!result_1_fu_236_p0.read().is_01() || !result_1_fu_236_p1.read().is_01())? sc_lv<18>(): sc_bigint<9>(result_1_fu_236_p0.read()) * sc_bigint<9>(result_1_fu_236_p1.read());
}

void getColorDistance_Str::thread_result_2_cast3_fu_357_p1() {
    result_2_cast3_fu_357_p1 = esl_sext<20,18>(result_1_reg_543.read());
}

void getColorDistance_Str::thread_result_cast6_fu_246_p1() {
    result_cast6_fu_246_p1 = esl_sext<20,18>(result_reg_518.read());
}

void getColorDistance_Str::thread_result_fu_198_p0() {
    result_fu_198_p0 =  (sc_lv<9>) (number_assign_cast_fu_195_p1.read());
}

void getColorDistance_Str::thread_result_fu_198_p1() {
    result_fu_198_p1 =  (sc_lv<9>) (number_assign_cast_fu_195_p1.read());
}

void getColorDistance_Str::thread_result_fu_198_p2() {
    result_fu_198_p2 = (!result_fu_198_p0.read().is_01() || !result_fu_198_p1.read().is_01())? sc_lv<18>(): sc_bigint<9>(result_fu_198_p0.read()) * sc_bigint<9>(result_fu_198_p1.read());
}

void getColorDistance_Str::thread_rhs_V_1_fu_161_p1() {
    rhs_V_1_fu_161_p1 = esl_zext<9,8>(colorGreen_V_fu_125_p1.read());
}

void getColorDistance_Str::thread_rhs_V_2_fu_185_p1() {
    rhs_V_2_fu_185_p1 = esl_zext<9,8>(colorBlue_V_fu_129_p4.read());
}

void getColorDistance_Str::thread_rhs_V_cast_fu_143_p3() {
    rhs_V_cast_fu_143_p3 = (!rhs_V_fu_117_p3.read()[0].is_01())? sc_lv<9>(): ((rhs_V_fu_117_p3.read()[0].to_bool())? ap_const_lv9_FF: ap_const_lv9_0);
}

void getColorDistance_Str::thread_rhs_V_fu_117_p3() {
    rhs_V_fu_117_p3 = color_V.read().range(16, 16);
}

void getColorDistance_Str::thread_tmp1_fu_175_p1() {
    tmp1_fu_175_p1 = r_V_1_fu_165_p2.read();
}

void getColorDistance_Str::thread_tmp1_fu_175_p2() {
    tmp1_fu_175_p2 = (!ap_const_lv14_B.is_01() || !tmp1_fu_175_p1.read().is_01())? sc_lv<14>(): sc_biguint<14>(ap_const_lv14_B) * sc_bigint<9>(tmp1_fu_175_p1.read());
}

void getColorDistance_Str::thread_tmp2_fu_466_p2() {
    tmp2_fu_466_p2 = (!p_Val2_s_fu_440_p1.read().is_01() || !p_Val2_2_fu_462_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(p_Val2_s_fu_440_p1.read()) + sc_bigint<32>(p_Val2_2_fu_462_p1.read()));
}

void getColorDistance_Str::thread_tmp_10_cast_fu_337_p1() {
    tmp_10_cast_fu_337_p1 = esl_sext<20,19>(tmp_15_fu_327_p4.read());
}

void getColorDistance_Str::thread_tmp_10_fu_300_p4() {
    tmp_10_fu_300_p4 = tmp_2_fu_260_p2.read().range(19, 1);
}

void getColorDistance_Str::thread_tmp_11_cast_fu_347_p1() {
    tmp_11_cast_fu_347_p1 = esl_sext<21,20>(tmp_4_fu_341_p2.read());
}

void getColorDistance_Str::thread_tmp_11_fu_405_p2() {
    tmp_11_fu_405_p2 = (!ap_const_lv20_0.is_01() || !tmp_14_cast_fu_401_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(ap_const_lv20_0) - sc_bigint<20>(tmp_14_cast_fu_401_p1.read()));
}

void getColorDistance_Str::thread_tmp_12_fu_433_p3() {
    tmp_12_fu_433_p3 = esl_concat<20,8>(tmp_s_reg_553.read(), ap_const_lv8_0);
}

void getColorDistance_Str::thread_tmp_13_fu_214_p1() {
    tmp_13_fu_214_p1 = tmp_5_fu_489_p2.read().range(21-1, 0);
}

void getColorDistance_Str::thread_tmp_14_cast_fu_401_p1() {
    tmp_14_cast_fu_401_p1 = esl_sext<20,19>(tmp_20_fu_391_p4.read());
}

void getColorDistance_Str::thread_tmp_15_fu_327_p4() {
    tmp_15_fu_327_p4 = p_neg9_fu_322_p2.read().range(20, 2);
}

void getColorDistance_Str::thread_tmp_16_fu_425_p3() {
    tmp_16_fu_425_p3 = (!tmp_19_fu_377_p3.read()[0].is_01())? sc_lv<20>(): ((tmp_19_fu_377_p3.read()[0].to_bool())? tmp_11_fu_405_p2.read(): tmp_17_cast_fu_421_p1.read());
}

void getColorDistance_Str::thread_tmp_17_cast_fu_421_p1() {
    tmp_17_cast_fu_421_p1 = esl_sext<20,19>(tmp_21_fu_411_p4.read());
}

void getColorDistance_Str::thread_tmp_17_fu_444_p3() {
    tmp_17_fu_444_p3 = esl_concat<21,8>(tmp_6_reg_558.read(), ap_const_lv8_0);
}

void getColorDistance_Str::thread_tmp_18_fu_242_p1() {
    tmp_18_fu_242_p1 = result_1_fu_236_p2.read().range(17-1, 0);
}

void getColorDistance_Str::thread_tmp_19_fu_377_p3() {
    tmp_19_fu_377_p3 = tmp_9_fu_371_p2.read().range(19, 19);
}

void getColorDistance_Str::thread_tmp_1_fu_294_p2() {
    tmp_1_fu_294_p2 = (!ap_const_lv20_0.is_01() || !tmp_cast_fu_290_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(ap_const_lv20_0) - sc_bigint<20>(tmp_cast_fu_290_p1.read()));
}

void getColorDistance_Str::thread_tmp_20_fu_391_p4() {
    tmp_20_fu_391_p4 = p_neg_fu_385_p2.read().range(19, 1);
}

void getColorDistance_Str::thread_tmp_21_fu_411_p4() {
    tmp_21_fu_411_p4 = tmp_9_fu_371_p2.read().range(19, 1);
}

void getColorDistance_Str::thread_tmp_22_fu_455_p3() {
    tmp_22_fu_455_p3 = esl_concat<20,8>(tmp_16_reg_563.read(), ap_const_lv8_0);
}

void getColorDistance_Str::thread_tmp_2_fu_260_p2() {
    tmp_2_fu_260_p2 = (!result_cast6_fu_246_p1.read().is_01() || !p_shl1_cast_fu_256_p1.read().is_01())? sc_lv<20>(): (sc_bigint<20>(result_cast6_fu_246_p1.read()) + sc_bigint<20>(p_shl1_cast_fu_256_p1.read()));
}

void getColorDistance_Str::thread_tmp_4_cast_fu_310_p1() {
    tmp_4_cast_fu_310_p1 = esl_sext<20,19>(tmp_10_fu_300_p4.read());
}

void getColorDistance_Str::thread_tmp_4_fu_341_p2() {
    tmp_4_fu_341_p2 = (!ap_const_lv20_0.is_01() || !tmp_10_cast_fu_337_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(ap_const_lv20_0) - sc_bigint<20>(tmp_10_cast_fu_337_p1.read()));
}

void getColorDistance_Str::thread_tmp_6_fu_351_p3() {
    tmp_6_fu_351_p3 = (!tmp_14_reg_533.read()[0].is_01())? sc_lv<21>(): ((tmp_14_reg_533.read()[0].to_bool())? tmp_11_cast_fu_347_p1.read(): tmp_3_reg_538.read());
}

void getColorDistance_Str::thread_tmp_7_fu_266_p3() {
    tmp_7_fu_266_p3 = tmp_2_fu_260_p2.read().range(19, 19);
}

void getColorDistance_Str::thread_tmp_8_fu_280_p4() {
    tmp_8_fu_280_p4 = p_neg1_fu_274_p2.read().range(19, 1);
}

void getColorDistance_Str::thread_tmp_9_fu_371_p2() {
    tmp_9_fu_371_p2 = (!p_shl_cast_fu_367_p1.read().is_01() || !result_2_cast3_fu_357_p1.read().is_01())? sc_lv<20>(): (sc_bigint<20>(p_shl_cast_fu_367_p1.read()) - sc_bigint<20>(result_2_cast3_fu_357_p1.read()));
}

void getColorDistance_Str::thread_tmp_cast_fu_290_p1() {
    tmp_cast_fu_290_p1 = esl_sext<20,19>(tmp_8_fu_280_p4.read());
}

void getColorDistance_Str::thread_tmp_fu_204_p1() {
    tmp_fu_204_p1 = result_fu_198_p2.read().range(17-1, 0);
}

void getColorDistance_Str::thread_tmp_s_fu_314_p3() {
    tmp_s_fu_314_p3 = (!tmp_7_fu_266_p3.read()[0].is_01())? sc_lv<20>(): ((tmp_7_fu_266_p3.read()[0].to_bool())? tmp_1_fu_294_p2.read(): tmp_4_cast_fu_310_p1.read());
}

void getColorDistance_Str::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

