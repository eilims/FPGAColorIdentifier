// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getColorDistance_HH_
#define _getColorDistance_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fxp_sqrt.h"

namespace ap_rtl {

struct getColorDistance : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > pixel_TVALID;
    sc_in< sc_logic > ap_ce;
    sc_in< sc_lv<32> > pixel_TDATA;
    sc_out< sc_logic > pixel_TREADY;
    sc_in< sc_lv<17> > color;
    sc_out< sc_lv<12> > ap_return;
    sc_out< sc_logic > pixel_TDATA_blk_n;


    // Module declarations
    getColorDistance(sc_module_name name);
    SC_HAS_PROCESS(getColorDistance);

    ~getColorDistance();

    sc_trace_file* mVcdFile;

    fxp_sqrt* grp_fxp_sqrt_fu_66;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter12;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter13;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<18> > result_fu_155_p2;
    sc_signal< sc_lv<18> > result_reg_279;
    sc_signal< sc_lv<18> > result_1_fu_171_p2;
    sc_signal< sc_lv<18> > result_1_reg_284;
    sc_signal< sc_lv<28> > p_Val2_s_fu_221_p2;
    sc_signal< sc_lv<28> > p_Val2_s_reg_289;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<30> > grp_fxp_sqrt_fu_66_in_val_V_read;
    sc_signal< sc_lv<20> > grp_fxp_sqrt_fu_66_ap_return;
    sc_signal< sc_logic > grp_fxp_sqrt_fu_66_ap_ce;
    sc_signal< sc_lv<8> > pixelRed_fu_71_p4;
    sc_signal< sc_lv<8> > pixelGreen_fu_85_p4;
    sc_signal< sc_lv<8> > pixelBlue_fu_99_p1;
    sc_signal< sc_lv<1> > tmp_5_fu_107_p3;
    sc_signal< sc_lv<8> > colorGreen_fu_123_p4;
    sc_signal< sc_lv<8> > colorBlue_fu_137_p1;
    sc_signal< sc_lv<9> > pixelRed_cast_fu_81_p1;
    sc_signal< sc_lv<9> > colorRed_cast_fu_115_p3;
    sc_signal< sc_lv<9> > number_assign_fu_145_p2;
    sc_signal< sc_lv<9> > result_fu_155_p0;
    sc_signal< sc_lv<18> > number_assign_cast_c_fu_151_p1;
    sc_signal< sc_lv<9> > result_fu_155_p1;
    sc_signal< sc_lv<9> > pixelGreen_cast_fu_95_p1;
    sc_signal< sc_lv<9> > colorGreen_cast_fu_133_p1;
    sc_signal< sc_lv<9> > number_assign_1_fu_161_p2;
    sc_signal< sc_lv<9> > result_1_fu_171_p0;
    sc_signal< sc_lv<18> > number_assign_1_cast_fu_167_p1;
    sc_signal< sc_lv<9> > result_1_fu_171_p1;
    sc_signal< sc_lv<9> > pixelBlue_cast_fu_103_p1;
    sc_signal< sc_lv<9> > colorBlue_cast_fu_141_p1;
    sc_signal< sc_lv<9> > number_assign_2_fu_177_p2;
    sc_signal< sc_lv<9> > tmp_9_fu_191_p0;
    sc_signal< sc_lv<9> > tmp_9_fu_191_p1;
    sc_signal< sc_lv<17> > tmp_9_fu_191_p2;
    sc_signal< sc_lv<27> > p_shl_fu_197_p3;
    sc_signal< sc_lv<25> > p_shl9_fu_209_p3;
    sc_signal< sc_lv<28> > p_shl_cast_fu_205_p1;
    sc_signal< sc_lv<28> > p_shl9_cast_fu_217_p1;
    sc_signal< sc_lv<27> > tmp_fu_227_p3;
    sc_signal< sc_lv<28> > tmp_2_fu_238_p3;
    sc_signal< sc_lv<29> > p_Val2_2_cast_cast_fu_249_p1;
    sc_signal< sc_lv<29> > p_Val2_1_cast_fu_245_p1;
    sc_signal< sc_lv<29> > tmp5_fu_252_p2;
    sc_signal< sc_lv<30> > p_Val2_cast_fu_234_p1;
    sc_signal< sc_lv<30> > tmp5_cast_fu_258_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to12;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<9> ap_const_lv9_FF;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_13;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to12();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_return();
    void thread_colorBlue_cast_fu_141_p1();
    void thread_colorBlue_fu_137_p1();
    void thread_colorGreen_cast_fu_133_p1();
    void thread_colorGreen_fu_123_p4();
    void thread_colorRed_cast_fu_115_p3();
    void thread_grp_fxp_sqrt_fu_66_ap_ce();
    void thread_grp_fxp_sqrt_fu_66_in_val_V_read();
    void thread_number_assign_1_cast_fu_167_p1();
    void thread_number_assign_1_fu_161_p2();
    void thread_number_assign_2_fu_177_p2();
    void thread_number_assign_cast_c_fu_151_p1();
    void thread_number_assign_fu_145_p2();
    void thread_p_Val2_1_cast_fu_245_p1();
    void thread_p_Val2_2_cast_cast_fu_249_p1();
    void thread_p_Val2_cast_fu_234_p1();
    void thread_p_Val2_s_fu_221_p2();
    void thread_p_shl9_cast_fu_217_p1();
    void thread_p_shl9_fu_209_p3();
    void thread_p_shl_cast_fu_205_p1();
    void thread_p_shl_fu_197_p3();
    void thread_pixelBlue_cast_fu_103_p1();
    void thread_pixelBlue_fu_99_p1();
    void thread_pixelGreen_cast_fu_95_p1();
    void thread_pixelGreen_fu_85_p4();
    void thread_pixelRed_cast_fu_81_p1();
    void thread_pixelRed_fu_71_p4();
    void thread_pixel_TDATA_blk_n();
    void thread_pixel_TREADY();
    void thread_result_1_fu_171_p0();
    void thread_result_1_fu_171_p1();
    void thread_result_1_fu_171_p2();
    void thread_result_fu_155_p0();
    void thread_result_fu_155_p1();
    void thread_result_fu_155_p2();
    void thread_tmp5_cast_fu_258_p1();
    void thread_tmp5_fu_252_p2();
    void thread_tmp_2_fu_238_p3();
    void thread_tmp_5_fu_107_p3();
    void thread_tmp_9_fu_191_p0();
    void thread_tmp_9_fu_191_p1();
    void thread_tmp_9_fu_191_p2();
    void thread_tmp_fu_227_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
