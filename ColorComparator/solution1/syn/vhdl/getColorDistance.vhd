-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getColorDistance is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixel_TVALID : IN STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    pixel_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    pixel_TREADY : OUT STD_LOGIC;
    color : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0);
    pixel_TDATA_blk_n : OUT STD_LOGIC );
end;


architecture behav of getColorDistance is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal result_fu_155_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_reg_279 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_171_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_reg_284 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_221_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_reg_289 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_fxp_sqrt_fu_66_in_val_V_read : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fxp_sqrt_fu_66_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fxp_sqrt_fu_66_ap_ce : STD_LOGIC;
    signal pixelRed_fu_71_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelGreen_fu_85_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelBlue_fu_99_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal colorGreen_fu_123_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorBlue_fu_137_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelRed_cast_fu_81_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorRed_cast_fu_115_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_fu_145_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_155_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_cast_c_fu_151_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_fu_155_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_cast_fu_95_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorGreen_cast_fu_133_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_fu_161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_1_fu_171_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_cast_fu_167_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_cast_fu_103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorBlue_cast_fu_141_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_2_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_191_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_191_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_191_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_fu_197_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_fu_209_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl_cast_fu_205_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl9_cast_fu_217_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_fu_227_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_2_fu_238_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_2_cast_cast_fu_249_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_1_cast_fu_245_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_252_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_cast_fu_234_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp5_cast_fu_258_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fxp_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_val_V_read : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_fxp_sqrt_fu_66 : component fxp_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_val_V_read => grp_fxp_sqrt_fu_66_in_val_V_read,
        ap_return => grp_fxp_sqrt_fu_66_ap_return,
        ap_ce => grp_fxp_sqrt_fu_66_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    p_Val2_s_reg_289(27 downto 8) <= p_Val2_s_fu_221_p2(27 downto 8);
                result_1_reg_284 <= result_1_fu_171_p2;
                result_reg_279 <= result_fu_155_p2;
            end if;
        end if;
    end process;
    p_Val2_s_reg_289(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, pixel_TVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((pixel_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, pixel_TVALID, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_1) and ((pixel_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, pixel_TVALID)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((pixel_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fxp_sqrt_fu_66_ap_return(19 downto 8);
    colorBlue_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorBlue_fu_137_p1),9));
    colorBlue_fu_137_p1 <= color(8 - 1 downto 0);
    colorGreen_cast_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorGreen_fu_123_p4),9));
    colorGreen_fu_123_p4 <= color(15 downto 8);
    colorRed_cast_fu_115_p3 <= 
        ap_const_lv9_FF when (tmp_5_fu_107_p3(0) = '1') else 
        ap_const_lv9_0;

    grp_fxp_sqrt_fu_66_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fxp_sqrt_fu_66_ap_ce <= ap_const_logic_1;
        else 
            grp_fxp_sqrt_fu_66_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fxp_sqrt_fu_66_in_val_V_read <= std_logic_vector(signed(p_Val2_cast_fu_234_p1) + signed(tmp5_cast_fu_258_p1));
        number_assign_1_cast_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_1_fu_161_p2),18));

    number_assign_1_fu_161_p2 <= std_logic_vector(unsigned(pixelGreen_cast_fu_95_p1) - unsigned(colorGreen_cast_fu_133_p1));
    number_assign_2_fu_177_p2 <= std_logic_vector(unsigned(pixelBlue_cast_fu_103_p1) - unsigned(colorBlue_cast_fu_141_p1));
        number_assign_cast_c_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_fu_145_p2),18));

    number_assign_fu_145_p2 <= std_logic_vector(unsigned(pixelRed_cast_fu_81_p1) - unsigned(colorRed_cast_fu_115_p3));
        p_Val2_1_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_238_p3),29));

        p_Val2_2_cast_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_289),29));

        p_Val2_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_227_p3),30));

    p_Val2_s_fu_221_p2 <= std_logic_vector(signed(p_shl_cast_fu_205_p1) - signed(p_shl9_cast_fu_217_p1));
        p_shl9_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_fu_209_p3),28));

    p_shl9_fu_209_p3 <= (tmp_9_fu_191_p2 & ap_const_lv8_0);
        p_shl_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_197_p3),28));

    p_shl_fu_197_p3 <= (tmp_9_fu_191_p2 & ap_const_lv10_0);
    pixelBlue_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelBlue_fu_99_p1),9));
    pixelBlue_fu_99_p1 <= pixel_TDATA(8 - 1 downto 0);
    pixelGreen_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelGreen_fu_85_p4),9));
    pixelGreen_fu_85_p4 <= pixel_TDATA(15 downto 8);
    pixelRed_cast_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelRed_fu_71_p4),9));
    pixelRed_fu_71_p4 <= pixel_TDATA(23 downto 16);

    pixel_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, pixel_TVALID)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pixel_TDATA_blk_n <= pixel_TVALID;
        else 
            pixel_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pixel_TREADY_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pixel_TREADY <= ap_const_logic_1;
        else 
            pixel_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    result_1_fu_171_p0 <= number_assign_1_cast_fu_167_p1(9 - 1 downto 0);
    result_1_fu_171_p1 <= number_assign_1_cast_fu_167_p1(9 - 1 downto 0);
    result_1_fu_171_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_171_p0) * signed(result_1_fu_171_p1))), 18));
    result_fu_155_p0 <= number_assign_cast_c_fu_151_p1(9 - 1 downto 0);
    result_fu_155_p1 <= number_assign_cast_c_fu_151_p1(9 - 1 downto 0);
    result_fu_155_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_155_p0) * signed(result_fu_155_p1))), 18));
        tmp5_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_252_p2),30));

    tmp5_fu_252_p2 <= std_logic_vector(signed(p_Val2_2_cast_cast_fu_249_p1) + signed(p_Val2_1_cast_fu_245_p1));
    tmp_2_fu_238_p3 <= (result_1_reg_284 & ap_const_lv10_0);
    tmp_5_fu_107_p3 <= color(16 downto 16);
    tmp_9_fu_191_p0 <= number_assign_2_fu_177_p2;
    tmp_9_fu_191_p1 <= number_assign_2_fu_177_p2;
    tmp_9_fu_191_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_9_fu_191_p0) * signed(tmp_9_fu_191_p1))), 17));
    tmp_fu_227_p3 <= (result_reg_279 & ap_const_lv9_0);
end behav;
