-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getPixelClassification is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pixel : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getPixelClassification is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getPixelClassification,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.679625,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=687,HLS_SYN_LUT=4190}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_color_array_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_color_array_ce0 : STD_LOGIC;
    signal p_color_array_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal minimumDistanceIndex_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter2_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter10_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter11_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter12_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter13_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter14_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter15_minimumDistanceIndex_1_reg_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal minimumDistance_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal pixelRed_cast_fu_147_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelRed_cast_reg_385 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_cast_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelGreen_cast_reg_390 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_cast_fu_169_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal pixelBlue_cast_reg_395 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_reg_400 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_179_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_404 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal colorBlue_fu_190_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorBlue_reg_414 : STD_LOGIC_VECTOR (7 downto 0);
    signal colorGreen_reg_419 : STD_LOGIC_VECTOR (7 downto 0);
    signal number_assign_fu_220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_reg_424 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_234_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_reg_429 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_249_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_reg_434 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_s_fu_298_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_s_reg_439 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_reg_449 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_0_minimumDistanceI_fu_369_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal distance_0_minimumDi_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal grp_fxp_sqrt_fu_132_in_val_V_read : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fxp_sqrt_fu_132_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pixelRed_fu_137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelGreen_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelBlue_fu_165_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal colorRed_cast_cast_fu_202_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_fu_234_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_cast_c_fu_231_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_fu_234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorGreen_cast_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal result_1_fu_249_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_1_cast_fu_245_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal result_1_fu_249_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal colorBlue_cast_fu_228_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal number_assign_2_fu_255_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_268_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_268_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_268_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl_i_fu_274_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_shl9_i_fu_286_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl_i_cast_fu_282_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl9_i_cast_fu_294_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_3_fu_304_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_6_fu_315_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Val2_2_cast_cast_fu_326_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_1_cast_fu_322_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_329_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_cast_fu_311_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp5_cast_fu_335_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal minimumDistance_2_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal minimumDistanceIndex_2_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fxp_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_val_V_read : IN STD_LOGIC_VECTOR (29 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component getPixelClassificbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    p_color_array_U : component getPixelClassificbkb
    generic map (
        DataWidth => 17,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_color_array_address0,
        ce0 => p_color_array_ce0,
        q0 => p_color_array_q0);

    grp_fxp_sqrt_fu_132 : component fxp_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_val_V_read => grp_fxp_sqrt_fu_132_in_val_V_read,
        ap_return => grp_fxp_sqrt_fu_132_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    minimumDistanceIndex_1_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_400 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                minimumDistanceIndex_1_reg_108 <= i_reg_404;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                minimumDistanceIndex_1_reg_108 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    minimumDistanceIndex_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_reg_pp0_iter15_exitcond_reg_400 = ap_const_lv1_0))) then 
                minimumDistanceIndex_reg_96 <= i_0_minimumDistanceI_fu_369_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                minimumDistanceIndex_reg_96 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    minimumDistance_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_reg_pp0_iter15_exitcond_reg_400 = ap_const_lv1_0))) then 
                minimumDistance_reg_120 <= distance_0_minimumDi_fu_377_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                minimumDistance_reg_120 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_exitcond_reg_400 <= ap_reg_pp0_iter9_exitcond_reg_400;
                ap_reg_pp0_iter10_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter9_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter11_exitcond_reg_400 <= ap_reg_pp0_iter10_exitcond_reg_400;
                ap_reg_pp0_iter11_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter10_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter12_exitcond_reg_400 <= ap_reg_pp0_iter11_exitcond_reg_400;
                ap_reg_pp0_iter12_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter11_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter13_exitcond_reg_400 <= ap_reg_pp0_iter12_exitcond_reg_400;
                ap_reg_pp0_iter13_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter12_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter14_exitcond_reg_400 <= ap_reg_pp0_iter13_exitcond_reg_400;
                ap_reg_pp0_iter14_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter13_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter15_exitcond_reg_400 <= ap_reg_pp0_iter14_exitcond_reg_400;
                ap_reg_pp0_iter15_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter14_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter2_exitcond_reg_400 <= ap_reg_pp0_iter1_exitcond_reg_400;
                ap_reg_pp0_iter2_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter1_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter3_exitcond_reg_400 <= ap_reg_pp0_iter2_exitcond_reg_400;
                ap_reg_pp0_iter3_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter2_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter4_exitcond_reg_400 <= ap_reg_pp0_iter3_exitcond_reg_400;
                ap_reg_pp0_iter4_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter3_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter5_exitcond_reg_400 <= ap_reg_pp0_iter4_exitcond_reg_400;
                ap_reg_pp0_iter5_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter4_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter6_exitcond_reg_400 <= ap_reg_pp0_iter5_exitcond_reg_400;
                ap_reg_pp0_iter6_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter5_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter7_exitcond_reg_400 <= ap_reg_pp0_iter6_exitcond_reg_400;
                ap_reg_pp0_iter7_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter6_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter8_exitcond_reg_400 <= ap_reg_pp0_iter7_exitcond_reg_400;
                ap_reg_pp0_iter8_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter7_minimumDistanceIndex_1_reg_108;
                ap_reg_pp0_iter9_exitcond_reg_400 <= ap_reg_pp0_iter8_exitcond_reg_400;
                ap_reg_pp0_iter9_minimumDistanceIndex_1_reg_108 <= ap_reg_pp0_iter8_minimumDistanceIndex_1_reg_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_reg_400 <= exitcond_reg_400;
                ap_reg_pp0_iter1_minimumDistanceIndex_1_reg_108 <= minimumDistanceIndex_1_reg_108;
                exitcond_reg_400 <= exitcond_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_400 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                colorBlue_reg_414 <= colorBlue_fu_190_p1;
                colorGreen_reg_419 <= p_color_array_q0(15 downto 8);
                number_assign_reg_424 <= number_assign_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_reg_404 <= i_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_reg_400 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    p_Val2_s_reg_439(27 downto 8) <= p_Val2_s_fu_298_p2(27 downto 8);
                result_1_reg_434 <= result_1_fu_249_p2;
                result_reg_429 <= result_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    pixelBlue_cast_reg_395(7 downto 0) <= pixelBlue_cast_fu_169_p1(7 downto 0);
                    pixelGreen_cast_reg_390(7 downto 0) <= pixelGreen_cast_fu_161_p1(7 downto 0);
                    pixelRed_cast_reg_385(7 downto 0) <= pixelRed_cast_fu_147_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter14_exitcond_reg_400 = ap_const_lv1_0))) then
                tmp_5_reg_449 <= grp_fxp_sqrt_fu_132_ap_return(19 downto 8);
            end if;
        end if;
    end process;
    pixelRed_cast_reg_385(8) <= '0';
    pixelGreen_cast_reg_390(8) <= '0';
    pixelBlue_cast_reg_395(8) <= '0';
    p_Val2_s_reg_439(7 downto 0) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_fu_173_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_173_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_fu_173_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_fu_173_p2)
    begin
        if ((exitcond_fu_173_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4_assign_proc : process(minimumDistanceIndex_1_reg_108, ap_CS_fsm_pp0_stage0, exitcond_reg_400, i_reg_404, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_reg_400 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4 <= i_reg_404;
        else 
            ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4 <= minimumDistanceIndex_1_reg_108;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= minimumDistanceIndex_reg_96;
    colorBlue_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorBlue_reg_414),9));
    colorBlue_fu_190_p1 <= p_color_array_q0(8 - 1 downto 0);
    colorGreen_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colorGreen_reg_419),9));
    colorRed_cast_cast_fu_202_p3 <= 
        ap_const_lv9_FF when (tmp_8_fu_194_p3(0) = '1') else 
        ap_const_lv9_0;
    distance_0_minimumDi_fu_377_p3 <= 
        minimumDistance_2_fu_360_p1 when (tmp_1_fu_363_p2(0) = '1') else 
        minimumDistance_reg_120;
    exitcond_fu_173_p2 <= "1" when (ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4 = ap_const_lv3_6) else "0";
    grp_fxp_sqrt_fu_132_in_val_V_read <= std_logic_vector(signed(p_Val2_cast_fu_311_p1) + signed(tmp5_cast_fu_335_p1));
    i_0_minimumDistanceI_fu_369_p3 <= 
        minimumDistanceIndex_2_fu_356_p1 when (tmp_1_fu_363_p2(0) = '1') else 
        minimumDistanceIndex_reg_96;
    i_fu_179_p2 <= std_logic_vector(unsigned(ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4) + unsigned(ap_const_lv3_1));
    minimumDistanceIndex_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter15_minimumDistanceIndex_1_reg_108),32));
    minimumDistance_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_449),32));
        number_assign_1_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_1_fu_240_p2),18));

    number_assign_1_fu_240_p2 <= std_logic_vector(unsigned(pixelGreen_cast_reg_390) - unsigned(colorGreen_cast_fu_225_p1));
    number_assign_2_fu_255_p2 <= std_logic_vector(unsigned(pixelBlue_cast_reg_395) - unsigned(colorBlue_cast_fu_228_p1));
        number_assign_cast_c_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(number_assign_reg_424),18));

    number_assign_fu_220_p2 <= std_logic_vector(unsigned(pixelRed_cast_reg_385) - unsigned(colorRed_cast_cast_fu_202_p3));
        p_Val2_1_cast_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_315_p3),29));

        p_Val2_2_cast_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_439),29));

        p_Val2_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_304_p3),30));

    p_Val2_s_fu_298_p2 <= std_logic_vector(signed(p_shl_i_cast_fu_282_p1) - signed(p_shl9_i_cast_fu_294_p1));
    p_color_array_address0 <= tmp_fu_185_p1(3 - 1 downto 0);

    p_color_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            p_color_array_ce0 <= ap_const_logic_1;
        else 
            p_color_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        p_shl9_i_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl9_i_fu_286_p3),28));

    p_shl9_i_fu_286_p3 <= (tmp_11_fu_268_p2 & ap_const_lv8_0);
        p_shl_i_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_i_fu_274_p3),28));

    p_shl_i_fu_274_p3 <= (tmp_11_fu_268_p2 & ap_const_lv10_0);
    pixelBlue_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelBlue_fu_165_p1),9));
    pixelBlue_fu_165_p1 <= pixel(8 - 1 downto 0);
    pixelGreen_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelGreen_fu_151_p4),9));
    pixelGreen_fu_151_p4 <= pixel(15 downto 8);
    pixelRed_cast_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixelRed_fu_137_p4),9));
    pixelRed_fu_137_p4 <= pixel(23 downto 16);
    result_1_fu_249_p0 <= number_assign_1_cast_fu_245_p1(9 - 1 downto 0);
    result_1_fu_249_p1 <= number_assign_1_cast_fu_245_p1(9 - 1 downto 0);
    result_1_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_249_p0) * signed(result_1_fu_249_p1))), 18));
    result_fu_234_p0 <= number_assign_cast_c_fu_231_p1(9 - 1 downto 0);
    result_fu_234_p1 <= number_assign_cast_c_fu_231_p1(9 - 1 downto 0);
    result_fu_234_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_234_p0) * signed(result_fu_234_p1))), 18));
        tmp5_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_329_p2),30));

    tmp5_fu_329_p2 <= std_logic_vector(signed(p_Val2_2_cast_cast_fu_326_p1) + signed(p_Val2_1_cast_fu_322_p1));
    tmp_11_fu_268_p0 <= number_assign_2_fu_255_p2;
    tmp_11_fu_268_p1 <= number_assign_2_fu_255_p2;
    tmp_11_fu_268_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_11_fu_268_p0) * signed(tmp_11_fu_268_p1))), 17));
    tmp_1_fu_363_p2 <= "1" when (signed(minimumDistance_2_fu_360_p1) < signed(minimumDistance_reg_120)) else "0";
    tmp_3_fu_304_p3 <= (result_reg_429 & ap_const_lv9_0);
    tmp_6_fu_315_p3 <= (result_1_reg_434 & ap_const_lv10_0);
    tmp_8_fu_194_p3 <= p_color_array_q0(16 downto 16);
    tmp_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_minimumDistanceIndex_1_phi_fu_112_p4),64));
end behav;
