// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getConvolutionResult_HH_
#define _getConvolutionResult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "getConvolutionResbkb.h"

namespace ap_rtl {

struct getConvolutionResult : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<4> > array_r_address1;
    sc_out< sc_logic > array_r_ce1;
    sc_in< sc_lv<32> > array_r_q1;
    sc_out< sc_lv<32> > ap_return;
    sc_signal< sc_lv<32> > ap_var_for_const4;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const3;


    // Module declarations
    getConvolutionResult(sc_module_name name);
    SC_HAS_PROCESS(getConvolutionResult);

    ~getConvolutionResult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    getConvolutionResbkb<1,1,32,32,32,2,32>* getConvolutionResbkb_U1;
    getConvolutionResbkb<1,1,32,32,32,2,32>* getConvolutionResbkb_U2;
    getConvolutionResbkb<1,1,32,32,32,2,32>* getConvolutionResbkb_U3;
    getConvolutionResbkb<1,1,32,32,32,2,32>* getConvolutionResbkb_U4;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > row_i_reg_99;
    sc_signal< sc_lv<32> > verticalResult_assig_reg_111;
    sc_signal< sc_lv<2> > row_i1_reg_123;
    sc_signal< sc_lv<32> > horizontalResult_ass_reg_135;
    sc_signal< sc_lv<32> > reg_147;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond1_i_reg_364;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_state8_pp1_stage1_iter0;
    sc_signal< bool > ap_block_state10_pp1_stage1_iter1;
    sc_signal< bool > ap_block_pp1_stage1_11001;
    sc_signal< sc_lv<1> > exitcond1_i3_reg_408;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<32> > reg_151;
    sc_signal< sc_lv<1> > exitcond1_i_fu_160_p2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond1_i_reg_364;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond1_i_reg_364;
    sc_signal< sc_lv<2> > row_fu_166_p2;
    sc_signal< sc_lv<2> > row_reg_368;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_1_fu_210_p5;
    sc_signal< sc_lv<32> > tmp_1_reg_383;
    sc_signal< sc_lv<32> > tmp_2_fu_222_p5;
    sc_signal< sc_lv<32> > tmp_2_reg_388;
    sc_signal< sc_lv<32> > tmp_3_i_fu_234_p2;
    sc_signal< sc_lv<32> > tmp_3_i_reg_393;
    sc_signal< sc_lv<32> > tmp_3_2_i_fu_239_p2;
    sc_signal< sc_lv<32> > tmp_3_2_i_reg_398;
    sc_signal< sc_lv<32> > summation_2_2_i_fu_248_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > exitcond1_i3_fu_254_p2;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter1_exitcond1_i3_reg_408;
    sc_signal< sc_lv<2> > row_1_fu_260_p2;
    sc_signal< sc_lv<2> > row_1_reg_412;
    sc_signal< sc_lv<5> > tmp_10_fu_282_p2;
    sc_signal< sc_lv<5> > tmp_10_reg_417;
    sc_signal< sc_lv<32> > tmp_4_fu_314_p5;
    sc_signal< sc_lv<32> > tmp_4_reg_437;
    sc_signal< sc_lv<32> > tmp_5_fu_326_p5;
    sc_signal< sc_lv<32> > tmp_5_reg_442;
    sc_signal< sc_lv<32> > grp_fu_155_p2;
    sc_signal< sc_lv<32> > tmp_8_i_reg_447;
    sc_signal< sc_lv<32> > tmp_8_1_i_fu_338_p2;
    sc_signal< sc_lv<32> > tmp_8_1_i_reg_452;
    sc_signal< sc_lv<32> > tmp_8_2_i_reg_457;
    sc_signal< sc_lv<32> > summation_3_2_i_fu_352_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state7;
    sc_signal< bool > ap_block_pp1_stage1_subdone;
    sc_signal< sc_lv<2> > ap_phi_mux_row_i_phi_fu_103_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_row_i1_phi_fu_127_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > tmp_8_cast_fu_194_p1;
    sc_signal< sc_lv<64> > tmp_9_cast_fu_205_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_288_p1;
    sc_signal< sc_lv<64> > tmp_12_cast_fu_299_p1;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_309_p1;
    sc_signal< bool > ap_block_pp1_stage1;
    sc_signal< sc_lv<4> > tmp_7_fu_176_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_184_p1;
    sc_signal< sc_lv<5> > tmp_i_cast_fu_172_p1;
    sc_signal< sc_lv<5> > tmp_8_fu_188_p2;
    sc_signal< sc_lv<5> > tmp_9_fu_199_p2;
    sc_signal< sc_lv<32> > tmp_3_fu_244_p2;
    sc_signal< sc_lv<4> > tmp_s_fu_270_p3;
    sc_signal< sc_lv<5> > p_shl1_cast_fu_278_p1;
    sc_signal< sc_lv<5> > tmp_i4_cast_fu_266_p1;
    sc_signal< sc_lv<5> > tmp_11_fu_293_p2;
    sc_signal< sc_lv<5> > tmp_12_fu_304_p2;
    sc_signal< sc_lv<32> > tmp_fu_343_p2;
    sc_signal< sc_lv<32> > tmp_6_fu_347_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_pp1_stage1;
    static const sc_lv<6> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_FFFFFFFE;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp1_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp1_stage1();
    void thread_ap_block_pp1_stage1_11001();
    void thread_ap_block_pp1_stage1_subdone();
    void thread_ap_block_state10_pp1_stage1_iter1();
    void thread_ap_block_state11_pp1_stage0_iter2();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage1_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_row_i1_phi_fu_127_p4();
    void thread_ap_phi_mux_row_i_phi_fu_103_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_array_r_address0();
    void thread_array_r_address1();
    void thread_array_r_ce0();
    void thread_array_r_ce1();
    void thread_exitcond1_i3_fu_254_p2();
    void thread_exitcond1_i_fu_160_p2();
    void thread_grp_fu_155_p2();
    void thread_p_shl1_cast_fu_278_p1();
    void thread_p_shl_cast_fu_184_p1();
    void thread_row_1_fu_260_p2();
    void thread_row_fu_166_p2();
    void thread_summation_2_2_i_fu_248_p2();
    void thread_summation_3_2_i_fu_352_p2();
    void thread_tmp_10_fu_282_p2();
    void thread_tmp_11_cast_fu_288_p1();
    void thread_tmp_11_fu_293_p2();
    void thread_tmp_12_cast_fu_299_p1();
    void thread_tmp_12_fu_304_p2();
    void thread_tmp_13_cast_fu_309_p1();
    void thread_tmp_3_2_i_fu_239_p2();
    void thread_tmp_3_fu_244_p2();
    void thread_tmp_3_i_fu_234_p2();
    void thread_tmp_6_fu_347_p2();
    void thread_tmp_7_fu_176_p3();
    void thread_tmp_8_1_i_fu_338_p2();
    void thread_tmp_8_cast_fu_194_p1();
    void thread_tmp_8_fu_188_p2();
    void thread_tmp_9_cast_fu_205_p1();
    void thread_tmp_9_fu_199_p2();
    void thread_tmp_fu_343_p2();
    void thread_tmp_i4_cast_fu_266_p1();
    void thread_tmp_i_cast_fu_172_p1();
    void thread_tmp_s_fu_270_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
