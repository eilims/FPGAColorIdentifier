// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=509,HLS_SYN_LUT=685}" *)

module getConvolutionResult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        array_r_address1,
        array_r_ce1,
        array_r_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_state6 = 6'd4;
parameter    ap_ST_fsm_pp1_stage0 = 6'd8;
parameter    ap_ST_fsm_pp1_stage1 = 6'd16;
parameter    ap_ST_fsm_state12 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [3:0] array_r_address1;
output   array_r_ce1;
input  [31:0] array_r_q1;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] array_r_address0;
reg array_r_ce0;
reg[3:0] array_r_address1;
reg array_r_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] row_i_reg_99;
reg   [31:0] verticalResult_assig_reg_111;
reg   [1:0] row_i1_reg_123;
reg   [31:0] horizontalResult_ass_reg_135;
reg  signed [31:0] reg_147;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond1_i_reg_364;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state10_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] exitcond1_i3_reg_408;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg  signed [31:0] reg_151;
wire   [0:0] exitcond1_i_fu_160_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond1_i_reg_364;
reg   [0:0] ap_reg_pp0_iter2_exitcond1_i_reg_364;
wire   [1:0] row_fu_166_p2;
reg   [1:0] row_reg_368;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] tmp_1_fu_210_p5;
reg  signed [31:0] tmp_1_reg_383;
wire  signed [31:0] tmp_2_fu_222_p5;
reg  signed [31:0] tmp_2_reg_388;
wire   [31:0] tmp_3_i_fu_234_p2;
reg   [31:0] tmp_3_i_reg_393;
wire   [31:0] tmp_3_2_i_fu_239_p2;
reg   [31:0] tmp_3_2_i_reg_398;
wire   [31:0] summation_2_2_i_fu_248_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [0:0] exitcond1_i3_fu_254_p2;
reg   [0:0] ap_reg_pp1_iter1_exitcond1_i3_reg_408;
wire   [1:0] row_1_fu_260_p2;
reg   [1:0] row_1_reg_412;
wire   [4:0] tmp_10_fu_282_p2;
reg   [4:0] tmp_10_reg_417;
wire  signed [31:0] tmp_4_fu_314_p5;
reg  signed [31:0] tmp_4_reg_437;
wire  signed [31:0] tmp_5_fu_326_p5;
reg  signed [31:0] tmp_5_reg_442;
wire   [31:0] grp_fu_155_p2;
reg   [31:0] tmp_8_i_reg_447;
wire   [31:0] tmp_8_1_i_fu_338_p2;
reg   [31:0] tmp_8_1_i_reg_452;
reg   [31:0] tmp_8_2_i_reg_457;
wire   [31:0] summation_3_2_i_fu_352_p2;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire    ap_block_pp1_stage1_subdone;
reg   [1:0] ap_phi_mux_row_i_phi_fu_103_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_row_i1_phi_fu_127_p4;
wire    ap_block_pp1_stage0;
wire  signed [63:0] tmp_8_cast_fu_194_p1;
wire  signed [63:0] tmp_9_cast_fu_205_p1;
wire  signed [63:0] tmp_11_cast_fu_288_p1;
wire  signed [63:0] tmp_12_cast_fu_299_p1;
wire  signed [63:0] tmp_13_cast_fu_309_p1;
wire    ap_block_pp1_stage1;
wire   [3:0] tmp_7_fu_176_p3;
wire   [4:0] p_shl_cast_fu_184_p1;
wire   [4:0] tmp_i_cast_fu_172_p1;
wire   [4:0] tmp_8_fu_188_p2;
wire   [4:0] tmp_9_fu_199_p2;
wire   [31:0] tmp_3_fu_244_p2;
wire   [3:0] tmp_s_fu_270_p3;
wire   [4:0] p_shl1_cast_fu_278_p1;
wire   [4:0] tmp_i4_cast_fu_266_p1;
wire   [4:0] tmp_11_fu_293_p2;
wire   [4:0] tmp_12_fu_304_p2;
wire   [31:0] tmp_fu_343_p2;
wire   [31:0] tmp_6_fu_347_p2;
wire    ap_CS_fsm_state12;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
getConvolutionResbkb_U1(
    .din0(32'd1),
    .din1(32'd2),
    .din2(32'd1),
    .din3(row_i_reg_99),
    .dout(tmp_1_fu_210_p5)
);

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
getConvolutionResbkb_U2(
    .din0(32'd4294967295),
    .din1(32'd4294967294),
    .din2(32'd4294967295),
    .din3(row_i_reg_99),
    .dout(tmp_2_fu_222_p5)
);

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
getConvolutionResbkb_U3(
    .din0(32'd1),
    .din1(32'd0),
    .din2(32'd4294967295),
    .din3(row_i1_reg_123),
    .dout(tmp_4_fu_314_p5)
);

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
getConvolutionResbkb_U4(
    .din0(32'd2),
    .din1(32'd0),
    .din2(32'd4294967294),
    .din3(row_i1_reg_123),
    .dout(tmp_5_fu_326_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        horizontalResult_ass_reg_135 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond1_i3_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        horizontalResult_ass_reg_135 <= summation_3_2_i_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_i1_reg_123 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_i1_reg_123 <= row_1_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_i_reg_99 <= row_reg_368;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_i_reg_99 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        verticalResult_assig_reg_111 <= summation_2_2_i_fu_248_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        verticalResult_assig_reg_111 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond1_i_reg_364 <= exitcond1_i_reg_364;
        exitcond1_i_reg_364 <= exitcond1_i_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond1_i_reg_364 <= ap_reg_pp0_iter1_exitcond1_i_reg_364;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond1_i3_reg_408 <= exitcond1_i3_reg_408;
        exitcond1_i3_reg_408 <= exitcond1_i3_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_147 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_151 <= array_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        row_1_reg_412 <= row_1_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        row_reg_368 <= row_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_i3_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_10_reg_417 <= tmp_10_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_383 <= tmp_1_fu_210_p5;
        tmp_2_reg_388 <= tmp_2_fu_222_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_2_i_reg_398 <= tmp_3_2_i_fu_239_p2;
        tmp_3_i_reg_393 <= tmp_3_i_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (exitcond1_i3_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_4_reg_437 <= tmp_4_fu_314_p5;
        tmp_5_reg_442 <= tmp_5_fu_326_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_i3_reg_408 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_8_1_i_reg_452 <= tmp_8_1_i_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_reg_pp1_iter1_exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_8_2_i_reg_457 <= grp_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond1_i3_reg_408 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_8_i_reg_447 <= grp_fu_155_p2;
    end
end

always @ (*) begin
    if ((exitcond1_i_fu_160_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_i3_fu_254_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i3_reg_408 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_row_i1_phi_fu_127_p4 = row_1_reg_412;
    end else begin
        ap_phi_mux_row_i1_phi_fu_127_p4 = row_i1_reg_123;
    end
end

always @ (*) begin
    if (((exitcond1_i_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_i_phi_fu_103_p4 = row_reg_368;
    end else begin
        ap_phi_mux_row_i_phi_fu_103_p4 = row_i_reg_99;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        array_r_address0 = tmp_13_cast_fu_309_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        array_r_address0 = tmp_11_cast_fu_288_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        array_r_address0 = tmp_8_cast_fu_194_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        array_r_address1 = tmp_12_cast_fu_299_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        array_r_address1 = tmp_9_cast_fu_205_p1;
    end else begin
        array_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        array_r_ce1 = 1'b1;
    end else begin
        array_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_fu_160_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_i_fu_160_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond1_i3_fu_254_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond1_i3_fu_254_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = (horizontalResult_ass_reg_135 + verticalResult_assig_reg_111);

assign exitcond1_i3_fu_254_p2 = ((ap_phi_mux_row_i1_phi_fu_127_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_160_p2 = ((ap_phi_mux_row_i_phi_fu_103_p4 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_155_p2 = ($signed(tmp_4_reg_437) * $signed(reg_147));

assign p_shl1_cast_fu_278_p1 = tmp_s_fu_270_p3;

assign p_shl_cast_fu_184_p1 = tmp_7_fu_176_p3;

assign row_1_fu_260_p2 = (ap_phi_mux_row_i1_phi_fu_127_p4 + 2'd1);

assign row_fu_166_p2 = (ap_phi_mux_row_i_phi_fu_103_p4 + 2'd1);

assign summation_2_2_i_fu_248_p2 = (tmp_3_fu_244_p2 + verticalResult_assig_reg_111);

assign summation_3_2_i_fu_352_p2 = (tmp_6_fu_347_p2 + horizontalResult_ass_reg_135);

assign tmp_10_fu_282_p2 = (p_shl1_cast_fu_278_p1 - tmp_i4_cast_fu_266_p1);

assign tmp_11_cast_fu_288_p1 = $signed(tmp_10_fu_282_p2);

assign tmp_11_fu_293_p2 = (tmp_10_fu_282_p2 + 5'd1);

assign tmp_12_cast_fu_299_p1 = $signed(tmp_11_fu_293_p2);

assign tmp_12_fu_304_p2 = (tmp_10_reg_417 + 5'd2);

assign tmp_13_cast_fu_309_p1 = $signed(tmp_12_fu_304_p2);

assign tmp_3_2_i_fu_239_p2 = ($signed(tmp_2_reg_388) * $signed(reg_151));

assign tmp_3_fu_244_p2 = (tmp_3_i_reg_393 + tmp_3_2_i_reg_398);

assign tmp_3_i_fu_234_p2 = ($signed(tmp_1_reg_383) * $signed(reg_147));

assign tmp_6_fu_347_p2 = (tmp_8_i_reg_447 + tmp_fu_343_p2);

assign tmp_7_fu_176_p3 = {{ap_phi_mux_row_i_phi_fu_103_p4}, {2'd0}};

assign tmp_8_1_i_fu_338_p2 = ($signed(tmp_5_reg_442) * $signed(reg_151));

assign tmp_8_cast_fu_194_p1 = $signed(tmp_8_fu_188_p2);

assign tmp_8_fu_188_p2 = (p_shl_cast_fu_184_p1 - tmp_i_cast_fu_172_p1);

assign tmp_9_cast_fu_205_p1 = $signed(tmp_9_fu_199_p2);

assign tmp_9_fu_199_p2 = (tmp_8_fu_188_p2 + 5'd2);

assign tmp_fu_343_p2 = (tmp_8_2_i_reg_457 + tmp_8_1_i_reg_452);

assign tmp_i4_cast_fu_266_p1 = ap_phi_mux_row_i1_phi_fu_127_p4;

assign tmp_i_cast_fu_172_p1 = ap_phi_mux_row_i_phi_fu_103_p4;

assign tmp_s_fu_270_p3 = {{ap_phi_mux_row_i1_phi_fu_127_p4}, {2'd0}};

endmodule //getConvolutionResult
