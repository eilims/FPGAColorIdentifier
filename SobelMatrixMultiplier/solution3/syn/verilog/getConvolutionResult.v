// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=833,HLS_SYN_LUT=4217}" *)

module getConvolutionResult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state7 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state13 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] array_r_address0;
output   array_r_ce0;
input  [95:0] array_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] array_r_address0;
reg array_r_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_90;
reg   [1:0] row_i_reg_101;
reg   [31:0] summation_1_i_reg_112;
reg   [1:0] col_i_reg_124;
reg   [3:0] indvar_flatten1_reg_135;
reg   [1:0] row_i2_reg_146;
reg   [31:0] summation_1_i6_reg_157;
reg   [1:0] col_i7_reg_169;
wire   [0:0] exitcond_flatten_fu_180_p2;
reg   [0:0] exitcond_flatten_reg_722;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_722;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_722;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_722;
wire   [3:0] indvar_flatten_next_fu_186_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] col_i_mid2_fu_198_p3;
reg   [1:0] col_i_mid2_reg_731;
wire   [1:0] tmp_6_i_cast_mid2_v_s_fu_212_p3;
reg   [1:0] tmp_6_i_cast_mid2_v_s_reg_736;
wire   [1:0] col_fu_225_p2;
wire   [6:0] tmp_10_fu_302_p2;
reg   [6:0] tmp_10_reg_752;
wire   [95:0] tmp_13_fu_312_p2;
reg   [95:0] tmp_13_reg_757;
wire   [6:0] tmp_25_fu_387_p2;
reg   [6:0] tmp_25_reg_762;
wire   [95:0] tmp_28_fu_397_p2;
reg   [95:0] tmp_28_reg_767;
wire  signed [31:0] tmp_16_fu_417_p1;
reg  signed [31:0] tmp_16_reg_772;
wire  signed [31:0] tmp_31_fu_435_p1;
reg  signed [31:0] tmp_31_reg_777;
wire   [31:0] tmp_3_i_fu_439_p2;
reg   [31:0] tmp_3_i_reg_782;
wire   [31:0] summation_fu_443_p2;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] exitcond_flatten1_fu_448_p2;
reg   [0:0] exitcond_flatten1_reg_792;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
wire    ap_block_state12_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten1_reg_792;
reg   [0:0] ap_reg_pp1_iter2_exitcond_flatten1_reg_792;
reg   [0:0] ap_reg_pp1_iter3_exitcond_flatten1_reg_792;
wire   [3:0] indvar_flatten_next1_fu_454_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [1:0] col_i7_mid2_fu_466_p3;
reg   [1:0] col_i7_mid2_reg_801;
wire   [1:0] tmp_14_i_cast_mid2_v_1_fu_480_p3;
reg   [1:0] tmp_14_i_cast_mid2_v_1_reg_806;
wire   [1:0] col_1_fu_493_p2;
wire   [6:0] tmp_40_fu_570_p2;
reg   [6:0] tmp_40_reg_822;
wire   [95:0] tmp_43_fu_580_p2;
reg   [95:0] tmp_43_reg_827;
wire   [6:0] tmp_55_fu_655_p2;
reg   [6:0] tmp_55_reg_832;
wire   [95:0] tmp_58_fu_665_p2;
reg   [95:0] tmp_58_reg_837;
wire  signed [31:0] tmp_46_fu_685_p1;
reg  signed [31:0] tmp_46_reg_842;
wire  signed [31:0] tmp_61_fu_703_p1;
reg  signed [31:0] tmp_61_reg_847;
wire   [31:0] tmp_8_i1_fu_707_p2;
reg   [31:0] tmp_8_i1_reg_852;
wire   [31:0] summation_1_fu_711_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [1:0] ap_phi_mux_row_i_phi_fu_105_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_row_i2_phi_fu_150_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_2_i_fu_220_p1;
wire   [63:0] tmp_7_i9_fu_488_p1;
wire   [0:0] exitcond_i_fu_192_p2;
wire   [1:0] row_fu_206_p2;
wire   [6:0] tmp_6_i_cast_mid2_v_fu_231_p3;
wire   [6:0] tmp_7_i_cast_mid2_v_fu_238_p2;
wire   [0:0] tmp_2_fu_244_p2;
wire   [6:0] tmp_4_fu_260_p2;
wire   [6:0] tmp_6_fu_272_p2;
reg   [95:0] tmp_3_fu_250_p4;
wire   [6:0] tmp_5_fu_266_p2;
wire   [6:0] tmp_7_fu_278_p3;
wire   [6:0] tmp_9_fu_294_p3;
wire   [95:0] tmp_8_fu_286_p3;
wire   [95:0] tmp_11_fu_308_p1;
wire   [95:0] tmp_fu_318_p5;
wire   [0:0] tmp_17_fu_329_p2;
wire   [6:0] tmp_19_fu_345_p2;
wire   [6:0] tmp_21_fu_357_p2;
reg   [95:0] tmp_18_fu_335_p4;
wire   [6:0] tmp_20_fu_351_p2;
wire   [6:0] tmp_22_fu_363_p3;
wire   [6:0] tmp_24_fu_379_p3;
wire   [95:0] tmp_23_fu_371_p3;
wire   [95:0] tmp_26_fu_393_p1;
wire   [95:0] tmp_12_fu_403_p1;
wire   [95:0] tmp_14_fu_406_p2;
wire   [95:0] tmp_15_fu_412_p2;
wire   [95:0] tmp_27_fu_421_p1;
wire   [95:0] tmp_29_fu_424_p2;
wire   [95:0] tmp_30_fu_430_p2;
wire   [0:0] exitcond_i1_fu_460_p2;
wire   [1:0] row_s_fu_474_p2;
wire   [6:0] tmp_14_i_cast_mid2_v_fu_499_p3;
wire   [6:0] tmp_15_i_cast_mid2_v_fu_506_p2;
wire   [0:0] tmp_32_fu_512_p2;
wire   [6:0] tmp_34_fu_528_p2;
wire   [6:0] tmp_36_fu_540_p2;
reg   [95:0] tmp_33_fu_518_p4;
wire   [6:0] tmp_35_fu_534_p2;
wire   [6:0] tmp_37_fu_546_p3;
wire   [6:0] tmp_39_fu_562_p3;
wire   [95:0] tmp_38_fu_554_p3;
wire   [95:0] tmp_41_fu_576_p1;
wire   [95:0] tmp_1_fu_586_p5;
wire   [0:0] tmp_47_fu_597_p2;
wire   [6:0] tmp_49_fu_613_p2;
wire   [6:0] tmp_51_fu_625_p2;
reg   [95:0] tmp_48_fu_603_p4;
wire   [6:0] tmp_50_fu_619_p2;
wire   [6:0] tmp_52_fu_631_p3;
wire   [6:0] tmp_54_fu_647_p3;
wire   [95:0] tmp_53_fu_639_p3;
wire   [95:0] tmp_56_fu_661_p1;
wire   [95:0] tmp_42_fu_671_p1;
wire   [95:0] tmp_44_fu_674_p2;
wire   [95:0] tmp_45_fu_680_p2;
wire   [95:0] tmp_57_fu_689_p1;
wire   [95:0] tmp_59_fu_692_p2;
wire   [95:0] tmp_60_fu_698_p2;
wire    ap_CS_fsm_state13;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .din2_WIDTH( 96 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 96 ))
getConvolutionResbkb_U1(
    .din0(96'd18446744082299486209),
    .din1(96'd0),
    .din2(96'd79228162514264337589248983039),
    .din3(col_i_mid2_reg_731),
    .dout(tmp_fu_318_p5)
);

getConvolutionResbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 96 ),
    .din1_WIDTH( 96 ),
    .din2_WIDTH( 96 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 96 ))
getConvolutionResbkb_U2(
    .din0(96'd79228162495817593519834398721),
    .din1(96'd79228162477370849446124847106),
    .din2(96'd79228162495817593519834398721),
    .din3(col_i7_mid2_reg_801),
    .dout(tmp_1_fu_586_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_i7_reg_169 <= 2'd0;
    end else if (((exitcond_flatten1_fu_448_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        col_i7_reg_169 <= col_1_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_180_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_reg_124 <= col_fu_225_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_i_reg_124 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten1_reg_135 <= 4'd0;
    end else if (((exitcond_flatten1_fu_448_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten1_reg_135 <= indvar_flatten_next1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_180_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_90 <= indvar_flatten_next_fu_186_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_90 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_i2_reg_146 <= 2'd0;
    end else if (((exitcond_flatten1_reg_792 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        row_i2_reg_146 <= tmp_14_i_cast_mid2_v_1_reg_806;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_722 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        row_i_reg_101 <= tmp_6_i_cast_mid2_v_s_reg_736;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_i_reg_101 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        summation_1_i6_reg_157 <= 32'd0;
    end else if (((ap_reg_pp1_iter3_exitcond_flatten1_reg_792 == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        summation_1_i6_reg_157 <= summation_1_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        summation_1_i_reg_112 <= summation_fu_443_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        summation_1_i_reg_112 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_722 <= exitcond_flatten_reg_722;
        exitcond_flatten_reg_722 <= exitcond_flatten_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_722 <= ap_reg_pp0_iter1_exitcond_flatten_reg_722;
        ap_reg_pp0_iter3_exitcond_flatten_reg_722 <= ap_reg_pp0_iter2_exitcond_flatten_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_reg_pp1_iter1_exitcond_flatten1_reg_792 <= exitcond_flatten1_reg_792;
        exitcond_flatten1_reg_792 <= exitcond_flatten1_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        ap_reg_pp1_iter2_exitcond_flatten1_reg_792 <= ap_reg_pp1_iter1_exitcond_flatten1_reg_792;
        ap_reg_pp1_iter3_exitcond_flatten1_reg_792 <= ap_reg_pp1_iter2_exitcond_flatten1_reg_792;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        col_i7_mid2_reg_801 <= col_i7_mid2_fu_466_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_mid2_reg_731 <= col_i_mid2_fu_198_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_722 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_752[6 : 1] <= tmp_10_fu_302_p2[6 : 1];
        tmp_13_reg_757 <= tmp_13_fu_312_p2;
        tmp_25_reg_762[6 : 1] <= tmp_25_fu_387_p2[6 : 1];
        tmp_28_reg_767 <= tmp_28_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_fu_448_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_14_i_cast_mid2_v_1_reg_806 <= tmp_14_i_cast_mid2_v_1_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_16_reg_772 <= tmp_16_fu_417_p1;
        tmp_31_reg_777 <= tmp_31_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_i_reg_782 <= tmp_3_i_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten1_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_40_reg_822[6 : 1] <= tmp_40_fu_570_p2[6 : 1];
        tmp_43_reg_827 <= tmp_43_fu_580_p2;
        tmp_55_reg_832[6 : 1] <= tmp_55_fu_655_p2[6 : 1];
        tmp_58_reg_837 <= tmp_58_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp1_iter1_exitcond_flatten1_reg_792 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_46_reg_842 <= tmp_46_fu_685_p1;
        tmp_61_reg_847 <= tmp_61_fu_703_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_180_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_6_i_cast_mid2_v_s_reg_736 <= tmp_6_i_cast_mid2_v_s_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp1_iter2_exitcond_flatten1_reg_792 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_8_i1_reg_852 <= tmp_8_i1_fu_707_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_180_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_448_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_792 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_row_i2_phi_fu_150_p4 = tmp_14_i_cast_mid2_v_1_reg_806;
    end else begin
        ap_phi_mux_row_i2_phi_fu_150_p4 = row_i2_reg_146;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_722 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_row_i_phi_fu_105_p4 = tmp_6_i_cast_mid2_v_s_reg_736;
    end else begin
        ap_phi_mux_row_i_phi_fu_105_p4 = row_i_reg_101;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        array_r_address0 = tmp_7_i9_fu_488_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array_r_address0 = tmp_2_i_fu_220_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_180_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_flatten_fu_180_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten1_fu_448_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_flatten1_fu_448_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = (summation_1_i6_reg_157 + summation_1_i_reg_112);

assign col_1_fu_493_p2 = (2'd1 + col_i7_mid2_fu_466_p3);

assign col_fu_225_p2 = (2'd1 + col_i_mid2_fu_198_p3);

assign col_i7_mid2_fu_466_p3 = ((exitcond_i1_fu_460_p2[0:0] === 1'b1) ? 2'd0 : col_i7_reg_169);

assign col_i_mid2_fu_198_p3 = ((exitcond_i_fu_192_p2[0:0] === 1'b1) ? 2'd0 : col_i_reg_124);

assign exitcond_flatten1_fu_448_p2 = ((indvar_flatten1_reg_135 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_180_p2 = ((indvar_flatten_reg_90 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_i1_fu_460_p2 = ((col_i7_reg_169 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_192_p2 = ((col_i_reg_124 == 2'd3) ? 1'b1 : 1'b0);

assign indvar_flatten_next1_fu_454_p2 = (indvar_flatten1_reg_135 + 4'd1);

assign indvar_flatten_next_fu_186_p2 = (indvar_flatten_reg_90 + 4'd1);

assign row_fu_206_p2 = (2'd1 + ap_phi_mux_row_i_phi_fu_105_p4);

assign row_s_fu_474_p2 = (2'd1 + ap_phi_mux_row_i2_phi_fu_150_p4);

assign summation_1_fu_711_p2 = (tmp_8_i1_reg_852 + summation_1_i6_reg_157);

assign summation_fu_443_p2 = (tmp_3_i_reg_782 + summation_1_i_reg_112);

assign tmp_10_fu_302_p2 = ($signed(7'd95) - $signed(tmp_7_fu_278_p3));

assign tmp_11_fu_308_p1 = tmp_9_fu_294_p3;

assign tmp_12_fu_403_p1 = tmp_10_reg_752;

assign tmp_13_fu_312_p2 = tmp_8_fu_286_p3 >> tmp_11_fu_308_p1;

assign tmp_14_fu_406_p2 = 96'd79228162514264337593543950335 >> tmp_12_fu_403_p1;

assign tmp_14_i_cast_mid2_v_1_fu_480_p3 = ((exitcond_i1_fu_460_p2[0:0] === 1'b1) ? row_s_fu_474_p2 : ap_phi_mux_row_i2_phi_fu_150_p4);

assign tmp_14_i_cast_mid2_v_fu_499_p3 = {{tmp_14_i_cast_mid2_v_1_reg_806}, {5'd0}};

assign tmp_15_fu_412_p2 = (tmp_14_fu_406_p2 & tmp_13_reg_757);

assign tmp_15_i_cast_mid2_v_fu_506_p2 = (tmp_14_i_cast_mid2_v_fu_499_p3 | 7'd31);

assign tmp_16_fu_417_p1 = tmp_15_fu_412_p2[31:0];

assign tmp_17_fu_329_p2 = ((tmp_6_i_cast_mid2_v_fu_231_p3 > tmp_7_i_cast_mid2_v_fu_238_p2) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (tmp_fu_318_p5) begin
    for (ap_tvar_int_0 = 96 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 95 - 0) begin
            tmp_18_fu_335_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_18_fu_335_p4[ap_tvar_int_0] = tmp_fu_318_p5[95 - ap_tvar_int_0];
        end
    end
end

assign tmp_19_fu_345_p2 = (tmp_6_i_cast_mid2_v_fu_231_p3 - tmp_7_i_cast_mid2_v_fu_238_p2);

assign tmp_20_fu_351_p2 = ($signed(7'd95) - $signed(tmp_6_i_cast_mid2_v_fu_231_p3));

assign tmp_21_fu_357_p2 = (tmp_7_i_cast_mid2_v_fu_238_p2 - tmp_6_i_cast_mid2_v_fu_231_p3);

assign tmp_22_fu_363_p3 = ((tmp_17_fu_329_p2[0:0] === 1'b1) ? tmp_19_fu_345_p2 : tmp_21_fu_357_p2);

assign tmp_23_fu_371_p3 = ((tmp_17_fu_329_p2[0:0] === 1'b1) ? tmp_18_fu_335_p4 : tmp_fu_318_p5);

assign tmp_24_fu_379_p3 = ((tmp_17_fu_329_p2[0:0] === 1'b1) ? tmp_20_fu_351_p2 : tmp_6_i_cast_mid2_v_fu_231_p3);

assign tmp_25_fu_387_p2 = ($signed(7'd95) - $signed(tmp_22_fu_363_p3));

assign tmp_26_fu_393_p1 = tmp_24_fu_379_p3;

assign tmp_27_fu_421_p1 = tmp_25_reg_762;

assign tmp_28_fu_397_p2 = tmp_23_fu_371_p3 >> tmp_26_fu_393_p1;

assign tmp_29_fu_424_p2 = 96'd79228162514264337593543950335 >> tmp_27_fu_421_p1;

assign tmp_2_fu_244_p2 = ((tmp_6_i_cast_mid2_v_fu_231_p3 > tmp_7_i_cast_mid2_v_fu_238_p2) ? 1'b1 : 1'b0);

assign tmp_2_i_fu_220_p1 = col_i_mid2_fu_198_p3;

assign tmp_30_fu_430_p2 = (tmp_29_fu_424_p2 & tmp_28_reg_767);

assign tmp_31_fu_435_p1 = tmp_30_fu_430_p2[31:0];

assign tmp_32_fu_512_p2 = ((tmp_14_i_cast_mid2_v_fu_499_p3 > tmp_15_i_cast_mid2_v_fu_506_p2) ? 1'b1 : 1'b0);

integer ap_tvar_int_1;

always @ (array_r_q0) begin
    for (ap_tvar_int_1 = 96 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 95 - 0) begin
            tmp_33_fu_518_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_33_fu_518_p4[ap_tvar_int_1] = array_r_q0[95 - ap_tvar_int_1];
        end
    end
end

assign tmp_34_fu_528_p2 = (tmp_14_i_cast_mid2_v_fu_499_p3 - tmp_15_i_cast_mid2_v_fu_506_p2);

assign tmp_35_fu_534_p2 = ($signed(7'd95) - $signed(tmp_14_i_cast_mid2_v_fu_499_p3));

assign tmp_36_fu_540_p2 = (tmp_15_i_cast_mid2_v_fu_506_p2 - tmp_14_i_cast_mid2_v_fu_499_p3);

assign tmp_37_fu_546_p3 = ((tmp_32_fu_512_p2[0:0] === 1'b1) ? tmp_34_fu_528_p2 : tmp_36_fu_540_p2);

assign tmp_38_fu_554_p3 = ((tmp_32_fu_512_p2[0:0] === 1'b1) ? tmp_33_fu_518_p4 : array_r_q0);

assign tmp_39_fu_562_p3 = ((tmp_32_fu_512_p2[0:0] === 1'b1) ? tmp_35_fu_534_p2 : tmp_14_i_cast_mid2_v_fu_499_p3);

integer ap_tvar_int_2;

always @ (array_r_q0) begin
    for (ap_tvar_int_2 = 96 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 95 - 0) begin
            tmp_3_fu_250_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_3_fu_250_p4[ap_tvar_int_2] = array_r_q0[95 - ap_tvar_int_2];
        end
    end
end

assign tmp_3_i_fu_439_p2 = ($signed(tmp_16_reg_772) * $signed(tmp_31_reg_777));

assign tmp_40_fu_570_p2 = ($signed(7'd95) - $signed(tmp_37_fu_546_p3));

assign tmp_41_fu_576_p1 = tmp_39_fu_562_p3;

assign tmp_42_fu_671_p1 = tmp_40_reg_822;

assign tmp_43_fu_580_p2 = tmp_38_fu_554_p3 >> tmp_41_fu_576_p1;

assign tmp_44_fu_674_p2 = 96'd79228162514264337593543950335 >> tmp_42_fu_671_p1;

assign tmp_45_fu_680_p2 = (tmp_44_fu_674_p2 & tmp_43_reg_827);

assign tmp_46_fu_685_p1 = tmp_45_fu_680_p2[31:0];

assign tmp_47_fu_597_p2 = ((tmp_14_i_cast_mid2_v_fu_499_p3 > tmp_15_i_cast_mid2_v_fu_506_p2) ? 1'b1 : 1'b0);

integer ap_tvar_int_3;

always @ (tmp_1_fu_586_p5) begin
    for (ap_tvar_int_3 = 96 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 95 - 0) begin
            tmp_48_fu_603_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_48_fu_603_p4[ap_tvar_int_3] = tmp_1_fu_586_p5[95 - ap_tvar_int_3];
        end
    end
end

assign tmp_49_fu_613_p2 = (tmp_14_i_cast_mid2_v_fu_499_p3 - tmp_15_i_cast_mid2_v_fu_506_p2);

assign tmp_4_fu_260_p2 = (tmp_6_i_cast_mid2_v_fu_231_p3 - tmp_7_i_cast_mid2_v_fu_238_p2);

assign tmp_50_fu_619_p2 = ($signed(7'd95) - $signed(tmp_14_i_cast_mid2_v_fu_499_p3));

assign tmp_51_fu_625_p2 = (tmp_15_i_cast_mid2_v_fu_506_p2 - tmp_14_i_cast_mid2_v_fu_499_p3);

assign tmp_52_fu_631_p3 = ((tmp_47_fu_597_p2[0:0] === 1'b1) ? tmp_49_fu_613_p2 : tmp_51_fu_625_p2);

assign tmp_53_fu_639_p3 = ((tmp_47_fu_597_p2[0:0] === 1'b1) ? tmp_48_fu_603_p4 : tmp_1_fu_586_p5);

assign tmp_54_fu_647_p3 = ((tmp_47_fu_597_p2[0:0] === 1'b1) ? tmp_50_fu_619_p2 : tmp_14_i_cast_mid2_v_fu_499_p3);

assign tmp_55_fu_655_p2 = ($signed(7'd95) - $signed(tmp_52_fu_631_p3));

assign tmp_56_fu_661_p1 = tmp_54_fu_647_p3;

assign tmp_57_fu_689_p1 = tmp_55_reg_832;

assign tmp_58_fu_665_p2 = tmp_53_fu_639_p3 >> tmp_56_fu_661_p1;

assign tmp_59_fu_692_p2 = 96'd79228162514264337593543950335 >> tmp_57_fu_689_p1;

assign tmp_5_fu_266_p2 = ($signed(7'd95) - $signed(tmp_6_i_cast_mid2_v_fu_231_p3));

assign tmp_60_fu_698_p2 = (tmp_59_fu_692_p2 & tmp_58_reg_837);

assign tmp_61_fu_703_p1 = tmp_60_fu_698_p2[31:0];

assign tmp_6_fu_272_p2 = (tmp_7_i_cast_mid2_v_fu_238_p2 - tmp_6_i_cast_mid2_v_fu_231_p3);

assign tmp_6_i_cast_mid2_v_fu_231_p3 = {{tmp_6_i_cast_mid2_v_s_reg_736}, {5'd0}};

assign tmp_6_i_cast_mid2_v_s_fu_212_p3 = ((exitcond_i_fu_192_p2[0:0] === 1'b1) ? row_fu_206_p2 : ap_phi_mux_row_i_phi_fu_105_p4);

assign tmp_7_fu_278_p3 = ((tmp_2_fu_244_p2[0:0] === 1'b1) ? tmp_4_fu_260_p2 : tmp_6_fu_272_p2);

assign tmp_7_i9_fu_488_p1 = col_i7_mid2_fu_466_p3;

assign tmp_7_i_cast_mid2_v_fu_238_p2 = (tmp_6_i_cast_mid2_v_fu_231_p3 | 7'd31);

assign tmp_8_fu_286_p3 = ((tmp_2_fu_244_p2[0:0] === 1'b1) ? tmp_3_fu_250_p4 : array_r_q0);

assign tmp_8_i1_fu_707_p2 = ($signed(tmp_46_reg_842) * $signed(tmp_61_reg_847));

assign tmp_9_fu_294_p3 = ((tmp_2_fu_244_p2[0:0] === 1'b1) ? tmp_5_fu_266_p2 : tmp_6_i_cast_mid2_v_fu_231_p3);

always @ (posedge ap_clk) begin
    tmp_10_reg_752[0] <= 1'b0;
    tmp_25_reg_762[0] <= 1'b0;
    tmp_40_reg_822[0] <= 1'b0;
    tmp_55_reg_832[0] <= 1'b0;
end

endmodule //getConvolutionResult
