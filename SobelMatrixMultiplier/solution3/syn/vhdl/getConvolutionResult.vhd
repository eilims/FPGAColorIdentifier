-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getConvolutionResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getConvolutionResult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=833,HLS_SYN_LUT=4217}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv96_10000000200000001 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000010000000000000000000000000000001000000000000000000000000000000001";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_FFFFFFFFFFFFFFFEFFFFFFFF : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111";
    constant ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv96_FFFFFFFF0000000000000001 : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv96_FFFFFFFE0000000000000002 : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_i_reg_101 : STD_LOGIC_VECTOR (1 downto 0);
    signal summation_1_i_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_i_reg_124 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten1_reg_135 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_i2_reg_146 : STD_LOGIC_VECTOR (1 downto 0);
    signal summation_1_i6_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_i7_reg_169 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_722 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal col_i_mid2_fu_198_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_mid2_reg_731 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_i_cast_mid2_v_s_fu_212_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_i_cast_mid2_v_s_reg_736 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_fu_225_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_fu_302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_752 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_312_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_13_reg_757 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_25_fu_387_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_reg_762 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_397_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_28_reg_767 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_16_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal exitcond_flatten1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state8_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_exitcond_flatten1_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_exitcond_flatten1_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter3_exitcond_flatten1_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal col_i7_mid2_fu_466_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i7_mid2_reg_801 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_i_cast_mid2_v_1_fu_480_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_i_cast_mid2_v_1_reg_806 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_1_fu_493_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_40_fu_570_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_reg_822 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_580_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_43_reg_827 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_55_fu_655_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_reg_832 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_fu_665_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_58_reg_837 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_46_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_842 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_1_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_row_i_phi_fu_105_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_row_i2_phi_fu_150_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_2_i_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i9_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_fu_206_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_i_cast_mid2_v_fu_231_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_i_cast_mid2_v_fu_238_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_272_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_250_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_5_fu_266_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_278_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_286_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_11_fu_308_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_fu_318_p5 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_17_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_357_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_335_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_20_fu_351_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_363_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_379_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_371_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_26_fu_393_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_12_fu_403_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_14_fu_406_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_15_fu_412_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_27_fu_421_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_29_fu_424_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_30_fu_430_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal exitcond_i1_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_s_fu_474_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_i_cast_mid2_v_fu_499_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_i_cast_mid2_v_fu_506_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_528_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_518_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_35_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_fu_562_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_554_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_41_fu_576_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_1_fu_586_p5 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_47_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_613_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_fu_625_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_603_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_50_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_631_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_647_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_639_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_56_fu_661_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_42_fu_671_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_44_fu_674_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_45_fu_680_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_57_fu_689_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_59_fu_692_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_60_fu_698_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component getConvolutionResbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        din2 : IN STD_LOGIC_VECTOR (95 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    getConvolutionResbkb_U1 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        din2_WIDTH => 96,
        din3_WIDTH => 2,
        dout_WIDTH => 96)
    port map (
        din0 => ap_const_lv96_10000000200000001,
        din1 => ap_const_lv96_0,
        din2 => ap_const_lv96_FFFFFFFFFFFFFFFEFFFFFFFF,
        din3 => col_i_mid2_reg_731,
        dout => tmp_fu_318_p5);

    getConvolutionResbkb_U2 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        din2_WIDTH => 96,
        din3_WIDTH => 2,
        dout_WIDTH => 96)
    port map (
        din0 => ap_const_lv96_FFFFFFFF0000000000000001,
        din1 => ap_const_lv96_FFFFFFFE0000000000000002,
        din2 => ap_const_lv96_FFFFFFFF0000000000000001,
        din3 => col_i7_mid2_reg_801,
        dout => tmp_1_fu_586_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state8)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state8);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_i7_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                col_i7_reg_169 <= ap_const_lv2_0;
            elsif (((exitcond_flatten1_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                col_i7_reg_169 <= col_1_fu_493_p2;
            end if; 
        end if;
    end process;

    col_i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_i_reg_124 <= col_fu_225_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_i_reg_124 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten1_reg_135 <= ap_const_lv4_0;
            elsif (((exitcond_flatten1_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten1_reg_135 <= indvar_flatten_next1_fu_454_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_90 <= indvar_flatten_next_fu_186_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_90 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    row_i2_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                row_i2_reg_146 <= ap_const_lv2_0;
            elsif (((exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                row_i2_reg_146 <= tmp_14_i_cast_mid2_v_1_reg_806;
            end if; 
        end if;
    end process;

    row_i_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                row_i_reg_101 <= tmp_6_i_cast_mid2_v_s_reg_736;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_i_reg_101 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    summation_1_i6_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                summation_1_i6_reg_157 <= ap_const_lv32_0;
            elsif (((ap_reg_pp1_iter3_exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                summation_1_i6_reg_157 <= summation_1_fu_711_p2;
            end if; 
        end if;
    end process;

    summation_1_i_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                summation_1_i_reg_112 <= summation_fu_443_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                summation_1_i_reg_112 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_722 <= exitcond_flatten_reg_722;
                exitcond_flatten_reg_722 <= exitcond_flatten_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_722 <= ap_reg_pp0_iter1_exitcond_flatten_reg_722;
                ap_reg_pp0_iter3_exitcond_flatten_reg_722 <= ap_reg_pp0_iter2_exitcond_flatten_reg_722;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_reg_pp1_iter1_exitcond_flatten1_reg_792 <= exitcond_flatten1_reg_792;
                exitcond_flatten1_reg_792 <= exitcond_flatten1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                ap_reg_pp1_iter2_exitcond_flatten1_reg_792 <= ap_reg_pp1_iter1_exitcond_flatten1_reg_792;
                ap_reg_pp1_iter3_exitcond_flatten1_reg_792 <= ap_reg_pp1_iter2_exitcond_flatten1_reg_792;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                col_i7_mid2_reg_801 <= col_i7_mid2_fu_466_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                col_i_mid2_reg_731 <= col_i_mid2_fu_198_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_10_reg_752(6 downto 1) <= tmp_10_fu_302_p2(6 downto 1);
                tmp_13_reg_757 <= tmp_13_fu_312_p2;
                    tmp_25_reg_762(6 downto 1) <= tmp_25_fu_387_p2(6 downto 1);
                tmp_28_reg_767 <= tmp_28_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_14_i_cast_mid2_v_1_reg_806 <= tmp_14_i_cast_mid2_v_1_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_16_reg_772 <= tmp_16_fu_417_p1;
                tmp_31_reg_777 <= tmp_31_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter2_exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_i_reg_782 <= tmp_3_i_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    tmp_40_reg_822(6 downto 1) <= tmp_40_fu_570_p2(6 downto 1);
                tmp_43_reg_827 <= tmp_43_fu_580_p2;
                    tmp_55_reg_832(6 downto 1) <= tmp_55_fu_655_p2(6 downto 1);
                tmp_58_reg_837 <= tmp_58_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter1_exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_46_reg_842 <= tmp_46_fu_685_p1;
                tmp_61_reg_847 <= tmp_61_fu_703_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_i_cast_mid2_v_s_reg_736 <= tmp_6_i_cast_mid2_v_s_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp1_iter2_exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_8_i1_reg_852 <= tmp_8_i1_fu_707_p2;
            end if;
        end if;
    end process;
    tmp_10_reg_752(0) <= '0';
    tmp_25_reg_762(0) <= '0';
    tmp_40_reg_822(0) <= '0';
    tmp_55_reg_832(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_180_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, exitcond_flatten1_fu_448_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_180_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_flatten_fu_180_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_flatten1_fu_448_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_flatten1_fu_448_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_180_p2)
    begin
        if ((exitcond_flatten_fu_180_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state8_assign_proc : process(exitcond_flatten1_fu_448_p2)
    begin
        if ((exitcond_flatten1_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_row_i2_phi_fu_150_p4_assign_proc : process(row_i2_reg_146, exitcond_flatten1_reg_792, ap_CS_fsm_pp1_stage0, tmp_14_i_cast_mid2_v_1_reg_806, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((exitcond_flatten1_reg_792 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_row_i2_phi_fu_150_p4 <= tmp_14_i_cast_mid2_v_1_reg_806;
        else 
            ap_phi_mux_row_i2_phi_fu_150_p4 <= row_i2_reg_146;
        end if; 
    end process;


    ap_phi_mux_row_i_phi_fu_105_p4_assign_proc : process(row_i_reg_101, exitcond_flatten_reg_722, ap_CS_fsm_pp0_stage0, tmp_6_i_cast_mid2_v_s_reg_736, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_722 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_row_i_phi_fu_105_p4 <= tmp_6_i_cast_mid2_v_s_reg_736;
        else 
            ap_phi_mux_row_i_phi_fu_105_p4 <= row_i_reg_101;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(summation_1_i6_reg_157) + unsigned(summation_1_i_reg_112));

    array_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, tmp_2_i_fu_220_p1, tmp_7_i9_fu_488_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            array_r_address0 <= tmp_7_i9_fu_488_p1(2 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            array_r_address0 <= tmp_2_i_fu_220_p1(2 - 1 downto 0);
        else 
            array_r_address0 <= "XX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_493_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(col_i7_mid2_fu_466_p3));
    col_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(col_i_mid2_fu_198_p3));
    col_i7_mid2_fu_466_p3 <= 
        ap_const_lv2_0 when (exitcond_i1_fu_460_p2(0) = '1') else 
        col_i7_reg_169;
    col_i_mid2_fu_198_p3 <= 
        ap_const_lv2_0 when (exitcond_i_fu_192_p2(0) = '1') else 
        col_i_reg_124;
    exitcond_flatten1_fu_448_p2 <= "1" when (indvar_flatten1_reg_135 = ap_const_lv4_9) else "0";
    exitcond_flatten_fu_180_p2 <= "1" when (indvar_flatten_reg_90 = ap_const_lv4_9) else "0";
    exitcond_i1_fu_460_p2 <= "1" when (col_i7_reg_169 = ap_const_lv2_3) else "0";
    exitcond_i_fu_192_p2 <= "1" when (col_i_reg_124 = ap_const_lv2_3) else "0";
    indvar_flatten_next1_fu_454_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_135) + unsigned(ap_const_lv4_1));
    indvar_flatten_next_fu_186_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_90) + unsigned(ap_const_lv4_1));
    row_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_row_i_phi_fu_105_p4));
    row_s_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_row_i2_phi_fu_150_p4));
    summation_1_fu_711_p2 <= std_logic_vector(unsigned(tmp_8_i1_reg_852) + unsigned(summation_1_i6_reg_157));
    summation_fu_443_p2 <= std_logic_vector(unsigned(tmp_3_i_reg_782) + unsigned(summation_1_i_reg_112));
    tmp_10_fu_302_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_7_fu_278_p3));
    tmp_11_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_294_p3),96));
    tmp_12_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_752),96));
    tmp_13_fu_312_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_fu_286_p3),to_integer(unsigned('0' & tmp_11_fu_308_p1(31-1 downto 0)))));
    tmp_14_fu_406_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_12_fu_403_p1(31-1 downto 0)))));
    tmp_14_i_cast_mid2_v_1_fu_480_p3 <= 
        row_s_fu_474_p2 when (exitcond_i1_fu_460_p2(0) = '1') else 
        ap_phi_mux_row_i2_phi_fu_150_p4;
    tmp_14_i_cast_mid2_v_fu_499_p3 <= (tmp_14_i_cast_mid2_v_1_reg_806 & ap_const_lv5_0);
    tmp_15_fu_412_p2 <= (tmp_14_fu_406_p2 and tmp_13_reg_757);
    tmp_15_i_cast_mid2_v_fu_506_p2 <= (tmp_14_i_cast_mid2_v_fu_499_p3 or ap_const_lv7_1F);
    tmp_16_fu_417_p1 <= tmp_15_fu_412_p2(32 - 1 downto 0);
    tmp_17_fu_329_p2 <= "1" when (unsigned(tmp_6_i_cast_mid2_v_fu_231_p3) > unsigned(tmp_7_i_cast_mid2_v_fu_238_p2)) else "0";
    
    tmp_18_fu_335_p4_proc : process(tmp_fu_318_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_18_fu_335_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_fu_318_p5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_18_fu_335_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_18_fu_335_p4_i) := tmp_fu_318_p5(96-1-tmp_18_fu_335_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_18_fu_335_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_19_fu_345_p2 <= std_logic_vector(unsigned(tmp_6_i_cast_mid2_v_fu_231_p3) - unsigned(tmp_7_i_cast_mid2_v_fu_238_p2));
    tmp_20_fu_351_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_6_i_cast_mid2_v_fu_231_p3));
    tmp_21_fu_357_p2 <= std_logic_vector(unsigned(tmp_7_i_cast_mid2_v_fu_238_p2) - unsigned(tmp_6_i_cast_mid2_v_fu_231_p3));
    tmp_22_fu_363_p3 <= 
        tmp_19_fu_345_p2 when (tmp_17_fu_329_p2(0) = '1') else 
        tmp_21_fu_357_p2;
    tmp_23_fu_371_p3 <= 
        tmp_18_fu_335_p4 when (tmp_17_fu_329_p2(0) = '1') else 
        tmp_fu_318_p5;
    tmp_24_fu_379_p3 <= 
        tmp_20_fu_351_p2 when (tmp_17_fu_329_p2(0) = '1') else 
        tmp_6_i_cast_mid2_v_fu_231_p3;
    tmp_25_fu_387_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_22_fu_363_p3));
    tmp_26_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_379_p3),96));
    tmp_27_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_762),96));
    tmp_28_fu_397_p2 <= std_logic_vector(shift_right(unsigned(tmp_23_fu_371_p3),to_integer(unsigned('0' & tmp_26_fu_393_p1(31-1 downto 0)))));
    tmp_29_fu_424_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_27_fu_421_p1(31-1 downto 0)))));
    tmp_2_fu_244_p2 <= "1" when (unsigned(tmp_6_i_cast_mid2_v_fu_231_p3) > unsigned(tmp_7_i_cast_mid2_v_fu_238_p2)) else "0";
    tmp_2_i_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_mid2_fu_198_p3),64));
    tmp_30_fu_430_p2 <= (tmp_29_fu_424_p2 and tmp_28_reg_767);
    tmp_31_fu_435_p1 <= tmp_30_fu_430_p2(32 - 1 downto 0);
    tmp_32_fu_512_p2 <= "1" when (unsigned(tmp_14_i_cast_mid2_v_fu_499_p3) > unsigned(tmp_15_i_cast_mid2_v_fu_506_p2)) else "0";
    
    tmp_33_fu_518_p4_proc : process(array_r_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_33_fu_518_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := array_r_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_33_fu_518_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_33_fu_518_p4_i) := array_r_q0(96-1-tmp_33_fu_518_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_33_fu_518_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_34_fu_528_p2 <= std_logic_vector(unsigned(tmp_14_i_cast_mid2_v_fu_499_p3) - unsigned(tmp_15_i_cast_mid2_v_fu_506_p2));
    tmp_35_fu_534_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_14_i_cast_mid2_v_fu_499_p3));
    tmp_36_fu_540_p2 <= std_logic_vector(unsigned(tmp_15_i_cast_mid2_v_fu_506_p2) - unsigned(tmp_14_i_cast_mid2_v_fu_499_p3));
    tmp_37_fu_546_p3 <= 
        tmp_34_fu_528_p2 when (tmp_32_fu_512_p2(0) = '1') else 
        tmp_36_fu_540_p2;
    tmp_38_fu_554_p3 <= 
        tmp_33_fu_518_p4 when (tmp_32_fu_512_p2(0) = '1') else 
        array_r_q0;
    tmp_39_fu_562_p3 <= 
        tmp_35_fu_534_p2 when (tmp_32_fu_512_p2(0) = '1') else 
        tmp_14_i_cast_mid2_v_fu_499_p3;
    
    tmp_3_fu_250_p4_proc : process(array_r_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_3_fu_250_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := array_r_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_3_fu_250_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_3_fu_250_p4_i) := array_r_q0(96-1-tmp_3_fu_250_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_250_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_3_i_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_16_reg_772) * signed(tmp_31_reg_777))), 32));
    tmp_40_fu_570_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_37_fu_546_p3));
    tmp_41_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_562_p3),96));
    tmp_42_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_reg_822),96));
    tmp_43_fu_580_p2 <= std_logic_vector(shift_right(unsigned(tmp_38_fu_554_p3),to_integer(unsigned('0' & tmp_41_fu_576_p1(31-1 downto 0)))));
    tmp_44_fu_674_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_42_fu_671_p1(31-1 downto 0)))));
    tmp_45_fu_680_p2 <= (tmp_44_fu_674_p2 and tmp_43_reg_827);
    tmp_46_fu_685_p1 <= tmp_45_fu_680_p2(32 - 1 downto 0);
    tmp_47_fu_597_p2 <= "1" when (unsigned(tmp_14_i_cast_mid2_v_fu_499_p3) > unsigned(tmp_15_i_cast_mid2_v_fu_506_p2)) else "0";
    
    tmp_48_fu_603_p4_proc : process(tmp_1_fu_586_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_48_fu_603_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_1_fu_586_p5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_48_fu_603_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_48_fu_603_p4_i) := tmp_1_fu_586_p5(96-1-tmp_48_fu_603_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_48_fu_603_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_49_fu_613_p2 <= std_logic_vector(unsigned(tmp_14_i_cast_mid2_v_fu_499_p3) - unsigned(tmp_15_i_cast_mid2_v_fu_506_p2));
    tmp_4_fu_260_p2 <= std_logic_vector(unsigned(tmp_6_i_cast_mid2_v_fu_231_p3) - unsigned(tmp_7_i_cast_mid2_v_fu_238_p2));
    tmp_50_fu_619_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_14_i_cast_mid2_v_fu_499_p3));
    tmp_51_fu_625_p2 <= std_logic_vector(unsigned(tmp_15_i_cast_mid2_v_fu_506_p2) - unsigned(tmp_14_i_cast_mid2_v_fu_499_p3));
    tmp_52_fu_631_p3 <= 
        tmp_49_fu_613_p2 when (tmp_47_fu_597_p2(0) = '1') else 
        tmp_51_fu_625_p2;
    tmp_53_fu_639_p3 <= 
        tmp_48_fu_603_p4 when (tmp_47_fu_597_p2(0) = '1') else 
        tmp_1_fu_586_p5;
    tmp_54_fu_647_p3 <= 
        tmp_50_fu_619_p2 when (tmp_47_fu_597_p2(0) = '1') else 
        tmp_14_i_cast_mid2_v_fu_499_p3;
    tmp_55_fu_655_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_52_fu_631_p3));
    tmp_56_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_647_p3),96));
    tmp_57_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_832),96));
    tmp_58_fu_665_p2 <= std_logic_vector(shift_right(unsigned(tmp_53_fu_639_p3),to_integer(unsigned('0' & tmp_56_fu_661_p1(31-1 downto 0)))));
    tmp_59_fu_692_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_57_fu_689_p1(31-1 downto 0)))));
    tmp_5_fu_266_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_6_i_cast_mid2_v_fu_231_p3));
    tmp_60_fu_698_p2 <= (tmp_59_fu_692_p2 and tmp_58_reg_837);
    tmp_61_fu_703_p1 <= tmp_60_fu_698_p2(32 - 1 downto 0);
    tmp_6_fu_272_p2 <= std_logic_vector(unsigned(tmp_7_i_cast_mid2_v_fu_238_p2) - unsigned(tmp_6_i_cast_mid2_v_fu_231_p3));
    tmp_6_i_cast_mid2_v_fu_231_p3 <= (tmp_6_i_cast_mid2_v_s_reg_736 & ap_const_lv5_0);
    tmp_6_i_cast_mid2_v_s_fu_212_p3 <= 
        row_fu_206_p2 when (exitcond_i_fu_192_p2(0) = '1') else 
        ap_phi_mux_row_i_phi_fu_105_p4;
    tmp_7_fu_278_p3 <= 
        tmp_4_fu_260_p2 when (tmp_2_fu_244_p2(0) = '1') else 
        tmp_6_fu_272_p2;
    tmp_7_i9_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i7_mid2_fu_466_p3),64));
    tmp_7_i_cast_mid2_v_fu_238_p2 <= (tmp_6_i_cast_mid2_v_fu_231_p3 or ap_const_lv7_1F);
    tmp_8_fu_286_p3 <= 
        tmp_3_fu_250_p4 when (tmp_2_fu_244_p2(0) = '1') else 
        array_r_q0;
    tmp_8_i1_fu_707_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_46_reg_842) * signed(tmp_61_reg_847))), 32));
    tmp_9_fu_294_p3 <= 
        tmp_5_fu_266_p2 when (tmp_2_fu_244_p2(0) = '1') else 
        tmp_6_i_cast_mid2_v_fu_231_p3;
end behav;
