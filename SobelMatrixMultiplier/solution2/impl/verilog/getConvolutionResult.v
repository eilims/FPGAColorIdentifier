// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=341,HLS_SYN_LUT=569}" *)

module getConvolutionResult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state7 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state13 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] array_r_address0;
reg array_r_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] p_vertical_sobel_oper_address0;
reg    p_vertical_sobel_oper_ce0;
wire   [2:0] p_vertical_sobel_oper_q0;
wire   [3:0] p_horizontal_sobel_op_address0;
reg    p_horizontal_sobel_op_ce0;
wire   [2:0] p_horizontal_sobel_op_q0;
reg   [3:0] indvar_flatten_reg_94;
reg   [1:0] row_i_reg_105;
reg   [31:0] summation_1_i_reg_116;
reg   [1:0] col_i_reg_128;
reg   [3:0] indvar_flatten1_reg_139;
reg   [1:0] row_i1_reg_150;
reg   [31:0] summation_1_i5_reg_161;
reg   [1:0] col_i6_reg_173;
reg  signed [31:0] reg_184;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_384;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_384;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    ap_block_state11_pp1_stage0_iter3;
wire    ap_block_state12_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] exitcond_flatten1_reg_435;
reg   [0:0] ap_reg_pp1_iter1_exitcond_flatten1_reg_435;
wire   [0:0] exitcond_flatten_fu_188_p2;
wire    ap_CS_fsm_pp0_stage0;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_384;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_384;
wire   [3:0] indvar_flatten_next_fu_194_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] col_i_mid2_fu_212_p3;
reg   [1:0] col_i_mid2_reg_393;
wire   [1:0] tmp_i_mid2_v_fu_220_p3;
reg   [1:0] tmp_i_mid2_v_reg_398;
wire   [1:0] col_fu_228_p2;
reg   [2:0] p_vertical_sobel_oper_1_reg_420;
wire   [31:0] tmp_3_i_fu_272_p2;
reg   [31:0] tmp_3_i_reg_425;
wire   [31:0] summation_fu_278_p2;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] exitcond_flatten1_fu_283_p2;
wire    ap_CS_fsm_pp1_stage0;
reg   [0:0] ap_reg_pp1_iter2_exitcond_flatten1_reg_435;
reg   [0:0] ap_reg_pp1_iter3_exitcond_flatten1_reg_435;
wire   [3:0] indvar_flatten_next1_fu_289_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [1:0] col_i6_mid2_fu_307_p3;
reg   [1:0] col_i6_mid2_reg_444;
wire   [1:0] tmp_i4_mid2_v_fu_315_p3;
reg   [1:0] tmp_i4_mid2_v_reg_449;
wire   [1:0] col_1_fu_323_p2;
reg   [2:0] p_horizontal_sobel_op_1_reg_471;
wire   [31:0] tmp_8_i_fu_367_p2;
reg   [31:0] tmp_8_i_reg_476;
wire   [31:0] summation_1_fu_373_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter3;
reg   [1:0] ap_phi_mux_row_i_phi_fu_109_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_row_i1_phi_fu_154_p4;
wire    ap_block_pp1_stage0;
wire  signed [63:0] tmp_2_cast_fu_263_p1;
wire  signed [63:0] tmp_5_cast_fu_358_p1;
wire   [0:0] exitcond_i3_fu_206_p2;
wire   [1:0] row_fu_200_p2;
wire   [3:0] tmp_fu_237_p3;
wire   [4:0] p_shl_cast_fu_244_p1;
wire   [4:0] tmp_i_mid2_cast_fu_234_p1;
wire   [4:0] tmp_1_fu_248_p2;
wire   [4:0] tmp_2_i_cast_fu_254_p1;
wire   [4:0] tmp_2_fu_257_p2;
wire  signed [2:0] tmp_3_i_fu_272_p0;
wire   [0:0] exitcond_i_fu_301_p2;
wire   [1:0] row_1_fu_295_p2;
wire   [3:0] tmp_3_fu_332_p3;
wire   [4:0] p_shl1_cast_fu_339_p1;
wire   [4:0] tmp_i4_mid2_cast_fu_329_p1;
wire   [4:0] tmp_4_fu_343_p2;
wire   [4:0] tmp_7_i_cast_fu_349_p1;
wire   [4:0] tmp_5_fu_352_p2;
wire  signed [2:0] tmp_8_i_fu_367_p0;
wire    ap_CS_fsm_state13;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

getConvolutionResbkb #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
p_vertical_sobel_oper_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_vertical_sobel_oper_address0),
    .ce0(p_vertical_sobel_oper_ce0),
    .q0(p_vertical_sobel_oper_q0)
);

getConvolutionRescud #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
p_horizontal_sobel_op_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_horizontal_sobel_op_address0),
    .ce0(p_horizontal_sobel_op_ce0),
    .q0(p_horizontal_sobel_op_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_i6_reg_173 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_283_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        col_i6_reg_173 <= col_1_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_reg_128 <= col_fu_228_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_i_reg_128 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten1_reg_139 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_283_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten1_reg_139 <= indvar_flatten_next1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_94 <= indvar_flatten_next_fu_194_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_94 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_i1_reg_150 <= 2'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_reg_435 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_i1_reg_150 <= tmp_i4_mid2_v_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_i_reg_105 <= tmp_i_mid2_v_reg_398;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_i_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        summation_1_i5_reg_161 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter3_exitcond_flatten1_reg_435 == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        summation_1_i5_reg_161 <= summation_1_fu_373_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        summation_1_i_reg_116 <= summation_fu_278_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        summation_1_i_reg_116 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_384 <= exitcond_flatten_reg_384;
        exitcond_flatten_reg_384 <= exitcond_flatten_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_384 <= ap_reg_pp0_iter1_exitcond_flatten_reg_384;
        ap_reg_pp0_iter3_exitcond_flatten_reg_384 <= ap_reg_pp0_iter2_exitcond_flatten_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_reg_pp1_iter1_exitcond_flatten1_reg_435 <= exitcond_flatten1_reg_435;
        exitcond_flatten1_reg_435 <= exitcond_flatten1_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        ap_reg_pp1_iter2_exitcond_flatten1_reg_435 <= ap_reg_pp1_iter1_exitcond_flatten1_reg_435;
        ap_reg_pp1_iter3_exitcond_flatten1_reg_435 <= ap_reg_pp1_iter2_exitcond_flatten1_reg_435;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        col_i6_mid2_reg_444 <= col_i6_mid2_fu_307_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_i_mid2_reg_393 <= col_i_mid2_fu_212_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond_flatten1_reg_435 == 1'd0))) begin
        p_horizontal_sobel_op_1_reg_471 <= p_horizontal_sobel_op_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_vertical_sobel_oper_1_reg_420 <= p_vertical_sobel_oper_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter1_exitcond_flatten1_reg_435 == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_reg_pp0_iter1_exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        reg_184 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_i_reg_425 <= tmp_3_i_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_reg_pp1_iter2_exitcond_flatten1_reg_435 == 1'd0))) begin
        tmp_8_i_reg_476 <= tmp_8_i_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond_flatten1_fu_283_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_i4_mid2_v_reg_449 <= tmp_i4_mid2_v_fu_315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_188_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_i_mid2_v_reg_398 <= tmp_i_mid2_v_fu_220_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten1_fu_283_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten1_reg_435 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_row_i1_phi_fu_154_p4 = tmp_i4_mid2_v_reg_449;
    end else begin
        ap_phi_mux_row_i1_phi_fu_154_p4 = row_i1_reg_150;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_384 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_i_phi_fu_109_p4 = tmp_i_mid2_v_reg_398;
    end else begin
        ap_phi_mux_row_i_phi_fu_109_p4 = row_i_reg_105;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        array_r_address0 = tmp_5_cast_fu_358_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        array_r_address0 = tmp_2_cast_fu_263_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        p_horizontal_sobel_op_ce0 = 1'b1;
    end else begin
        p_horizontal_sobel_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_vertical_sobel_oper_ce0 = 1'b1;
    end else begin
        p_vertical_sobel_oper_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_283_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten1_fu_283_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_return = (summation_1_i5_reg_161 + summation_1_i_reg_116);

assign col_1_fu_323_p2 = (col_i6_mid2_fu_307_p3 + 2'd1);

assign col_fu_228_p2 = (col_i_mid2_fu_212_p3 + 2'd1);

assign col_i6_mid2_fu_307_p3 = ((exitcond_i_fu_301_p2[0:0] === 1'b1) ? 2'd0 : col_i6_reg_173);

assign col_i_mid2_fu_212_p3 = ((exitcond_i3_fu_206_p2[0:0] === 1'b1) ? 2'd0 : col_i_reg_128);

assign exitcond_flatten1_fu_283_p2 = ((indvar_flatten1_reg_139 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_188_p2 = ((indvar_flatten_reg_94 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_i3_fu_206_p2 = ((col_i_reg_128 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_301_p2 = ((col_i6_reg_173 == 2'd3) ? 1'b1 : 1'b0);

assign indvar_flatten_next1_fu_289_p2 = (indvar_flatten1_reg_139 + 4'd1);

assign indvar_flatten_next_fu_194_p2 = (indvar_flatten_reg_94 + 4'd1);

assign p_horizontal_sobel_op_address0 = tmp_5_cast_fu_358_p1;

assign p_shl1_cast_fu_339_p1 = tmp_3_fu_332_p3;

assign p_shl_cast_fu_244_p1 = tmp_fu_237_p3;

assign p_vertical_sobel_oper_address0 = tmp_2_cast_fu_263_p1;

assign row_1_fu_295_p2 = (ap_phi_mux_row_i1_phi_fu_154_p4 + 2'd1);

assign row_fu_200_p2 = (ap_phi_mux_row_i_phi_fu_109_p4 + 2'd1);

assign summation_1_fu_373_p2 = (summation_1_i5_reg_161 + tmp_8_i_reg_476);

assign summation_fu_278_p2 = (summation_1_i_reg_116 + tmp_3_i_reg_425);

assign tmp_1_fu_248_p2 = (p_shl_cast_fu_244_p1 - tmp_i_mid2_cast_fu_234_p1);

assign tmp_2_cast_fu_263_p1 = $signed(tmp_2_fu_257_p2);

assign tmp_2_fu_257_p2 = (tmp_1_fu_248_p2 + tmp_2_i_cast_fu_254_p1);

assign tmp_2_i_cast_fu_254_p1 = col_i_mid2_reg_393;

assign tmp_3_fu_332_p3 = {{tmp_i4_mid2_v_reg_449}, {2'd0}};

assign tmp_3_i_fu_272_p0 = p_vertical_sobel_oper_1_reg_420;

assign tmp_3_i_fu_272_p2 = ($signed(tmp_3_i_fu_272_p0) * $signed(reg_184));

assign tmp_4_fu_343_p2 = (p_shl1_cast_fu_339_p1 - tmp_i4_mid2_cast_fu_329_p1);

assign tmp_5_cast_fu_358_p1 = $signed(tmp_5_fu_352_p2);

assign tmp_5_fu_352_p2 = (tmp_4_fu_343_p2 + tmp_7_i_cast_fu_349_p1);

assign tmp_7_i_cast_fu_349_p1 = col_i6_mid2_reg_444;

assign tmp_8_i_fu_367_p0 = p_horizontal_sobel_op_1_reg_471;

assign tmp_8_i_fu_367_p2 = ($signed(tmp_8_i_fu_367_p0) * $signed(reg_184));

assign tmp_fu_237_p3 = {{tmp_i_mid2_v_reg_398}, {2'd0}};

assign tmp_i4_mid2_cast_fu_329_p1 = tmp_i4_mid2_v_reg_449;

assign tmp_i4_mid2_v_fu_315_p3 = ((exitcond_i_fu_301_p2[0:0] === 1'b1) ? row_1_fu_295_p2 : ap_phi_mux_row_i1_phi_fu_154_p4);

assign tmp_i_mid2_cast_fu_234_p1 = tmp_i_mid2_v_reg_398;

assign tmp_i_mid2_v_fu_220_p3 = ((exitcond_i3_fu_206_p2[0:0] === 1'b1) ? row_fu_200_p2 : ap_phi_mux_row_i_phi_fu_109_p4);

endmodule //getConvolutionResult
