// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _getConvolutionResult_HH_
#define _getConvolutionResult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "getConvolutionResbkb.h"
#include "getConvolutionRescud.h"

namespace ap_rtl {

struct getConvolutionResult : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > array_r_address0;
    sc_out< sc_logic > array_r_ce0;
    sc_in< sc_lv<32> > array_r_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    getConvolutionResult(sc_module_name name);
    SC_HAS_PROCESS(getConvolutionResult);

    ~getConvolutionResult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    getConvolutionResbkb* p_vertical_sobel_oper_U;
    getConvolutionRescud* p_horizontal_sobel_op_U;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > p_vertical_sobel_oper_address0;
    sc_signal< sc_logic > p_vertical_sobel_oper_ce0;
    sc_signal< sc_lv<3> > p_vertical_sobel_oper_q0;
    sc_signal< sc_lv<4> > p_horizontal_sobel_op_address0;
    sc_signal< sc_logic > p_horizontal_sobel_op_ce0;
    sc_signal< sc_lv<3> > p_horizontal_sobel_op_q0;
    sc_signal< sc_lv<4> > indvar_flatten_reg_94;
    sc_signal< sc_lv<2> > row_i_reg_105;
    sc_signal< sc_lv<32> > summation_1_i_reg_116;
    sc_signal< sc_lv<2> > col_i_reg_128;
    sc_signal< sc_lv<4> > indvar_flatten1_reg_139;
    sc_signal< sc_lv<2> > row_i1_reg_150;
    sc_signal< sc_lv<32> > summation_1_i5_reg_161;
    sc_signal< sc_lv<2> > col_i6_reg_173;
    sc_signal< sc_lv<32> > reg_184;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_384;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_384;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter3;
    sc_signal< bool > ap_block_state12_pp1_stage0_iter4;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten1_reg_435;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter1_exitcond_flatten1_reg_435;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_188_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_384;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_384;
    sc_signal< sc_lv<4> > indvar_flatten_next_fu_194_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<2> > col_i_mid2_fu_212_p3;
    sc_signal< sc_lv<2> > col_i_mid2_reg_393;
    sc_signal< sc_lv<2> > tmp_i_mid2_v_fu_220_p3;
    sc_signal< sc_lv<2> > tmp_i_mid2_v_reg_398;
    sc_signal< sc_lv<2> > col_fu_228_p2;
    sc_signal< sc_lv<3> > p_vertical_sobel_oper_1_reg_420;
    sc_signal< sc_lv<32> > tmp_3_i_fu_272_p2;
    sc_signal< sc_lv<32> > tmp_3_i_reg_425;
    sc_signal< sc_lv<32> > summation_fu_278_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_lv<1> > exitcond_flatten1_fu_283_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter2_exitcond_flatten1_reg_435;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter3_exitcond_flatten1_reg_435;
    sc_signal< sc_lv<4> > indvar_flatten_next1_fu_289_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<2> > col_i6_mid2_fu_307_p3;
    sc_signal< sc_lv<2> > col_i6_mid2_reg_444;
    sc_signal< sc_lv<2> > tmp_i4_mid2_v_fu_315_p3;
    sc_signal< sc_lv<2> > tmp_i4_mid2_v_reg_449;
    sc_signal< sc_lv<2> > col_1_fu_323_p2;
    sc_signal< sc_lv<3> > p_horizontal_sobel_op_1_reg_471;
    sc_signal< sc_lv<32> > tmp_8_i_fu_367_p2;
    sc_signal< sc_lv<32> > tmp_8_i_reg_476;
    sc_signal< sc_lv<32> > summation_1_fu_373_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter4;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state8;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_lv<2> > ap_phi_mux_row_i_phi_fu_109_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_row_i1_phi_fu_154_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > tmp_2_cast_fu_263_p1;
    sc_signal< sc_lv<64> > tmp_5_cast_fu_358_p1;
    sc_signal< sc_lv<1> > exitcond_i3_fu_206_p2;
    sc_signal< sc_lv<2> > row_fu_200_p2;
    sc_signal< sc_lv<4> > tmp_fu_237_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_244_p1;
    sc_signal< sc_lv<5> > tmp_i_mid2_cast_fu_234_p1;
    sc_signal< sc_lv<5> > tmp_1_fu_248_p2;
    sc_signal< sc_lv<5> > tmp_2_i_cast_fu_254_p1;
    sc_signal< sc_lv<5> > tmp_2_fu_257_p2;
    sc_signal< sc_lv<3> > tmp_3_i_fu_272_p0;
    sc_signal< sc_lv<1> > exitcond_i_fu_301_p2;
    sc_signal< sc_lv<2> > row_1_fu_295_p2;
    sc_signal< sc_lv<4> > tmp_3_fu_332_p3;
    sc_signal< sc_lv<5> > p_shl1_cast_fu_339_p1;
    sc_signal< sc_lv<5> > tmp_i4_mid2_cast_fu_329_p1;
    sc_signal< sc_lv<5> > tmp_4_fu_343_p2;
    sc_signal< sc_lv<5> > tmp_7_i_cast_fu_349_p1;
    sc_signal< sc_lv<5> > tmp_5_fu_352_p2;
    sc_signal< sc_lv<3> > tmp_8_i_fu_367_p0;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state7;
    static const sc_lv<5> ap_ST_fsm_pp1_stage0;
    static const sc_lv<5> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp1_stage0_iter2();
    void thread_ap_block_state11_pp1_stage0_iter3();
    void thread_ap_block_state12_pp1_stage0_iter4();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state8_pp1_stage0_iter0();
    void thread_ap_block_state9_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_row_i1_phi_fu_154_p4();
    void thread_ap_phi_mux_row_i_phi_fu_109_p4();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_array_r_address0();
    void thread_array_r_ce0();
    void thread_col_1_fu_323_p2();
    void thread_col_fu_228_p2();
    void thread_col_i6_mid2_fu_307_p3();
    void thread_col_i_mid2_fu_212_p3();
    void thread_exitcond_flatten1_fu_283_p2();
    void thread_exitcond_flatten_fu_188_p2();
    void thread_exitcond_i3_fu_206_p2();
    void thread_exitcond_i_fu_301_p2();
    void thread_indvar_flatten_next1_fu_289_p2();
    void thread_indvar_flatten_next_fu_194_p2();
    void thread_p_horizontal_sobel_op_address0();
    void thread_p_horizontal_sobel_op_ce0();
    void thread_p_shl1_cast_fu_339_p1();
    void thread_p_shl_cast_fu_244_p1();
    void thread_p_vertical_sobel_oper_address0();
    void thread_p_vertical_sobel_oper_ce0();
    void thread_row_1_fu_295_p2();
    void thread_row_fu_200_p2();
    void thread_summation_1_fu_373_p2();
    void thread_summation_fu_278_p2();
    void thread_tmp_1_fu_248_p2();
    void thread_tmp_2_cast_fu_263_p1();
    void thread_tmp_2_fu_257_p2();
    void thread_tmp_2_i_cast_fu_254_p1();
    void thread_tmp_3_fu_332_p3();
    void thread_tmp_3_i_fu_272_p0();
    void thread_tmp_3_i_fu_272_p2();
    void thread_tmp_4_fu_343_p2();
    void thread_tmp_5_cast_fu_358_p1();
    void thread_tmp_5_fu_352_p2();
    void thread_tmp_7_i_cast_fu_349_p1();
    void thread_tmp_8_i_fu_367_p0();
    void thread_tmp_8_i_fu_367_p2();
    void thread_tmp_fu_237_p3();
    void thread_tmp_i4_mid2_cast_fu_329_p1();
    void thread_tmp_i4_mid2_v_fu_315_p3();
    void thread_tmp_i_mid2_cast_fu_234_p1();
    void thread_tmp_i_mid2_v_fu_220_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
