-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getConvolutionResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_q0 : IN STD_LOGIC_VECTOR (95 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getConvolutionResult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=104,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=701,HLS_SYN_LUT=4039}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv96_10000000200000001 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000010000000000000000000000000000001000000000000000000000000000000001";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_FFFFFFFFFFFFFFFEFFFFFFFF : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111111";
    constant ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv96_FFFFFFFF0000000000000001 : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv96_FFFFFFFE0000000000000002 : STD_LOGIC_VECTOR (95 downto 0) := "111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal row_fu_155_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_reg_644 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_5_i_fu_161_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_i_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_i_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_169_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_i_reg_663 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_fu_186_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_reg_683 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_i_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_247_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_reg_693 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_13_fu_257_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_13_reg_698 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_25_fu_325_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_reg_703 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_335_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_28_reg_708 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_16_fu_355_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_31_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_1_fu_397_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_1_reg_731 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_12_i_fu_403_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_i_reg_736 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_i4_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_i_fu_411_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_i_reg_750 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_1_fu_429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_1_reg_763 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_i8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_reg_773 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_43_fu_500_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_43_reg_778 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_55_fu_568_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_reg_783 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_fu_578_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_58_reg_788 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_46_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_61_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i1_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal row_i_reg_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_reg_103 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal row_i2_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i7_reg_126 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_2_i_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_i9_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal verticalResult_assig_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal horizontalResult_ass_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_1_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_211_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_220_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_201_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_5_fu_215_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_240_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_232_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_11_fu_253_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_fu_263_p5 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_17_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_289_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_279_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_20_fu_293_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_310_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_26_fu_331_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_12_fu_341_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_14_fu_344_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_15_fu_350_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_27_fu_359_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_29_fu_362_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_30_fu_368_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_32_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_444_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_35_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_fu_483_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_475_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_41_fu_496_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_1_fu_506_p5 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_47_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_532_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_48_fu_522_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_50_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_545_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_561_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_53_fu_553_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_56_fu_574_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_42_fu_584_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_44_fu_587_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_45_fu_593_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_57_fu_602_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_59_fu_605_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_60_fu_611_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component getConvolutionResbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (95 downto 0);
        din1 : IN STD_LOGIC_VECTOR (95 downto 0);
        din2 : IN STD_LOGIC_VECTOR (95 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;



begin
    getConvolutionResbkb_U1 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        din2_WIDTH => 96,
        din3_WIDTH => 2,
        dout_WIDTH => 96)
    port map (
        din0 => ap_const_lv96_10000000200000001,
        din1 => ap_const_lv96_0,
        din2 => ap_const_lv96_FFFFFFFFFFFFFFFEFFFFFFFF,
        din3 => col_i_reg_103,
        dout => tmp_fu_263_p5);

    getConvolutionResbkb_U2 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 96,
        din1_WIDTH => 96,
        din2_WIDTH => 96,
        din3_WIDTH => 2,
        dout_WIDTH => 96)
    port map (
        din0 => ap_const_lv96_FFFFFFFF0000000000000001,
        din1 => ap_const_lv96_FFFFFFFE0000000000000002,
        din2 => ap_const_lv96_FFFFFFFF0000000000000001,
        din3 => col_i7_reg_126,
        dout => tmp_1_fu_506_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_i7_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                col_i7_reg_126 <= col_1_reg_763;
            elsif (((exitcond1_i4_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                col_i7_reg_126 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    col_i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                col_i_reg_103 <= col_reg_683;
            elsif (((exitcond1_i_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_i_reg_103 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    horizontalResult_ass_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                horizontalResult_ass_fu_68 <= summation_1_fu_624_p2;
            elsif (((exitcond1_i_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                horizontalResult_ass_fu_68 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_i2_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_i2_reg_115 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i8_fu_423_p2 = ap_const_lv1_1))) then 
                row_i2_reg_115 <= row_1_reg_731;
            end if; 
        end if;
    end process;

    row_i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_i_reg_92 <= row_reg_644;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_i_reg_92 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    verticalResult_assig_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                verticalResult_assig_fu_64 <= summation_fu_381_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                verticalResult_assig_fu_64 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                col_1_reg_763 <= col_1_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_reg_683 <= col_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                row_1_reg_731 <= row_1_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_644 <= row_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_10_reg_693(6 downto 1) <= tmp_10_fu_247_p2(6 downto 1);
                tmp_13_reg_698 <= tmp_13_fu_257_p2;
                    tmp_25_reg_703(6 downto 1) <= tmp_25_fu_325_p2(6 downto 1);
                tmp_28_reg_708 <= tmp_28_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i4_fu_391_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_12_i_reg_736(6 downto 5) <= tmp_12_i_fu_403_p3(6 downto 5);
                    tmp_13_i_reg_750(6 downto 5) <= tmp_13_i_fu_411_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_16_reg_713 <= tmp_16_fu_355_p1;
                tmp_31_reg_718 <= tmp_31_fu_373_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_3_i_reg_723 <= tmp_3_i_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_40_reg_773(6 downto 1) <= tmp_40_fu_490_p2(6 downto 1);
                tmp_43_reg_778 <= tmp_43_fu_500_p2;
                    tmp_55_reg_783(6 downto 1) <= tmp_55_fu_568_p2(6 downto 1);
                tmp_58_reg_788 <= tmp_58_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_46_reg_793 <= tmp_46_fu_598_p1;
                tmp_61_reg_798 <= tmp_61_fu_616_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_149_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_5_i_reg_649(6 downto 5) <= tmp_5_i_fu_161_p3(6 downto 5);
                    tmp_6_i_reg_663(6 downto 5) <= tmp_6_i_fu_169_p2(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_8_i1_reg_803 <= tmp_8_i1_fu_620_p2;
            end if;
        end if;
    end process;
    tmp_5_i_reg_649(4 downto 0) <= "00000";
    tmp_6_i_reg_663(4 downto 0) <= "11111";
    tmp_10_reg_693(0) <= '0';
    tmp_25_reg_703(0) <= '0';
    tmp_12_i_reg_736(4 downto 0) <= "00000";
    tmp_13_i_reg_750(4 downto 0) <= "11111";
    tmp_40_reg_773(0) <= '0';
    tmp_55_reg_783(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_i_fu_149_p2, ap_CS_fsm_state3, exitcond_i_fu_180_p2, ap_CS_fsm_state8, exitcond1_i4_fu_391_p2, ap_CS_fsm_state9, exitcond_i8_fu_423_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_fu_149_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_i4_fu_391_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i8_fu_423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, exitcond1_i4_fu_391_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_i4_fu_391_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond1_i4_fu_391_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_i4_fu_391_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(horizontalResult_ass_fu_68) + unsigned(verticalResult_assig_fu_64));

    array_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, tmp_2_i_fu_192_p1, tmp_7_i9_fu_435_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_address0 <= tmp_7_i9_fu_435_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= tmp_2_i_fu_192_p1(2 - 1 downto 0);
        else 
            array_r_address0 <= "XX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_429_p2 <= std_logic_vector(unsigned(col_i7_reg_126) + unsigned(ap_const_lv2_1));
    col_fu_186_p2 <= std_logic_vector(unsigned(col_i_reg_103) + unsigned(ap_const_lv2_1));
    exitcond1_i4_fu_391_p2 <= "1" when (row_i2_reg_115 = ap_const_lv2_3) else "0";
    exitcond1_i_fu_149_p2 <= "1" when (row_i_reg_92 = ap_const_lv2_3) else "0";
    exitcond_i8_fu_423_p2 <= "1" when (col_i7_reg_126 = ap_const_lv2_3) else "0";
    exitcond_i_fu_180_p2 <= "1" when (col_i_reg_103 = ap_const_lv2_3) else "0";
    row_1_fu_397_p2 <= std_logic_vector(unsigned(row_i2_reg_115) + unsigned(ap_const_lv2_1));
    row_fu_155_p2 <= std_logic_vector(unsigned(row_i_reg_92) + unsigned(ap_const_lv2_1));
    summation_1_fu_624_p2 <= std_logic_vector(unsigned(horizontalResult_ass_fu_68) + unsigned(tmp_8_i1_reg_803));
    summation_fu_381_p2 <= std_logic_vector(unsigned(verticalResult_assig_fu_64) + unsigned(tmp_3_i_reg_723));
    tmp_10_fu_247_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_7_fu_224_p3));
    tmp_11_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_240_p3),96));
    tmp_12_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_693),96));
    tmp_12_i_fu_403_p3 <= (row_i2_reg_115 & ap_const_lv5_0);
    tmp_13_fu_257_p2 <= std_logic_vector(shift_right(unsigned(tmp_8_fu_232_p3),to_integer(unsigned('0' & tmp_11_fu_253_p1(31-1 downto 0)))));
    tmp_13_i_fu_411_p2 <= (tmp_12_i_fu_403_p3 or ap_const_lv7_1F);
    tmp_14_fu_344_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_12_fu_341_p1(31-1 downto 0)))));
    tmp_15_fu_350_p2 <= (tmp_14_fu_344_p2 and tmp_13_reg_698);
    tmp_16_fu_355_p1 <= tmp_15_fu_350_p2(32 - 1 downto 0);
    tmp_17_fu_275_p2 <= "1" when (unsigned(tmp_5_i_reg_649) > unsigned(tmp_6_i_reg_663)) else "0";
    
    tmp_18_fu_279_p4_proc : process(tmp_fu_263_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_18_fu_279_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_fu_263_p5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_18_fu_279_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_18_fu_279_p4_i) := tmp_fu_263_p5(96-1-tmp_18_fu_279_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_18_fu_279_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_19_fu_289_p2 <= std_logic_vector(unsigned(tmp_5_i_reg_649) - unsigned(tmp_6_i_reg_663));
    tmp_20_fu_293_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_5_i_reg_649));
    tmp_21_fu_298_p2 <= std_logic_vector(unsigned(tmp_6_i_reg_663) - unsigned(tmp_5_i_reg_649));
    tmp_22_fu_302_p3 <= 
        tmp_19_fu_289_p2 when (tmp_17_fu_275_p2(0) = '1') else 
        tmp_21_fu_298_p2;
    tmp_23_fu_310_p3 <= 
        tmp_18_fu_279_p4 when (tmp_17_fu_275_p2(0) = '1') else 
        tmp_fu_263_p5;
    tmp_24_fu_318_p3 <= 
        tmp_20_fu_293_p2 when (tmp_17_fu_275_p2(0) = '1') else 
        tmp_5_i_reg_649;
    tmp_25_fu_325_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_22_fu_302_p3));
    tmp_26_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_318_p3),96));
    tmp_27_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_reg_703),96));
    tmp_28_fu_335_p2 <= std_logic_vector(shift_right(unsigned(tmp_23_fu_310_p3),to_integer(unsigned('0' & tmp_26_fu_331_p1(31-1 downto 0)))));
    tmp_29_fu_362_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_27_fu_359_p1(31-1 downto 0)))));
    tmp_2_fu_197_p2 <= "1" when (unsigned(tmp_5_i_reg_649) > unsigned(tmp_6_i_reg_663)) else "0";
    tmp_2_i_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_103),64));
    tmp_30_fu_368_p2 <= (tmp_29_fu_362_p2 and tmp_28_reg_708);
    tmp_31_fu_373_p1 <= tmp_30_fu_368_p2(32 - 1 downto 0);
    tmp_32_fu_440_p2 <= "1" when (unsigned(tmp_12_i_reg_736) > unsigned(tmp_13_i_reg_750)) else "0";
    
    tmp_33_fu_444_p4_proc : process(array_r_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_33_fu_444_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := array_r_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_33_fu_444_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_33_fu_444_p4_i) := array_r_q0(96-1-tmp_33_fu_444_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_33_fu_444_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_34_fu_454_p2 <= std_logic_vector(unsigned(tmp_12_i_reg_736) - unsigned(tmp_13_i_reg_750));
    tmp_35_fu_458_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_12_i_reg_736));
    tmp_36_fu_463_p2 <= std_logic_vector(unsigned(tmp_13_i_reg_750) - unsigned(tmp_12_i_reg_736));
    tmp_37_fu_467_p3 <= 
        tmp_34_fu_454_p2 when (tmp_32_fu_440_p2(0) = '1') else 
        tmp_36_fu_463_p2;
    tmp_38_fu_475_p3 <= 
        tmp_33_fu_444_p4 when (tmp_32_fu_440_p2(0) = '1') else 
        array_r_q0;
    tmp_39_fu_483_p3 <= 
        tmp_35_fu_458_p2 when (tmp_32_fu_440_p2(0) = '1') else 
        tmp_12_i_reg_736;
    
    tmp_3_fu_201_p4_proc : process(array_r_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_3_fu_201_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := array_r_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_3_fu_201_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_3_fu_201_p4_i) := array_r_q0(96-1-tmp_3_fu_201_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_201_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_3_i_fu_377_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_31_reg_718) * signed(tmp_16_reg_713))), 32));
    tmp_40_fu_490_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_37_fu_467_p3));
    tmp_41_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_483_p3),96));
    tmp_42_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_reg_773),96));
    tmp_43_fu_500_p2 <= std_logic_vector(shift_right(unsigned(tmp_38_fu_475_p3),to_integer(unsigned('0' & tmp_41_fu_496_p1(31-1 downto 0)))));
    tmp_44_fu_587_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_42_fu_584_p1(31-1 downto 0)))));
    tmp_45_fu_593_p2 <= (tmp_44_fu_587_p2 and tmp_43_reg_778);
    tmp_46_fu_598_p1 <= tmp_45_fu_593_p2(32 - 1 downto 0);
    tmp_47_fu_518_p2 <= "1" when (unsigned(tmp_12_i_reg_736) > unsigned(tmp_13_i_reg_750)) else "0";
    
    tmp_48_fu_522_p4_proc : process(tmp_1_fu_506_p5)
    variable vlo_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(96+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_48_fu_522_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(96 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_1_fu_506_p5;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(96-1-unsigned(ap_const_lv32_5F(7-1 downto 0)));
            for tmp_48_fu_522_p4_i in 0 to 96-1 loop
                v0_cpy(tmp_48_fu_522_p4_i) := tmp_1_fu_506_p5(96-1-tmp_48_fu_522_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(96-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_48_fu_522_p4 <= resvalue(96-1 downto 0);
    end process;

    tmp_49_fu_532_p2 <= std_logic_vector(unsigned(tmp_12_i_reg_736) - unsigned(tmp_13_i_reg_750));
    tmp_4_fu_211_p2 <= std_logic_vector(unsigned(tmp_5_i_reg_649) - unsigned(tmp_6_i_reg_663));
    tmp_50_fu_536_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_12_i_reg_736));
    tmp_51_fu_541_p2 <= std_logic_vector(unsigned(tmp_13_i_reg_750) - unsigned(tmp_12_i_reg_736));
    tmp_52_fu_545_p3 <= 
        tmp_49_fu_532_p2 when (tmp_47_fu_518_p2(0) = '1') else 
        tmp_51_fu_541_p2;
    tmp_53_fu_553_p3 <= 
        tmp_48_fu_522_p4 when (tmp_47_fu_518_p2(0) = '1') else 
        tmp_1_fu_506_p5;
    tmp_54_fu_561_p3 <= 
        tmp_50_fu_536_p2 when (tmp_47_fu_518_p2(0) = '1') else 
        tmp_12_i_reg_736;
    tmp_55_fu_568_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_52_fu_545_p3));
    tmp_56_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_561_p3),96));
    tmp_57_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_783),96));
    tmp_58_fu_578_p2 <= std_logic_vector(shift_right(unsigned(tmp_53_fu_553_p3),to_integer(unsigned('0' & tmp_56_fu_574_p1(31-1 downto 0)))));
    tmp_59_fu_605_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv96_FFFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_57_fu_602_p1(31-1 downto 0)))));
    tmp_5_fu_215_p2 <= std_logic_vector(signed(ap_const_lv7_5F) - signed(tmp_5_i_reg_649));
    tmp_5_i_fu_161_p3 <= (row_i_reg_92 & ap_const_lv5_0);
    tmp_60_fu_611_p2 <= (tmp_59_fu_605_p2 and tmp_58_reg_788);
    tmp_61_fu_616_p1 <= tmp_60_fu_611_p2(32 - 1 downto 0);
    tmp_6_fu_220_p2 <= std_logic_vector(unsigned(tmp_6_i_reg_663) - unsigned(tmp_5_i_reg_649));
    tmp_6_i_fu_169_p2 <= (tmp_5_i_fu_161_p3 or ap_const_lv7_1F);
    tmp_7_fu_224_p3 <= 
        tmp_4_fu_211_p2 when (tmp_2_fu_197_p2(0) = '1') else 
        tmp_6_fu_220_p2;
    tmp_7_i9_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i7_reg_126),64));
    tmp_8_fu_232_p3 <= 
        tmp_3_fu_201_p4 when (tmp_2_fu_197_p2(0) = '1') else 
        array_r_q0;
    tmp_8_i1_fu_620_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_61_reg_798) * signed(tmp_46_reg_793))), 32));
    tmp_9_fu_240_p3 <= 
        tmp_5_fu_215_p2 when (tmp_2_fu_197_p2(0) = '1') else 
        tmp_5_i_reg_649;
end behav;
