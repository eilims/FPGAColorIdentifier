// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=86,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=209,HLS_SYN_LUT=413}" *)

module getConvolutionResult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_r_address0,
        array_r_ce0,
        array_r_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] array_r_address0;
output   array_r_ce0;
input  [31:0] array_r_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] array_r_address0;
reg array_r_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] p_vertical_sobel_oper_address0;
reg    p_vertical_sobel_oper_ce0;
wire   [2:0] p_vertical_sobel_oper_q0;
wire   [3:0] p_horizontal_sobel_op_address0;
reg    p_horizontal_sobel_op_ce0;
wire   [2:0] p_horizontal_sobel_op_q0;
reg  signed [31:0] reg_142;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state9;
wire   [1:0] row_fu_157_p2;
reg   [1:0] row_reg_332;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_1_fu_179_p2;
reg   [4:0] tmp_1_reg_337;
wire   [0:0] exitcond1_i_fu_151_p2;
wire   [1:0] col_fu_196_p2;
reg   [1:0] col_reg_352;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_i_fu_190_p2;
reg   [2:0] p_vertical_sobel_oper_1_reg_367;
wire   [31:0] tmp_3_i_fu_220_p2;
reg   [31:0] tmp_3_i_reg_372;
wire    ap_CS_fsm_state5;
wire   [1:0] row_1_fu_242_p2;
reg   [1:0] row_1_reg_380;
wire    ap_CS_fsm_state7;
wire   [4:0] tmp_3_fu_264_p2;
reg   [4:0] tmp_3_reg_385;
wire   [0:0] exitcond1_i3_fu_236_p2;
wire   [1:0] col_1_fu_282_p2;
reg   [1:0] col_1_reg_393;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_i8_fu_276_p2;
reg   [2:0] p_horizontal_sobel_op_1_reg_408;
wire   [31:0] tmp_8_i_fu_306_p2;
reg   [31:0] tmp_8_i_reg_413;
wire    ap_CS_fsm_state10;
reg   [1:0] row_i_reg_92;
reg   [1:0] col_i_reg_103;
wire    ap_CS_fsm_state6;
reg   [1:0] row_i1_reg_114;
reg   [1:0] col_i7_reg_125;
wire    ap_CS_fsm_state11;
wire  signed [63:0] tmp_4_cast_fu_211_p1;
wire  signed [63:0] tmp_5_cast_fu_297_p1;
reg   [31:0] verticalResult_assig_fu_40;
wire   [31:0] summation_fu_226_p2;
reg   [31:0] horizontalResult_ass_fu_44;
wire   [31:0] summation_1_fu_312_p2;
wire   [3:0] tmp_fu_167_p3;
wire   [4:0] p_shl_cast_fu_175_p1;
wire   [4:0] tmp_i_cast_fu_163_p1;
wire   [4:0] tmp_2_i_cast_fu_202_p1;
wire   [4:0] tmp_4_fu_206_p2;
wire  signed [2:0] tmp_3_i_fu_220_p0;
wire   [3:0] tmp_2_fu_252_p3;
wire   [4:0] p_shl1_cast_fu_260_p1;
wire   [4:0] tmp_i5_cast_fu_248_p1;
wire   [4:0] tmp_7_i_cast_fu_288_p1;
wire   [4:0] tmp_5_fu_292_p2;
wire  signed [2:0] tmp_8_i_fu_306_p0;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

getConvolutionResbkb #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
p_vertical_sobel_oper_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_vertical_sobel_oper_address0),
    .ce0(p_vertical_sobel_oper_ce0),
    .q0(p_vertical_sobel_oper_q0)
);

getConvolutionRescud #(
    .DataWidth( 3 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
p_horizontal_sobel_op_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_horizontal_sobel_op_address0),
    .ce0(p_horizontal_sobel_op_ce0),
    .q0(p_horizontal_sobel_op_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        col_i7_reg_125 <= col_1_reg_393;
    end else if (((exitcond1_i3_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        col_i7_reg_125 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_i_reg_103 <= col_reg_352;
    end else if (((exitcond1_i_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_i_reg_103 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        horizontalResult_ass_fu_44 <= summation_1_fu_312_p2;
    end else if (((exitcond1_i_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        horizontalResult_ass_fu_44 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_i1_reg_114 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond_i8_fu_276_p2 == 1'd1))) begin
        row_i1_reg_114 <= row_1_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_i_reg_92 <= row_reg_332;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_i_reg_92 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        verticalResult_assig_fu_40 <= summation_fu_226_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        verticalResult_assig_fu_40 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_1_reg_393 <= col_1_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_reg_352 <= col_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_horizontal_sobel_op_1_reg_408 <= p_horizontal_sobel_op_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_vertical_sobel_oper_1_reg_367 <= p_vertical_sobel_oper_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_142 <= array_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        row_1_reg_380 <= row_1_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_332 <= row_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_337 <= tmp_1_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_3_i_reg_372 <= tmp_3_i_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i3_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_3_reg_385 <= tmp_3_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_8_i_reg_413 <= tmp_8_i_fu_306_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i3_fu_236_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i3_fu_236_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        array_r_address0 = tmp_5_cast_fu_297_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        array_r_address0 = tmp_4_cast_fu_211_p1;
    end else begin
        array_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        array_r_ce0 = 1'b1;
    end else begin
        array_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_horizontal_sobel_op_ce0 = 1'b1;
    end else begin
        p_horizontal_sobel_op_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_vertical_sobel_oper_ce0 = 1'b1;
    end else begin
        p_vertical_sobel_oper_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_151_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_i3_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_i8_fu_276_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = (horizontalResult_ass_fu_44 + verticalResult_assig_fu_40);

assign col_1_fu_282_p2 = (col_i7_reg_125 + 2'd1);

assign col_fu_196_p2 = (col_i_reg_103 + 2'd1);

assign exitcond1_i3_fu_236_p2 = ((row_i1_reg_114 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_151_p2 = ((row_i_reg_92 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i8_fu_276_p2 = ((col_i7_reg_125 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_i_fu_190_p2 = ((col_i_reg_103 == 2'd3) ? 1'b1 : 1'b0);

assign p_horizontal_sobel_op_address0 = tmp_5_cast_fu_297_p1;

assign p_shl1_cast_fu_260_p1 = tmp_2_fu_252_p3;

assign p_shl_cast_fu_175_p1 = tmp_fu_167_p3;

assign p_vertical_sobel_oper_address0 = tmp_4_cast_fu_211_p1;

assign row_1_fu_242_p2 = (row_i1_reg_114 + 2'd1);

assign row_fu_157_p2 = (row_i_reg_92 + 2'd1);

assign summation_1_fu_312_p2 = (horizontalResult_ass_fu_44 + tmp_8_i_reg_413);

assign summation_fu_226_p2 = (verticalResult_assig_fu_40 + tmp_3_i_reg_372);

assign tmp_1_fu_179_p2 = (p_shl_cast_fu_175_p1 - tmp_i_cast_fu_163_p1);

assign tmp_2_fu_252_p3 = {{row_i1_reg_114}, {2'd0}};

assign tmp_2_i_cast_fu_202_p1 = col_i_reg_103;

assign tmp_3_fu_264_p2 = (p_shl1_cast_fu_260_p1 - tmp_i5_cast_fu_248_p1);

assign tmp_3_i_fu_220_p0 = p_vertical_sobel_oper_1_reg_367;

assign tmp_3_i_fu_220_p2 = ($signed(tmp_3_i_fu_220_p0) * $signed(reg_142));

assign tmp_4_cast_fu_211_p1 = $signed(tmp_4_fu_206_p2);

assign tmp_4_fu_206_p2 = (tmp_1_reg_337 + tmp_2_i_cast_fu_202_p1);

assign tmp_5_cast_fu_297_p1 = $signed(tmp_5_fu_292_p2);

assign tmp_5_fu_292_p2 = (tmp_3_reg_385 + tmp_7_i_cast_fu_288_p1);

assign tmp_7_i_cast_fu_288_p1 = col_i7_reg_125;

assign tmp_8_i_fu_306_p0 = p_horizontal_sobel_op_1_reg_408;

assign tmp_8_i_fu_306_p2 = ($signed(tmp_8_i_fu_306_p0) * $signed(reg_142));

assign tmp_fu_167_p3 = {{row_i_reg_92}, {2'd0}};

assign tmp_i5_cast_fu_248_p1 = row_i1_reg_114;

assign tmp_i_cast_fu_163_p1 = row_i_reg_92;

endmodule //getConvolutionResult
