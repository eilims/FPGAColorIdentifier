-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getConvolutionResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_0_ce0 : OUT STD_LOGIC;
    array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_0_ce1 : OUT STD_LOGIC;
    array_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_1_ce0 : OUT STD_LOGIC;
    array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_1_ce1 : OUT STD_LOGIC;
    array_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_2_ce0 : OUT STD_LOGIC;
    array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    array_2_ce1 : OUT STD_LOGIC;
    array_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getConvolutionResult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getConvolutionResult,hls_ip_2017_4_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=18,HLS_SYN_FF=564,HLS_SYN_LUT=1153}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv23_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv23_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000011";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal horizontalResult_ass_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal verticalResult_assig_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond1_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond1_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_300_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_306_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_318_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_330_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_342_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_363_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_2_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal verticalResult_2_2_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal horizontalResult_2_2_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal result_1_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_V_fu_463_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_2_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_0353_1_i_i_fu_571_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal exitcond_i_i_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_star_V_fu_595_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal q_V_1_fu_603_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_199_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_i_i_reg_231 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_1_i_i_reg_242 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_2_i_i_reg_253 : STD_LOGIC_VECTOR (22 downto 0);
    signal i_i_i_reg_262 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_10_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_V_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_433_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_9_i_i_cast_fu_443_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_i_i_fu_447_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal val_assign_fu_453_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_fu_493_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal lhs_V_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_fu_511_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_1_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_i_cast_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_487_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_18_fu_527_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_2_fu_537_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_3_fu_545_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_4_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_i_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_561_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_16_fu_479_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_V_2_fu_565_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal s_V_1_fu_531_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_20_fu_579_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_21_fu_583_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_22_fu_587_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal q_V_fu_615_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_1_i_i_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_621_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_631_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_v_i_fu_641_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component getConvolutionResbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    getConvolutionResbkb_U1 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => array_0_q0,
        din1 => array_1_q0,
        din2 => array_2_q0,
        din3 => i_reg_195,
        dout => grp_fu_273_p5);

    getConvolutionResbkb_U2 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_1,
        din1 => ap_const_lv32_2,
        din2 => ap_const_lv32_1,
        din3 => i_reg_195,
        dout => tmp_3_fu_306_p5);

    getConvolutionResbkb_U3 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_1,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_FFFFFFFF,
        din3 => i_reg_195,
        dout => tmp_5_fu_318_p5);

    getConvolutionResbkb_U4 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => array_0_q1,
        din1 => array_1_q1,
        din2 => array_2_q1,
        din3 => i_reg_195,
        dout => tmp_7_fu_330_p5);

    getConvolutionResbkb_U5 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_2,
        din1 => ap_const_lv32_0,
        din2 => ap_const_lv32_FFFFFFFE,
        din3 => i_reg_195,
        dout => tmp_8_fu_342_p5);

    getConvolutionResbkb_U6 : component getConvolutionResbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_FFFFFFFF,
        din1 => ap_const_lv32_FFFFFFFE,
        din2 => ap_const_lv32_FFFFFFFF,
        din3 => i_reg_195,
        dout => tmp_s_fu_363_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    horizontalResult_ass_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                horizontalResult_ass_reg_207 <= horizontalResult_2_2_fu_399_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                horizontalResult_ass_reg_207 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_i_i_reg_262 <= i_2_fu_473_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_i_i_reg_262 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_698 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_195 <= i_1_reg_702;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_195 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_1_i_i_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                                p_1_i_i_reg_242(20 downto 1) <= q_star_V_fu_595_p3(20 downto 1);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_1_i_i_reg_242(1) <= '0';
                p_1_i_i_reg_242(2) <= '0';
                p_1_i_i_reg_242(3) <= '0';
                p_1_i_i_reg_242(4) <= '0';
                p_1_i_i_reg_242(5) <= '0';
                p_1_i_i_reg_242(6) <= '0';
                p_1_i_i_reg_242(7) <= '0';
                p_1_i_i_reg_242(8) <= '0';
                p_1_i_i_reg_242(9) <= '0';
                p_1_i_i_reg_242(10) <= '0';
                p_1_i_i_reg_242(11) <= '0';
                p_1_i_i_reg_242(12) <= '0';
                p_1_i_i_reg_242(13) <= '0';
                p_1_i_i_reg_242(14) <= '0';
                p_1_i_i_reg_242(15) <= '0';
                p_1_i_i_reg_242(16) <= '0';
                p_1_i_i_reg_242(17) <= '0';
                p_1_i_i_reg_242(18) <= '0';
                p_1_i_i_reg_242(19) <= '0';
                p_1_i_i_reg_242(20) <= '0';
            end if; 
        end if;
    end process;

    p_2_i_i_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_2_i_i_reg_253 <= p_0353_1_i_i_fu_571_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_2_i_i_reg_253 <= s_V_fu_463_p1;
            end if; 
        end if;
    end process;

    p_i_i_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_i_i_reg_231 <= q_V_1_fu_603_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_i_i_reg_231 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    verticalResult_assig_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                verticalResult_assig_reg_219 <= verticalResult_2_2_fu_384_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                verticalResult_assig_reg_219 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond1_reg_698 <= exitcond1_reg_698;
                exitcond1_reg_698 <= exitcond1_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_1_reg_702 <= i_1_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_698 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_285 <= grp_fu_273_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                result_1_reg_772 <= result_1_fu_411_p2;
                result_reg_767 <= result_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_3_reg_707 <= tmp_3_fu_306_p5;
                tmp_5_reg_712 <= tmp_5_fu_318_p5;
                tmp_7_reg_717 <= tmp_7_fu_330_p5;
                tmp_8_reg_722 <= tmp_8_fu_342_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_4_2_reg_747 <= tmp_4_2_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_4_reg_727 <= tmp_4_fu_354_p2;
                tmp_6_1_reg_737 <= tmp_6_1_fu_359_p2;
                tmp_s_reg_742 <= tmp_s_fu_363_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_6_2_reg_752 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_698 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_732 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    p_1_i_i_reg_242(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_fu_294_p2, ap_enable_reg_pp0_iter2, ap_CS_fsm_state9, exitcond_i_i_fu_467_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_294_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_294_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_i_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_294_p2)
    begin
        if ((exitcond1_fu_294_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9, exitcond_i_i_fu_467_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_i_fu_467_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_199_p4_assign_proc : process(i_reg_195, exitcond1_reg_698, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_1_reg_702, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_698 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_199_p4 <= i_1_reg_702;
        else 
            ap_phi_mux_i_phi_fu_199_p4 <= i_reg_195;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond_i_i_fu_467_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_i_fu_467_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_v_i_fu_641_p3),32));

    array_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                array_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                array_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                array_0_address0 <= "XX";
            end if;
        else 
            array_0_address0 <= "XX";
        end if; 
    end process;

    array_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    array_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            array_0_ce0 <= ap_const_logic_1;
        else 
            array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            array_0_ce1 <= ap_const_logic_1;
        else 
            array_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                array_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                array_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                array_1_address0 <= "XX";
            end if;
        else 
            array_1_address0 <= "XX";
        end if; 
    end process;

    array_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    array_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            array_1_ce0 <= ap_const_logic_1;
        else 
            array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            array_1_ce1 <= ap_const_logic_1;
        else 
            array_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                array_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                array_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                array_2_address0 <= "XX";
            end if;
        else 
            array_2_address0 <= "XX";
        end if; 
    end process;

    array_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    array_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            array_2_ce0 <= ap_const_logic_1;
        else 
            array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            array_2_ce1 <= ap_const_logic_1;
        else 
            array_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_294_p2 <= "1" when (ap_phi_mux_i_phi_fu_199_p4 = ap_const_lv2_3) else "0";
    exitcond_i_i_fu_467_p2 <= "1" when (i_i_i_reg_262 = ap_const_lv5_16) else "0";
    grp_fu_289_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_5_reg_712) * signed(reg_285))), 32));
    horizontalResult_2_2_fu_399_p2 <= std_logic_vector(signed(horizontalResult_ass_reg_207) + signed(tmp_11_fu_394_p2));
    i_1_fu_300_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_199_p4) + unsigned(ap_const_lv2_1));
    i_2_fu_473_p2 <= std_logic_vector(unsigned(i_i_i_reg_262) + unsigned(ap_const_lv5_1));
    input_V_fu_427_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_422_p2) + unsigned(p_Val2_2_fu_417_p2));
        lhs_V_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_493_p3),32));

    op2_assign_fu_511_p2 <= std_logic_vector(signed(ap_const_lv5_15) - signed(i_i_i_reg_262));
    op2_assign_i_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_511_p2),32));
    p_0353_1_i_i_fu_571_p3 <= 
        s_V_2_fu_565_p2 when (tmp_16_fu_479_p3(0) = '1') else 
        s_V_1_fu_531_p2;
    p_Val2_2_fu_417_p2 <= std_logic_vector(shift_left(unsigned(result_reg_767),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    p_Val2_3_fu_422_p2 <= std_logic_vector(shift_left(unsigned(result_1_reg_772),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    p_v_i_fu_641_p3 <= 
        tmp_12_fu_621_p4 when (tmp_1_i_i_fu_609_p2(0) = '1') else 
        tmp_13_fu_631_p4;
    q_V_1_fu_603_p2 <= (q_star_V_fu_595_p3 or ap_const_lv21_1);
    q_V_fu_615_p2 <= std_logic_vector(unsigned(p_i_i_reg_231) + unsigned(ap_const_lv21_1));
    q_star_V_fu_595_p3 <= (tmp_22_fu_587_p3 & ap_const_lv1_0);
    r_V_1_fu_505_p2 <= (lhs_V_fu_501_p1 or ap_const_lv32_1);
    r_V_2_fu_537_p3 <= (p_1_i_i_reg_242 & ap_const_lv2_0);
    r_V_3_fu_545_p2 <= (r_V_2_fu_537_p3 or ap_const_lv23_3);
        r_V_4_i_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_545_p2),32));

    r_V_fu_493_p3 <= (p_i_i_reg_231 & ap_const_lv2_0);
    result_1_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(horizontalResult_ass_reg_207) * signed(horizontalResult_ass_reg_207))), 32));
    result_fu_405_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(verticalResult_assig_reg_219) * signed(verticalResult_assig_reg_219))), 32));
    s_V_1_fu_531_p2 <= std_logic_vector(unsigned(tmp_17_fu_487_p2) - unsigned(tmp_18_fu_527_p1));
    s_V_2_fu_565_p2 <= std_logic_vector(unsigned(tmp_19_fu_561_p1) + unsigned(tmp_17_fu_487_p2));
    s_V_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_fu_453_p4),23));
    tmp_10_fu_380_p2 <= std_logic_vector(unsigned(tmp_4_2_reg_747) + unsigned(tmp_4_reg_727));
    tmp_11_fu_394_p2 <= std_logic_vector(unsigned(tmp_fu_390_p2) + unsigned(tmp_6_reg_732));
    tmp_12_fu_621_p4 <= q_V_fu_615_p2(20 downto 9);
    tmp_13_fu_631_p4 <= p_i_i_reg_231(20 downto 9);
    tmp_14_fu_433_p4 <= input_V_fu_427_p2(31 downto 11);
    tmp_16_fu_479_p3 <= p_2_i_i_reg_253(22 downto 22);
    tmp_17_fu_487_p2 <= std_logic_vector(shift_left(unsigned(p_2_i_i_reg_253),to_integer(unsigned('0' & ap_const_lv23_1(23-1 downto 0)))));
    tmp_18_fu_527_p1 <= tmp_5_i_i_fu_521_p2(23 - 1 downto 0);
    tmp_19_fu_561_p1 <= tmp_6_i_i_fu_555_p2(23 - 1 downto 0);
    tmp_1_i_i_fu_609_p2 <= "1" when (signed(p_2_i_i_reg_253) > signed(ap_const_lv23_0)) else "0";
    tmp_20_fu_579_p1 <= p_1_i_i_reg_242(20 - 1 downto 0);
    tmp_21_fu_583_p1 <= p_i_i_reg_231(20 - 1 downto 0);
    tmp_22_fu_587_p3 <= 
        tmp_20_fu_579_p1 when (tmp_16_fu_479_p3(0) = '1') else 
        tmp_21_fu_583_p1;
    tmp_4_2_fu_375_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_s_reg_742) * signed(reg_285))), 32));
    tmp_4_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_3_reg_707) * signed(reg_285))), 32));
    tmp_5_i_i_fu_521_p2 <= std_logic_vector(shift_left(unsigned(r_V_1_fu_505_p2),to_integer(unsigned('0' & op2_assign_i_cast_fu_517_p1(31-1 downto 0)))));
    tmp_6_1_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_8_reg_722) * signed(tmp_7_reg_717))), 32));
    tmp_6_i_i_fu_555_p2 <= std_logic_vector(shift_left(unsigned(r_V_4_i_cast_fu_551_p1),to_integer(unsigned('0' & op2_assign_i_cast_fu_517_p1(31-1 downto 0)))));
    tmp_9_i_i_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_433_p4),22));
    tmp_fu_390_p2 <= std_logic_vector(unsigned(tmp_6_1_reg_737) + unsigned(tmp_6_2_reg_752));
    tmp_i_i_fu_447_p2 <= std_logic_vector(unsigned(ap_const_lv22_1) + unsigned(tmp_9_i_i_cast_fu_443_p1));
    val_assign_fu_453_p4 <= tmp_i_i_fu_447_p2(21 downto 1);
    verticalResult_2_2_fu_384_p2 <= std_logic_vector(signed(verticalResult_assig_reg_219) + signed(tmp_10_fu_380_p2));
end behav;
