// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getConvolutionResult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getConvolutionResult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getConvolutionResult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state1 = "1";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state2 = "10";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state3 = "100";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state4 = "1000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state5 = "10000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state6 = "100000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> getConvolutionResult::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> getConvolutionResult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> getConvolutionResult::ap_const_lv32_3 = "11";
const sc_lv<32> getConvolutionResult::ap_const_lv32_8 = "1000";
const sc_lv<32> getConvolutionResult::ap_const_lv32_1 = "1";
const sc_lv<1> getConvolutionResult::ap_const_lv1_0 = "0";
const sc_lv<32> getConvolutionResult::ap_const_lv32_2 = "10";
const sc_lv<32> getConvolutionResult::ap_const_lv32_4 = "100";
const sc_lv<32> getConvolutionResult::ap_const_lv32_6 = "110";
const sc_lv<32> getConvolutionResult::ap_const_lv32_7 = "111";
const sc_lv<32> getConvolutionResult::ap_const_lv32_9 = "1001";
const sc_lv<2> getConvolutionResult::ap_const_lv2_0 = "00";
const sc_lv<1> getConvolutionResult::ap_const_lv1_1 = "1";
const sc_lv<32> getConvolutionResult::ap_const_lv32_5 = "101";
const sc_lv<32> getConvolutionResult::ap_const_lv32_A = "1010";
const sc_lv<2> getConvolutionResult::ap_const_lv2_3 = "11";
const sc_lv<2> getConvolutionResult::ap_const_lv2_1 = "1";
const bool getConvolutionResult::ap_const_boolean_1 = true;

getConvolutionResult::getConvolutionResult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    p_vertical_sobel_oper_U = new getConvolutionResbkb("p_vertical_sobel_oper_U");
    p_vertical_sobel_oper_U->clk(ap_clk);
    p_vertical_sobel_oper_U->reset(ap_rst);
    p_vertical_sobel_oper_U->address0(p_vertical_sobel_oper_address0);
    p_vertical_sobel_oper_U->ce0(p_vertical_sobel_oper_ce0);
    p_vertical_sobel_oper_U->q0(p_vertical_sobel_oper_q0);
    p_horizontal_sobel_op_U = new getConvolutionRescud("p_horizontal_sobel_op_U");
    p_horizontal_sobel_op_U->clk(ap_clk);
    p_horizontal_sobel_op_U->reset(ap_rst);
    p_horizontal_sobel_op_U->address0(p_horizontal_sobel_op_address0);
    p_horizontal_sobel_op_U->ce0(p_horizontal_sobel_op_ce0);
    p_horizontal_sobel_op_U->q0(p_horizontal_sobel_op_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_i3_fu_236_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_i3_fu_236_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_i3_fu_236_p2 );
    sensitive << ( verticalResult_assig_fu_40 );
    sensitive << ( horizontalResult_ass_fu_44 );

    SC_METHOD(thread_array_r_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_4_cast_fu_211_p1 );
    sensitive << ( tmp_5_cast_fu_297_p1 );

    SC_METHOD(thread_array_r_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_col_1_fu_282_p2);
    sensitive << ( col_i7_reg_125 );

    SC_METHOD(thread_col_fu_196_p2);
    sensitive << ( col_i_reg_103 );

    SC_METHOD(thread_exitcond1_i3_fu_236_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( row_i1_reg_114 );

    SC_METHOD(thread_exitcond1_i_fu_151_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( row_i_reg_92 );

    SC_METHOD(thread_exitcond_i8_fu_276_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( col_i7_reg_125 );

    SC_METHOD(thread_exitcond_i_fu_190_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( col_i_reg_103 );

    SC_METHOD(thread_p_horizontal_sobel_op_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_5_cast_fu_297_p1 );

    SC_METHOD(thread_p_horizontal_sobel_op_ce0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_p_shl1_cast_fu_260_p1);
    sensitive << ( tmp_2_fu_252_p3 );

    SC_METHOD(thread_p_shl_cast_fu_175_p1);
    sensitive << ( tmp_fu_167_p3 );

    SC_METHOD(thread_p_vertical_sobel_oper_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_4_cast_fu_211_p1 );

    SC_METHOD(thread_p_vertical_sobel_oper_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_row_1_fu_242_p2);
    sensitive << ( row_i1_reg_114 );

    SC_METHOD(thread_row_fu_157_p2);
    sensitive << ( row_i_reg_92 );

    SC_METHOD(thread_summation_1_fu_312_p2);
    sensitive << ( tmp_8_i_reg_413 );
    sensitive << ( horizontalResult_ass_fu_44 );

    SC_METHOD(thread_summation_fu_226_p2);
    sensitive << ( tmp_3_i_reg_372 );
    sensitive << ( verticalResult_assig_fu_40 );

    SC_METHOD(thread_tmp_1_fu_179_p2);
    sensitive << ( p_shl_cast_fu_175_p1 );
    sensitive << ( tmp_i_cast_fu_163_p1 );

    SC_METHOD(thread_tmp_2_fu_252_p3);
    sensitive << ( row_i1_reg_114 );

    SC_METHOD(thread_tmp_2_i_cast_fu_202_p1);
    sensitive << ( col_i_reg_103 );

    SC_METHOD(thread_tmp_3_fu_264_p2);
    sensitive << ( p_shl1_cast_fu_260_p1 );
    sensitive << ( tmp_i5_cast_fu_248_p1 );

    SC_METHOD(thread_tmp_3_i_fu_220_p0);
    sensitive << ( p_vertical_sobel_oper_1_reg_367 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_3_i_fu_220_p2);
    sensitive << ( reg_142 );
    sensitive << ( tmp_3_i_fu_220_p0 );

    SC_METHOD(thread_tmp_4_cast_fu_211_p1);
    sensitive << ( tmp_4_fu_206_p2 );

    SC_METHOD(thread_tmp_4_fu_206_p2);
    sensitive << ( tmp_1_reg_337 );
    sensitive << ( tmp_2_i_cast_fu_202_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_297_p1);
    sensitive << ( tmp_5_fu_292_p2 );

    SC_METHOD(thread_tmp_5_fu_292_p2);
    sensitive << ( tmp_3_reg_385 );
    sensitive << ( tmp_7_i_cast_fu_288_p1 );

    SC_METHOD(thread_tmp_7_i_cast_fu_288_p1);
    sensitive << ( col_i7_reg_125 );

    SC_METHOD(thread_tmp_8_i_fu_306_p0);
    sensitive << ( p_horizontal_sobel_op_1_reg_408 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_tmp_8_i_fu_306_p2);
    sensitive << ( reg_142 );
    sensitive << ( tmp_8_i_fu_306_p0 );

    SC_METHOD(thread_tmp_fu_167_p3);
    sensitive << ( row_i_reg_92 );

    SC_METHOD(thread_tmp_i5_cast_fu_248_p1);
    sensitive << ( row_i1_reg_114 );

    SC_METHOD(thread_tmp_i_cast_fu_163_p1);
    sensitive << ( row_i_reg_92 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_i_fu_151_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_i_fu_190_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_i3_fu_236_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_i8_fu_276_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getConvolutionResult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_r_address0, "(port)array_r_address0");
    sc_trace(mVcdFile, array_r_ce0, "(port)array_r_ce0");
    sc_trace(mVcdFile, array_r_q0, "(port)array_r_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, p_vertical_sobel_oper_address0, "p_vertical_sobel_oper_address0");
    sc_trace(mVcdFile, p_vertical_sobel_oper_ce0, "p_vertical_sobel_oper_ce0");
    sc_trace(mVcdFile, p_vertical_sobel_oper_q0, "p_vertical_sobel_oper_q0");
    sc_trace(mVcdFile, p_horizontal_sobel_op_address0, "p_horizontal_sobel_op_address0");
    sc_trace(mVcdFile, p_horizontal_sobel_op_ce0, "p_horizontal_sobel_op_ce0");
    sc_trace(mVcdFile, p_horizontal_sobel_op_q0, "p_horizontal_sobel_op_q0");
    sc_trace(mVcdFile, reg_142, "reg_142");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, row_fu_157_p2, "row_fu_157_p2");
    sc_trace(mVcdFile, row_reg_332, "row_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_1_fu_179_p2, "tmp_1_fu_179_p2");
    sc_trace(mVcdFile, tmp_1_reg_337, "tmp_1_reg_337");
    sc_trace(mVcdFile, exitcond1_i_fu_151_p2, "exitcond1_i_fu_151_p2");
    sc_trace(mVcdFile, col_fu_196_p2, "col_fu_196_p2");
    sc_trace(mVcdFile, col_reg_352, "col_reg_352");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_i_fu_190_p2, "exitcond_i_fu_190_p2");
    sc_trace(mVcdFile, p_vertical_sobel_oper_1_reg_367, "p_vertical_sobel_oper_1_reg_367");
    sc_trace(mVcdFile, tmp_3_i_fu_220_p2, "tmp_3_i_fu_220_p2");
    sc_trace(mVcdFile, tmp_3_i_reg_372, "tmp_3_i_reg_372");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, row_1_fu_242_p2, "row_1_fu_242_p2");
    sc_trace(mVcdFile, row_1_reg_380, "row_1_reg_380");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_3_fu_264_p2, "tmp_3_fu_264_p2");
    sc_trace(mVcdFile, tmp_3_reg_385, "tmp_3_reg_385");
    sc_trace(mVcdFile, exitcond1_i3_fu_236_p2, "exitcond1_i3_fu_236_p2");
    sc_trace(mVcdFile, col_1_fu_282_p2, "col_1_fu_282_p2");
    sc_trace(mVcdFile, col_1_reg_393, "col_1_reg_393");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, exitcond_i8_fu_276_p2, "exitcond_i8_fu_276_p2");
    sc_trace(mVcdFile, p_horizontal_sobel_op_1_reg_408, "p_horizontal_sobel_op_1_reg_408");
    sc_trace(mVcdFile, tmp_8_i_fu_306_p2, "tmp_8_i_fu_306_p2");
    sc_trace(mVcdFile, tmp_8_i_reg_413, "tmp_8_i_reg_413");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, row_i_reg_92, "row_i_reg_92");
    sc_trace(mVcdFile, col_i_reg_103, "col_i_reg_103");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, row_i1_reg_114, "row_i1_reg_114");
    sc_trace(mVcdFile, col_i7_reg_125, "col_i7_reg_125");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_4_cast_fu_211_p1, "tmp_4_cast_fu_211_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_297_p1, "tmp_5_cast_fu_297_p1");
    sc_trace(mVcdFile, verticalResult_assig_fu_40, "verticalResult_assig_fu_40");
    sc_trace(mVcdFile, summation_fu_226_p2, "summation_fu_226_p2");
    sc_trace(mVcdFile, horizontalResult_ass_fu_44, "horizontalResult_ass_fu_44");
    sc_trace(mVcdFile, summation_1_fu_312_p2, "summation_1_fu_312_p2");
    sc_trace(mVcdFile, tmp_fu_167_p3, "tmp_fu_167_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_175_p1, "p_shl_cast_fu_175_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_163_p1, "tmp_i_cast_fu_163_p1");
    sc_trace(mVcdFile, tmp_2_i_cast_fu_202_p1, "tmp_2_i_cast_fu_202_p1");
    sc_trace(mVcdFile, tmp_4_fu_206_p2, "tmp_4_fu_206_p2");
    sc_trace(mVcdFile, tmp_3_i_fu_220_p0, "tmp_3_i_fu_220_p0");
    sc_trace(mVcdFile, tmp_2_fu_252_p3, "tmp_2_fu_252_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_260_p1, "p_shl1_cast_fu_260_p1");
    sc_trace(mVcdFile, tmp_i5_cast_fu_248_p1, "tmp_i5_cast_fu_248_p1");
    sc_trace(mVcdFile, tmp_7_i_cast_fu_288_p1, "tmp_7_i_cast_fu_288_p1");
    sc_trace(mVcdFile, tmp_5_fu_292_p2, "tmp_5_fu_292_p2");
    sc_trace(mVcdFile, tmp_8_i_fu_306_p0, "tmp_8_i_fu_306_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("getConvolutionResult.hdltvin.dat");
    mHdltvoutHandle.open("getConvolutionResult.hdltvout.dat");
}

getConvolutionResult::~getConvolutionResult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete p_vertical_sobel_oper_U;
    delete p_horizontal_sobel_op_U;
}

void getConvolutionResult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        col_i7_reg_125 = col_1_reg_393.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i3_fu_236_p2.read()))) {
        col_i7_reg_125 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        col_i_reg_103 = col_reg_352.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_i_fu_151_p2.read(), ap_const_lv1_0))) {
        col_i_reg_103 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        horizontalResult_ass_fu_44 = summation_1_fu_312_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_i_fu_151_p2.read(), ap_const_lv1_1))) {
        horizontalResult_ass_fu_44 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_i_fu_151_p2.read(), ap_const_lv1_1))) {
        row_i1_reg_114 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(exitcond_i8_fu_276_p2.read(), ap_const_lv1_1))) {
        row_i1_reg_114 = row_1_reg_380.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_190_p2.read(), ap_const_lv1_1))) {
        row_i_reg_92 = row_reg_332.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        row_i_reg_92 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        verticalResult_assig_fu_40 = summation_fu_226_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        verticalResult_assig_fu_40 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        col_1_reg_393 = col_1_fu_282_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        col_reg_352 = col_fu_196_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        p_horizontal_sobel_op_1_reg_408 = p_horizontal_sobel_op_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_vertical_sobel_oper_1_reg_367 = p_vertical_sobel_oper_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        reg_142 = array_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        row_1_reg_380 = row_1_fu_242_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        row_reg_332 = row_fu_157_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_151_p2.read(), ap_const_lv1_0))) {
        tmp_1_reg_337 = tmp_1_fu_179_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_3_i_reg_372 = tmp_3_i_fu_220_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_i3_fu_236_p2.read()))) {
        tmp_3_reg_385 = tmp_3_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_8_i_reg_413 = tmp_8_i_fu_306_p2.read();
    }
}

void getConvolutionResult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getConvolutionResult::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void getConvolutionResult::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void getConvolutionResult::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void getConvolutionResult::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void getConvolutionResult::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void getConvolutionResult::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void getConvolutionResult::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void getConvolutionResult::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void getConvolutionResult::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void getConvolutionResult::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void getConvolutionResult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(exitcond1_i3_fu_236_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(exitcond1_i3_fu_236_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_return() {
    ap_return = (!horizontalResult_ass_fu_44.read().is_01() || !verticalResult_assig_fu_40.read().is_01())? sc_lv<32>(): (sc_biguint<32>(horizontalResult_ass_fu_44.read()) + sc_biguint<32>(verticalResult_assig_fu_40.read()));
}

void getConvolutionResult::thread_array_r_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        array_r_address0 =  (sc_lv<4>) (tmp_5_cast_fu_297_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        array_r_address0 =  (sc_lv<4>) (tmp_4_cast_fu_211_p1.read());
    } else {
        array_r_address0 = "XXXX";
    }
}

void getConvolutionResult::thread_array_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        array_r_ce0 = ap_const_logic_1;
    } else {
        array_r_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_col_1_fu_282_p2() {
    col_1_fu_282_p2 = (!col_i7_reg_125.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_i7_reg_125.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getConvolutionResult::thread_col_fu_196_p2() {
    col_fu_196_p2 = (!col_i_reg_103.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_i_reg_103.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getConvolutionResult::thread_exitcond1_i3_fu_236_p2() {
    exitcond1_i3_fu_236_p2 = (!row_i1_reg_114.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_i1_reg_114.read() == ap_const_lv2_3);
}

void getConvolutionResult::thread_exitcond1_i_fu_151_p2() {
    exitcond1_i_fu_151_p2 = (!row_i_reg_92.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_i_reg_92.read() == ap_const_lv2_3);
}

void getConvolutionResult::thread_exitcond_i8_fu_276_p2() {
    exitcond_i8_fu_276_p2 = (!col_i7_reg_125.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_i7_reg_125.read() == ap_const_lv2_3);
}

void getConvolutionResult::thread_exitcond_i_fu_190_p2() {
    exitcond_i_fu_190_p2 = (!col_i_reg_103.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_i_reg_103.read() == ap_const_lv2_3);
}

void getConvolutionResult::thread_p_horizontal_sobel_op_address0() {
    p_horizontal_sobel_op_address0 =  (sc_lv<4>) (tmp_5_cast_fu_297_p1.read());
}

void getConvolutionResult::thread_p_horizontal_sobel_op_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        p_horizontal_sobel_op_ce0 = ap_const_logic_1;
    } else {
        p_horizontal_sobel_op_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_p_shl1_cast_fu_260_p1() {
    p_shl1_cast_fu_260_p1 = esl_zext<5,4>(tmp_2_fu_252_p3.read());
}

void getConvolutionResult::thread_p_shl_cast_fu_175_p1() {
    p_shl_cast_fu_175_p1 = esl_zext<5,4>(tmp_fu_167_p3.read());
}

void getConvolutionResult::thread_p_vertical_sobel_oper_address0() {
    p_vertical_sobel_oper_address0 =  (sc_lv<4>) (tmp_4_cast_fu_211_p1.read());
}

void getConvolutionResult::thread_p_vertical_sobel_oper_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        p_vertical_sobel_oper_ce0 = ap_const_logic_1;
    } else {
        p_vertical_sobel_oper_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_row_1_fu_242_p2() {
    row_1_fu_242_p2 = (!row_i1_reg_114.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_i1_reg_114.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getConvolutionResult::thread_row_fu_157_p2() {
    row_fu_157_p2 = (!row_i_reg_92.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_i_reg_92.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getConvolutionResult::thread_summation_1_fu_312_p2() {
    summation_1_fu_312_p2 = (!horizontalResult_ass_fu_44.read().is_01() || !tmp_8_i_reg_413.read().is_01())? sc_lv<32>(): (sc_biguint<32>(horizontalResult_ass_fu_44.read()) + sc_biguint<32>(tmp_8_i_reg_413.read()));
}

void getConvolutionResult::thread_summation_fu_226_p2() {
    summation_fu_226_p2 = (!verticalResult_assig_fu_40.read().is_01() || !tmp_3_i_reg_372.read().is_01())? sc_lv<32>(): (sc_biguint<32>(verticalResult_assig_fu_40.read()) + sc_biguint<32>(tmp_3_i_reg_372.read()));
}

void getConvolutionResult::thread_tmp_1_fu_179_p2() {
    tmp_1_fu_179_p2 = (!p_shl_cast_fu_175_p1.read().is_01() || !tmp_i_cast_fu_163_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_175_p1.read()) - sc_biguint<5>(tmp_i_cast_fu_163_p1.read()));
}

void getConvolutionResult::thread_tmp_2_fu_252_p3() {
    tmp_2_fu_252_p3 = esl_concat<2,2>(row_i1_reg_114.read(), ap_const_lv2_0);
}

void getConvolutionResult::thread_tmp_2_i_cast_fu_202_p1() {
    tmp_2_i_cast_fu_202_p1 = esl_zext<5,2>(col_i_reg_103.read());
}

void getConvolutionResult::thread_tmp_3_fu_264_p2() {
    tmp_3_fu_264_p2 = (!p_shl1_cast_fu_260_p1.read().is_01() || !tmp_i5_cast_fu_248_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl1_cast_fu_260_p1.read()) - sc_biguint<5>(tmp_i5_cast_fu_248_p1.read()));
}

void getConvolutionResult::thread_tmp_3_i_fu_220_p0() {
    tmp_3_i_fu_220_p0 = p_vertical_sobel_oper_1_reg_367.read();
}

void getConvolutionResult::thread_tmp_3_i_fu_220_p2() {
    tmp_3_i_fu_220_p2 = (!tmp_3_i_fu_220_p0.read().is_01() || !reg_142.read().is_01())? sc_lv<32>(): sc_bigint<3>(tmp_3_i_fu_220_p0.read()) * sc_bigint<32>(reg_142.read());
}

void getConvolutionResult::thread_tmp_4_cast_fu_211_p1() {
    tmp_4_cast_fu_211_p1 = esl_sext<64,5>(tmp_4_fu_206_p2.read());
}

void getConvolutionResult::thread_tmp_4_fu_206_p2() {
    tmp_4_fu_206_p2 = (!tmp_1_reg_337.read().is_01() || !tmp_2_i_cast_fu_202_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_1_reg_337.read()) + sc_biguint<5>(tmp_2_i_cast_fu_202_p1.read()));
}

void getConvolutionResult::thread_tmp_5_cast_fu_297_p1() {
    tmp_5_cast_fu_297_p1 = esl_sext<64,5>(tmp_5_fu_292_p2.read());
}

void getConvolutionResult::thread_tmp_5_fu_292_p2() {
    tmp_5_fu_292_p2 = (!tmp_3_reg_385.read().is_01() || !tmp_7_i_cast_fu_288_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_3_reg_385.read()) + sc_biguint<5>(tmp_7_i_cast_fu_288_p1.read()));
}

void getConvolutionResult::thread_tmp_7_i_cast_fu_288_p1() {
    tmp_7_i_cast_fu_288_p1 = esl_zext<5,2>(col_i7_reg_125.read());
}

void getConvolutionResult::thread_tmp_8_i_fu_306_p0() {
    tmp_8_i_fu_306_p0 = p_horizontal_sobel_op_1_reg_408.read();
}

void getConvolutionResult::thread_tmp_8_i_fu_306_p2() {
    tmp_8_i_fu_306_p2 = (!tmp_8_i_fu_306_p0.read().is_01() || !reg_142.read().is_01())? sc_lv<32>(): sc_bigint<3>(tmp_8_i_fu_306_p0.read()) * sc_bigint<32>(reg_142.read());
}

void getConvolutionResult::thread_tmp_fu_167_p3() {
    tmp_fu_167_p3 = esl_concat<2,2>(row_i_reg_92.read(), ap_const_lv2_0);
}

void getConvolutionResult::thread_tmp_i5_cast_fu_248_p1() {
    tmp_i5_cast_fu_248_p1 = esl_zext<5,2>(row_i1_reg_114.read());
}

void getConvolutionResult::thread_tmp_i_cast_fu_163_p1() {
    tmp_i_cast_fu_163_p1 = esl_zext<5,2>(row_i_reg_92.read());
}

void getConvolutionResult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_151_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_i_fu_190_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(exitcond1_i3_fu_236_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(exitcond_i8_fu_276_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void getConvolutionResult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_address0\" :  \"" << array_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_r_ce0\" :  \"" << array_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_r_q0\" :  \"" << array_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

