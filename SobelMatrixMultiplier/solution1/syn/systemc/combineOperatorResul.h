// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _combineOperatorResul_HH_
#define _combineOperatorResul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fxp_sqrt.h"

namespace ap_rtl {

struct combineOperatorResul : public sc_module {
    // Port declarations 5
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > verticalResult;
    sc_in< sc_lv<32> > horizontalResult;
    sc_out< sc_lv<12> > ap_return;


    // Module declarations
    combineOperatorResul(sc_module_name name);
    SC_HAS_PROCESS(combineOperatorResul);

    ~combineOperatorResul();

    sc_trace_file* mVcdFile;

    fxp_sqrt* grp_fxp_sqrt_fu_34;
    sc_signal< sc_lv<32> > result_fu_39_p2;
    sc_signal< sc_lv<32> > result_reg_78;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > result_1_fu_45_p2;
    sc_signal< sc_lv<32> > result_1_reg_83;
    sc_signal< sc_lv<32> > grp_fxp_sqrt_fu_34_in_val_V_read;
    sc_signal< sc_lv<20> > grp_fxp_sqrt_fu_34_ap_return;
    sc_signal< sc_logic > grp_fxp_sqrt_fu_34_ap_ce;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > result_fu_39_p0;
    sc_signal< sc_lv<32> > result_fu_39_p1;
    sc_signal< sc_lv<32> > result_1_fu_45_p0;
    sc_signal< sc_lv<32> > result_1_fu_45_p1;
    sc_signal< sc_lv<32> > p_Val2_3_fu_56_p2;
    sc_signal< sc_lv<32> > p_Val2_2_fu_51_p2;
    sc_signal< sc_lv<32> > verticalResult_int_reg;
    sc_signal< sc_lv<32> > horizontalResult_int_reg;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_13;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_return();
    void thread_grp_fxp_sqrt_fu_34_ap_ce();
    void thread_grp_fxp_sqrt_fu_34_in_val_V_read();
    void thread_p_Val2_2_fu_51_p2();
    void thread_p_Val2_3_fu_56_p2();
    void thread_result_1_fu_45_p0();
    void thread_result_1_fu_45_p1();
    void thread_result_1_fu_45_p2();
    void thread_result_fu_39_p0();
    void thread_result_fu_39_p1();
    void thread_result_fu_39_p2();
};

}

using namespace ap_rtl;

#endif
