-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity combineOperatorResul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    verticalResult : IN STD_LOGIC_VECTOR (31 downto 0);
    horizontalResult : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of combineOperatorResul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal result_fu_39_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal result_1_fu_45_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_reg_83 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fxp_sqrt_fu_34_in_val_V_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fxp_sqrt_fu_34_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fxp_sqrt_fu_34_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal result_fu_39_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_39_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_45_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_1_fu_45_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_56_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_51_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal verticalResult_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal horizontalResult_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component fxp_sqrt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_val_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_fxp_sqrt_fu_34 : component fxp_sqrt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_val_V_read => grp_fxp_sqrt_fu_34_in_val_V_read,
        ap_return => grp_fxp_sqrt_fu_34_ap_return,
        ap_ce => grp_fxp_sqrt_fu_34_ap_ce);





    horizontalResult_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            horizontalResult_int_reg <= horizontalResult;
        end if;
    end process;

    verticalResult_int_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            verticalResult_int_reg <= verticalResult;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                result_1_reg_83 <= result_1_fu_45_p2;
                result_reg_78 <= result_fu_39_p2;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_return <= grp_fxp_sqrt_fu_34_ap_return(19 downto 8);

    grp_fxp_sqrt_fu_34_ap_ce_assign_proc : process(ap_block_pp0_stage0_11001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
            grp_fxp_sqrt_fu_34_ap_ce <= ap_const_logic_1;
        else 
            grp_fxp_sqrt_fu_34_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fxp_sqrt_fu_34_in_val_V_read <= std_logic_vector(unsigned(p_Val2_3_fu_56_p2) + unsigned(p_Val2_2_fu_51_p2));
    p_Val2_2_fu_51_p2 <= std_logic_vector(shift_left(unsigned(result_reg_78),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    p_Val2_3_fu_56_p2 <= std_logic_vector(shift_left(unsigned(result_1_reg_83),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    result_1_fu_45_p0 <= horizontalResult_int_reg;
    result_1_fu_45_p1 <= horizontalResult_int_reg;
    result_1_fu_45_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_1_fu_45_p0) * signed(result_1_fu_45_p1))), 32));
    result_fu_39_p0 <= verticalResult_int_reg;
    result_fu_39_p1 <= verticalResult_int_reg;
    result_fu_39_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(result_fu_39_p0) * signed(result_fu_39_p1))), 32));
end behav;
