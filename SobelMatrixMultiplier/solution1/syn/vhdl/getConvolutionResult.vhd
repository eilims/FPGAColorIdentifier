-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getConvolutionResult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getConvolutionResult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getConvolutionResult,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020iclg400-1l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=86,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=209,HLS_SYN_LUT=413}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_vertical_sobel_oper_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_vertical_sobel_oper_ce0 : STD_LOGIC;
    signal p_vertical_sobel_oper_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_horizontal_sobel_op_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_horizontal_sobel_op_ce0 : STD_LOGIC;
    signal p_horizontal_sobel_op_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal row_fu_157_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_reg_332 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_179_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_i_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_reg_352 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_i_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_vertical_sobel_oper_1_reg_367 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_i_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_1_fu_242_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_1_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_3_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_385 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_i3_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_282_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_1_reg_393 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond_i8_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_horizontal_sobel_op_1_reg_408 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_i_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal row_i_reg_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i_reg_103 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal row_i1_reg_114 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_i7_reg_125 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_4_cast_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal verticalResult_assig_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal horizontalResult_ass_fu_44 : STD_LOGIC_VECTOR (31 downto 0);
    signal summation_1_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_167_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_175_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_cast_fu_163_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_i_cast_fu_202_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_i_fu_220_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_252_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_260_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i5_cast_fu_248_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_i_cast_fu_288_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_292_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_i_fu_306_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component getConvolutionResbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component getConvolutionRescud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    p_vertical_sobel_oper_U : component getConvolutionResbkb
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_vertical_sobel_oper_address0,
        ce0 => p_vertical_sobel_oper_ce0,
        q0 => p_vertical_sobel_oper_q0);

    p_horizontal_sobel_op_U : component getConvolutionRescud
    generic map (
        DataWidth => 3,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_horizontal_sobel_op_address0,
        ce0 => p_horizontal_sobel_op_ce0,
        q0 => p_horizontal_sobel_op_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_i7_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                col_i7_reg_125 <= col_1_reg_393;
            elsif (((exitcond1_i3_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                col_i7_reg_125 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    col_i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                col_i_reg_103 <= col_reg_352;
            elsif (((exitcond1_i_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_i_reg_103 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    horizontalResult_ass_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                horizontalResult_ass_fu_44 <= summation_1_fu_312_p2;
            elsif (((exitcond1_i_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                horizontalResult_ass_fu_44 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_i1_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_i1_reg_114 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_i8_fu_276_p2 = ap_const_lv1_1))) then 
                row_i1_reg_114 <= row_1_reg_380;
            end if; 
        end if;
    end process;

    row_i_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_i_reg_92 <= row_reg_332;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                row_i_reg_92 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    verticalResult_assig_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                verticalResult_assig_fu_40 <= summation_fu_226_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                verticalResult_assig_fu_40 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                col_1_reg_393 <= col_1_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_reg_352 <= col_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_horizontal_sobel_op_1_reg_408 <= p_horizontal_sobel_op_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                p_vertical_sobel_oper_1_reg_367 <= p_vertical_sobel_oper_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_142 <= array_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                row_1_reg_380 <= row_1_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_reg_332 <= row_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_151_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_1_reg_337 <= tmp_1_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_3_i_reg_372 <= tmp_3_i_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i3_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_3_reg_385 <= tmp_3_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_8_i_reg_413 <= tmp_8_i_fu_306_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_i_fu_151_p2, ap_CS_fsm_state3, exitcond_i_fu_190_p2, ap_CS_fsm_state7, exitcond1_i3_fu_236_p2, ap_CS_fsm_state8, exitcond_i8_fu_276_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_fu_151_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i3_fu_236_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_i8_fu_276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state7, exitcond1_i3_fu_236_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i3_fu_236_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond1_i3_fu_236_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_i3_fu_236_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(horizontalResult_ass_fu_44) + unsigned(verticalResult_assig_fu_40));

    array_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, tmp_4_cast_fu_211_p1, tmp_5_cast_fu_297_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_r_address0 <= tmp_5_cast_fu_297_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= tmp_4_cast_fu_211_p1(4 - 1 downto 0);
        else 
            array_r_address0 <= "XXXX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_282_p2 <= std_logic_vector(unsigned(col_i7_reg_125) + unsigned(ap_const_lv2_1));
    col_fu_196_p2 <= std_logic_vector(unsigned(col_i_reg_103) + unsigned(ap_const_lv2_1));
    exitcond1_i3_fu_236_p2 <= "1" when (row_i1_reg_114 = ap_const_lv2_3) else "0";
    exitcond1_i_fu_151_p2 <= "1" when (row_i_reg_92 = ap_const_lv2_3) else "0";
    exitcond_i8_fu_276_p2 <= "1" when (col_i7_reg_125 = ap_const_lv2_3) else "0";
    exitcond_i_fu_190_p2 <= "1" when (col_i_reg_103 = ap_const_lv2_3) else "0";
    p_horizontal_sobel_op_address0 <= tmp_5_cast_fu_297_p1(4 - 1 downto 0);

    p_horizontal_sobel_op_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            p_horizontal_sobel_op_ce0 <= ap_const_logic_1;
        else 
            p_horizontal_sobel_op_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_252_p3),5));
    p_shl_cast_fu_175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_167_p3),5));
    p_vertical_sobel_oper_address0 <= tmp_4_cast_fu_211_p1(4 - 1 downto 0);

    p_vertical_sobel_oper_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            p_vertical_sobel_oper_ce0 <= ap_const_logic_1;
        else 
            p_vertical_sobel_oper_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_242_p2 <= std_logic_vector(unsigned(row_i1_reg_114) + unsigned(ap_const_lv2_1));
    row_fu_157_p2 <= std_logic_vector(unsigned(row_i_reg_92) + unsigned(ap_const_lv2_1));
    summation_1_fu_312_p2 <= std_logic_vector(unsigned(horizontalResult_ass_fu_44) + unsigned(tmp_8_i_reg_413));
    summation_fu_226_p2 <= std_logic_vector(unsigned(verticalResult_assig_fu_40) + unsigned(tmp_3_i_reg_372));
    tmp_1_fu_179_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_175_p1) - unsigned(tmp_i_cast_fu_163_p1));
    tmp_2_fu_252_p3 <= (row_i1_reg_114 & ap_const_lv2_0);
    tmp_2_i_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i_reg_103),5));
    tmp_3_fu_264_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_260_p1) - unsigned(tmp_i5_cast_fu_248_p1));
    tmp_3_i_fu_220_p0 <= p_vertical_sobel_oper_1_reg_367;
    tmp_3_i_fu_220_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_3_i_fu_220_p0) * signed(reg_142))), 32));
        tmp_4_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_206_p2),64));

    tmp_4_fu_206_p2 <= std_logic_vector(unsigned(tmp_1_reg_337) + unsigned(tmp_2_i_cast_fu_202_p1));
        tmp_5_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_292_p2),64));

    tmp_5_fu_292_p2 <= std_logic_vector(unsigned(tmp_3_reg_385) + unsigned(tmp_7_i_cast_fu_288_p1));
    tmp_7_i_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_i7_reg_125),5));
    tmp_8_i_fu_306_p0 <= p_horizontal_sobel_op_1_reg_408;
    tmp_8_i_fu_306_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_8_i_fu_306_p0) * signed(reg_142))), 32));
    tmp_fu_167_p3 <= (row_i_reg_92 & ap_const_lv2_0);
    tmp_i5_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_i1_reg_114),5));
    tmp_i_cast_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_i_reg_92),5));
end behav;
