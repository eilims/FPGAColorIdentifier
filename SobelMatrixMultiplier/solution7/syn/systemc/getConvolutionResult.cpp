// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getConvolutionResult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getConvolutionResult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getConvolutionResult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state1 = "1";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state7 = "1000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state8 = "10000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state9 = "100000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state10 = "1000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state11 = "10000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state12 = "100000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state13 = "1000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state14 = "10000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state15 = "100000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state16 = "1000000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state17 = "10000000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state18 = "100000000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state19 = "1000000000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state20 = "10000000000000000";
const sc_lv<18> getConvolutionResult::ap_ST_fsm_state21 = "100000000000000000";
const sc_lv<32> getConvolutionResult::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool getConvolutionResult::ap_const_boolean_1 = true;
const sc_lv<32> getConvolutionResult::ap_const_lv32_2 = "10";
const bool getConvolutionResult::ap_const_boolean_0 = false;
const sc_lv<1> getConvolutionResult::ap_const_lv1_0 = "0";
const sc_lv<32> getConvolutionResult::ap_const_lv32_1 = "1";
const sc_lv<1> getConvolutionResult::ap_const_lv1_1 = "1";
const sc_lv<2> getConvolutionResult::ap_const_lv2_0 = "00";
const sc_lv<32> getConvolutionResult::ap_const_lv32_3 = "11";
const sc_lv<64> getConvolutionResult::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> getConvolutionResult::ap_const_lv64_1 = "1";
const sc_lv<64> getConvolutionResult::ap_const_lv64_2 = "10";
const sc_lv<2> getConvolutionResult::ap_const_lv2_3 = "11";
const sc_lv<2> getConvolutionResult::ap_const_lv2_1 = "1";
const sc_lv<32> getConvolutionResult::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> getConvolutionResult::ap_const_lv32_FFFFFFFE = "11111111111111111111111111111110";
const sc_lv<32> getConvolutionResult::ap_const_lv32_11 = "10001";

getConvolutionResult::getConvolutionResult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_combineOperatorResul_fu_183 = new combineOperatorResul("grp_combineOperatorResul_fu_183");
    grp_combineOperatorResul_fu_183->ap_clk(ap_clk);
    grp_combineOperatorResul_fu_183->ap_rst(ap_rst);
    grp_combineOperatorResul_fu_183->verticalResult(verticalResult_reg_171);
    grp_combineOperatorResul_fu_183->horizontalResult(horizontalResult_reg_159);
    grp_combineOperatorResul_fu_183->ap_return(grp_combineOperatorResul_fu_183_ap_return);
    getConvolutionResbkb_U4 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U4");
    getConvolutionResbkb_U4->din0(array_0_q0);
    getConvolutionResbkb_U4->din1(array_1_q0);
    getConvolutionResbkb_U4->din2(array_2_q0);
    getConvolutionResbkb_U4->din3(i_reg_147);
    getConvolutionResbkb_U4->dout(grp_fu_191_p5);
    getConvolutionResbkb_U5 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U5");
    getConvolutionResbkb_U5->din0(ap_var_for_const0);
    getConvolutionResbkb_U5->din1(ap_var_for_const1);
    getConvolutionResbkb_U5->din2(ap_var_for_const0);
    getConvolutionResbkb_U5->din3(i_reg_147);
    getConvolutionResbkb_U5->dout(tmp_3_fu_224_p5);
    getConvolutionResbkb_U6 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U6");
    getConvolutionResbkb_U6->din0(ap_var_for_const0);
    getConvolutionResbkb_U6->din1(ap_var_for_const2);
    getConvolutionResbkb_U6->din2(ap_var_for_const3);
    getConvolutionResbkb_U6->din3(i_reg_147);
    getConvolutionResbkb_U6->dout(tmp_5_fu_236_p5);
    getConvolutionResbkb_U7 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U7");
    getConvolutionResbkb_U7->din0(array_0_q1);
    getConvolutionResbkb_U7->din1(array_1_q1);
    getConvolutionResbkb_U7->din2(array_2_q1);
    getConvolutionResbkb_U7->din3(i_reg_147);
    getConvolutionResbkb_U7->dout(tmp_7_fu_248_p5);
    getConvolutionResbkb_U8 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U8");
    getConvolutionResbkb_U8->din0(ap_var_for_const1);
    getConvolutionResbkb_U8->din1(ap_var_for_const2);
    getConvolutionResbkb_U8->din2(ap_var_for_const4);
    getConvolutionResbkb_U8->din3(i_reg_147);
    getConvolutionResbkb_U8->dout(tmp_8_fu_260_p5);
    getConvolutionResbkb_U9 = new getConvolutionResbkb<1,1,32,32,32,2,32>("getConvolutionResbkb_U9");
    getConvolutionResbkb_U9->din0(ap_var_for_const3);
    getConvolutionResbkb_U9->din1(ap_var_for_const4);
    getConvolutionResbkb_U9->din2(ap_var_for_const3);
    getConvolutionResbkb_U9->din3(i_reg_147);
    getConvolutionResbkb_U9->dout(tmp_s_fu_281_p5);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond1_fu_212_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_151_p4);
    sensitive << ( i_reg_147 );
    sensitive << ( exitcond1_reg_372 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( i_1_reg_376 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_combineOperatorResul_fu_183_ap_return );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_array_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_array_0_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_array_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_array_0_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_array_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_array_1_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_array_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_array_1_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_array_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_array_2_address1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_array_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_array_2_ce1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_exitcond1_fu_212_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_phi_fu_151_p4 );

    SC_METHOD(thread_grp_fu_207_p2);
    sensitive << ( reg_203 );
    sensitive << ( tmp_5_reg_386 );

    SC_METHOD(thread_horizontalResult_2_2_fu_317_p2);
    sensitive << ( horizontalResult_reg_159 );
    sensitive << ( tmp_11_fu_312_p2 );

    SC_METHOD(thread_i_1_fu_218_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_151_p4 );

    SC_METHOD(thread_tmp1_fu_308_p2);
    sensitive << ( tmp_6_1_reg_411 );
    sensitive << ( tmp_6_2_reg_426 );

    SC_METHOD(thread_tmp_10_fu_298_p2);
    sensitive << ( tmp_4_reg_401 );
    sensitive << ( tmp_4_2_reg_421 );

    SC_METHOD(thread_tmp_11_fu_312_p2);
    sensitive << ( tmp_6_reg_406 );
    sensitive << ( tmp1_fu_308_p2 );

    SC_METHOD(thread_tmp_4_2_fu_293_p2);
    sensitive << ( reg_203 );
    sensitive << ( tmp_s_reg_416 );

    SC_METHOD(thread_tmp_4_fu_272_p2);
    sensitive << ( reg_203 );
    sensitive << ( tmp_3_reg_381 );

    SC_METHOD(thread_tmp_6_1_fu_277_p2);
    sensitive << ( tmp_7_reg_391 );
    sensitive << ( tmp_8_reg_396 );

    SC_METHOD(thread_verticalResult_2_2_fu_302_p2);
    sensitive << ( verticalResult_reg_171 );
    sensitive << ( tmp_10_fu_298_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond1_fu_212_p2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    ap_CS_fsm = "000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getConvolutionResult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_0_address0, "(port)array_0_address0");
    sc_trace(mVcdFile, array_0_ce0, "(port)array_0_ce0");
    sc_trace(mVcdFile, array_0_q0, "(port)array_0_q0");
    sc_trace(mVcdFile, array_0_address1, "(port)array_0_address1");
    sc_trace(mVcdFile, array_0_ce1, "(port)array_0_ce1");
    sc_trace(mVcdFile, array_0_q1, "(port)array_0_q1");
    sc_trace(mVcdFile, array_1_address0, "(port)array_1_address0");
    sc_trace(mVcdFile, array_1_ce0, "(port)array_1_ce0");
    sc_trace(mVcdFile, array_1_q0, "(port)array_1_q0");
    sc_trace(mVcdFile, array_1_address1, "(port)array_1_address1");
    sc_trace(mVcdFile, array_1_ce1, "(port)array_1_ce1");
    sc_trace(mVcdFile, array_1_q1, "(port)array_1_q1");
    sc_trace(mVcdFile, array_2_address0, "(port)array_2_address0");
    sc_trace(mVcdFile, array_2_ce0, "(port)array_2_ce0");
    sc_trace(mVcdFile, array_2_q0, "(port)array_2_q0");
    sc_trace(mVcdFile, array_2_address1, "(port)array_2_address1");
    sc_trace(mVcdFile, array_2_ce1, "(port)array_2_ce1");
    sc_trace(mVcdFile, array_2_q1, "(port)array_2_q1");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_reg_147, "i_reg_147");
    sc_trace(mVcdFile, horizontalResult_reg_159, "horizontalResult_reg_159");
    sc_trace(mVcdFile, verticalResult_reg_171, "verticalResult_reg_171");
    sc_trace(mVcdFile, grp_fu_191_p5, "grp_fu_191_p5");
    sc_trace(mVcdFile, reg_203, "reg_203");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage1_iter1, "ap_block_state5_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, exitcond1_reg_372, "exitcond1_reg_372");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter2, "ap_block_state6_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond1_fu_212_p2, "exitcond1_fu_212_p2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond1_reg_372, "ap_reg_pp0_iter1_exitcond1_reg_372");
    sc_trace(mVcdFile, i_1_fu_218_p2, "i_1_fu_218_p2");
    sc_trace(mVcdFile, i_1_reg_376, "i_1_reg_376");
    sc_trace(mVcdFile, tmp_3_fu_224_p5, "tmp_3_fu_224_p5");
    sc_trace(mVcdFile, tmp_3_reg_381, "tmp_3_reg_381");
    sc_trace(mVcdFile, tmp_5_fu_236_p5, "tmp_5_fu_236_p5");
    sc_trace(mVcdFile, tmp_5_reg_386, "tmp_5_reg_386");
    sc_trace(mVcdFile, tmp_7_fu_248_p5, "tmp_7_fu_248_p5");
    sc_trace(mVcdFile, tmp_7_reg_391, "tmp_7_reg_391");
    sc_trace(mVcdFile, tmp_8_fu_260_p5, "tmp_8_fu_260_p5");
    sc_trace(mVcdFile, tmp_8_reg_396, "tmp_8_reg_396");
    sc_trace(mVcdFile, tmp_4_fu_272_p2, "tmp_4_fu_272_p2");
    sc_trace(mVcdFile, tmp_4_reg_401, "tmp_4_reg_401");
    sc_trace(mVcdFile, grp_fu_207_p2, "grp_fu_207_p2");
    sc_trace(mVcdFile, tmp_6_reg_406, "tmp_6_reg_406");
    sc_trace(mVcdFile, tmp_6_1_fu_277_p2, "tmp_6_1_fu_277_p2");
    sc_trace(mVcdFile, tmp_6_1_reg_411, "tmp_6_1_reg_411");
    sc_trace(mVcdFile, tmp_s_fu_281_p5, "tmp_s_fu_281_p5");
    sc_trace(mVcdFile, tmp_s_reg_416, "tmp_s_reg_416");
    sc_trace(mVcdFile, tmp_4_2_fu_293_p2, "tmp_4_2_fu_293_p2");
    sc_trace(mVcdFile, tmp_4_2_reg_421, "tmp_4_2_reg_421");
    sc_trace(mVcdFile, tmp_6_2_reg_426, "tmp_6_2_reg_426");
    sc_trace(mVcdFile, verticalResult_2_2_fu_302_p2, "verticalResult_2_2_fu_302_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, horizontalResult_2_2_fu_317_p2, "horizontalResult_2_2_fu_317_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, grp_combineOperatorResul_fu_183_ap_return, "grp_combineOperatorResul_fu_183_ap_return");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_151_p4, "ap_phi_mux_i_phi_fu_151_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, tmp_10_fu_298_p2, "tmp_10_fu_298_p2");
    sc_trace(mVcdFile, tmp1_fu_308_p2, "tmp1_fu_308_p2");
    sc_trace(mVcdFile, tmp_11_fu_312_p2, "tmp_11_fu_312_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("getConvolutionResult.hdltvin.dat");
    mHdltvoutHandle.open("getConvolutionResult.hdltvout.dat");
}

getConvolutionResult::~getConvolutionResult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_combineOperatorResul_fu_183;
    delete getConvolutionResbkb_U4;
    delete getConvolutionResbkb_U5;
    delete getConvolutionResbkb_U6;
    delete getConvolutionResbkb_U7;
    delete getConvolutionResbkb_U8;
    delete getConvolutionResbkb_U9;
}

void getConvolutionResult::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void getConvolutionResult::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_2;
}

void getConvolutionResult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv32_1;
}

void getConvolutionResult::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_FFFFFFFF;
}

void getConvolutionResult::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv32_FFFFFFFE;
}

void getConvolutionResult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond1_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        horizontalResult_reg_159 = horizontalResult_2_2_fu_317_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        horizontalResult_reg_159 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_147 = i_1_reg_376.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_147 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond1_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        verticalResult_reg_171 = verticalResult_2_2_fu_302_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        verticalResult_reg_171 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond1_reg_372 = exitcond1_reg_372.read();
        exitcond1_reg_372 = exitcond1_fu_212_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_1_reg_376 = i_1_fu_218_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        reg_203 = grp_fu_191_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0))) {
        tmp_3_reg_381 = tmp_3_fu_224_p5.read();
        tmp_5_reg_386 = tmp_5_fu_236_p5.read();
        tmp_7_reg_391 = tmp_7_fu_248_p5.read();
        tmp_8_reg_396 = tmp_8_fu_260_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond1_reg_372.read()))) {
        tmp_4_2_reg_421 = tmp_4_2_fu_293_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_4_reg_401 = tmp_4_fu_272_p2.read();
        tmp_6_1_reg_411 = tmp_6_1_fu_277_p2.read();
        tmp_s_reg_416 = tmp_s_fu_281_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond1_reg_372.read()))) {
        tmp_6_2_reg_426 = grp_fu_207_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_6_reg_406 = grp_fu_207_p2.read();
    }
}

void getConvolutionResult::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void getConvolutionResult::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void getConvolutionResult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void getConvolutionResult::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[17];
}

void getConvolutionResult::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[3];
}

void getConvolutionResult::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_state5_pp0_stage1_iter1() {
    ap_block_state5_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_block_state6_pp0_stage0_iter2() {
    ap_block_state6_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void getConvolutionResult::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void getConvolutionResult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_phi_mux_i_phi_fu_151_p4() {
    if ((esl_seteq<1,1,1>(exitcond1_reg_372.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_phi_fu_151_p4 = i_1_reg_376.read();
    } else {
        ap_phi_mux_i_phi_fu_151_p4 = i_reg_147.read();
    }
}

void getConvolutionResult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_ap_return() {
    ap_return = esl_zext<32,12>(grp_combineOperatorResul_fu_183_ap_return.read());
}

void getConvolutionResult::thread_array_0_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            array_0_address0 =  (sc_lv<2>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            array_0_address0 =  (sc_lv<2>) (ap_const_lv64_0);
        } else {
            array_0_address0 = "XX";
        }
    } else {
        array_0_address0 = "XX";
    }
}

void getConvolutionResult::thread_array_0_address1() {
    array_0_address1 =  (sc_lv<2>) (ap_const_lv64_1);
}

void getConvolutionResult::thread_array_0_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        array_0_ce0 = ap_const_logic_1;
    } else {
        array_0_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_array_0_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        array_0_ce1 = ap_const_logic_1;
    } else {
        array_0_ce1 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_array_1_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            array_1_address0 =  (sc_lv<2>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            array_1_address0 =  (sc_lv<2>) (ap_const_lv64_0);
        } else {
            array_1_address0 = "XX";
        }
    } else {
        array_1_address0 = "XX";
    }
}

void getConvolutionResult::thread_array_1_address1() {
    array_1_address1 =  (sc_lv<2>) (ap_const_lv64_1);
}

void getConvolutionResult::thread_array_1_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        array_1_ce0 = ap_const_logic_1;
    } else {
        array_1_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_array_1_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        array_1_ce1 = ap_const_logic_1;
    } else {
        array_1_ce1 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_array_2_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
            array_2_address0 =  (sc_lv<2>) (ap_const_lv64_2);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                    esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
            array_2_address0 =  (sc_lv<2>) (ap_const_lv64_0);
        } else {
            array_2_address0 = "XX";
        }
    } else {
        array_2_address0 = "XX";
    }
}

void getConvolutionResult::thread_array_2_address1() {
    array_2_address1 =  (sc_lv<2>) (ap_const_lv64_1);
}

void getConvolutionResult::thread_array_2_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        array_2_ce0 = ap_const_logic_1;
    } else {
        array_2_ce0 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_array_2_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        array_2_ce1 = ap_const_logic_1;
    } else {
        array_2_ce1 = ap_const_logic_0;
    }
}

void getConvolutionResult::thread_exitcond1_fu_212_p2() {
    exitcond1_fu_212_p2 = (!ap_phi_mux_i_phi_fu_151_p4.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_phi_fu_151_p4.read() == ap_const_lv2_3);
}

void getConvolutionResult::thread_grp_fu_207_p2() {
    grp_fu_207_p2 = (!tmp_5_reg_386.read().is_01() || !reg_203.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_5_reg_386.read()) * sc_bigint<32>(reg_203.read());
}

void getConvolutionResult::thread_horizontalResult_2_2_fu_317_p2() {
    horizontalResult_2_2_fu_317_p2 = (!horizontalResult_reg_159.read().is_01() || !tmp_11_fu_312_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(horizontalResult_reg_159.read()) + sc_biguint<32>(tmp_11_fu_312_p2.read()));
}

void getConvolutionResult::thread_i_1_fu_218_p2() {
    i_1_fu_218_p2 = (!ap_phi_mux_i_phi_fu_151_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_i_phi_fu_151_p4.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void getConvolutionResult::thread_tmp1_fu_308_p2() {
    tmp1_fu_308_p2 = (!tmp_6_1_reg_411.read().is_01() || !tmp_6_2_reg_426.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_1_reg_411.read()) + sc_biguint<32>(tmp_6_2_reg_426.read()));
}

void getConvolutionResult::thread_tmp_10_fu_298_p2() {
    tmp_10_fu_298_p2 = (!tmp_4_2_reg_421.read().is_01() || !tmp_4_reg_401.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_4_2_reg_421.read()) + sc_biguint<32>(tmp_4_reg_401.read()));
}

void getConvolutionResult::thread_tmp_11_fu_312_p2() {
    tmp_11_fu_312_p2 = (!tmp1_fu_308_p2.read().is_01() || !tmp_6_reg_406.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp1_fu_308_p2.read()) + sc_biguint<32>(tmp_6_reg_406.read()));
}

void getConvolutionResult::thread_tmp_4_2_fu_293_p2() {
    tmp_4_2_fu_293_p2 = (!tmp_s_reg_416.read().is_01() || !reg_203.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_s_reg_416.read()) * sc_bigint<32>(reg_203.read());
}

void getConvolutionResult::thread_tmp_4_fu_272_p2() {
    tmp_4_fu_272_p2 = (!tmp_3_reg_381.read().is_01() || !reg_203.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_3_reg_381.read()) * sc_bigint<32>(reg_203.read());
}

void getConvolutionResult::thread_tmp_6_1_fu_277_p2() {
    tmp_6_1_fu_277_p2 = (!tmp_8_reg_396.read().is_01() || !tmp_7_reg_391.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_8_reg_396.read()) * sc_bigint<32>(tmp_7_reg_391.read());
}

void getConvolutionResult::thread_verticalResult_2_2_fu_302_p2() {
    verticalResult_2_2_fu_302_p2 = (!verticalResult_reg_171.read().is_01() || !tmp_10_fu_298_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(verticalResult_reg_171.read()) + sc_biguint<32>(tmp_10_fu_298_p2.read()));
}

void getConvolutionResult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<18>) ("XXXXXXXXXXXXXXXXXX");
            break;
    }
}

void getConvolutionResult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_0_address0\" :  \"" << array_0_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_0_ce0\" :  \"" << array_0_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_0_q0\" :  \"" << array_0_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_0_address1\" :  \"" << array_0_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_0_ce1\" :  \"" << array_0_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_0_q1\" :  \"" << array_0_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_1_address0\" :  \"" << array_1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_1_ce0\" :  \"" << array_1_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_1_q0\" :  \"" << array_1_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_1_address1\" :  \"" << array_1_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_1_ce1\" :  \"" << array_1_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_1_q1\" :  \"" << array_1_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_2_address0\" :  \"" << array_2_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_2_ce0\" :  \"" << array_2_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_2_q0\" :  \"" << array_2_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_2_address1\" :  \"" << array_2_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_2_ce1\" :  \"" << array_2_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_2_q1\" :  \"" << array_2_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

