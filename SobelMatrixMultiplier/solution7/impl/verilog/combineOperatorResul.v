// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module combineOperatorResul (
        ap_clk,
        ap_rst,
        verticalResult,
        horizontalResult,
        ap_return
);


input   ap_clk;
input   ap_rst;
input  [31:0] verticalResult;
input  [31:0] horizontalResult;
output  [11:0] ap_return;

wire   [31:0] result_fu_39_p2;
reg   [31:0] result_reg_78;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] result_1_fu_45_p2;
reg   [31:0] result_1_reg_83;
wire   [31:0] grp_fxp_sqrt_fu_34_in_val_V_read;
wire   [19:0] grp_fxp_sqrt_fu_34_ap_return;
reg    grp_fxp_sqrt_fu_34_ap_ce;
wire    ap_block_pp0_stage0;
wire  signed [31:0] result_fu_39_p0;
wire  signed [31:0] result_fu_39_p1;
wire  signed [31:0] result_1_fu_45_p0;
wire  signed [31:0] result_1_fu_45_p1;
wire   [31:0] p_Val2_3_fu_56_p2;
wire   [31:0] p_Val2_2_fu_51_p2;
reg   [31:0] verticalResult_int_reg;
reg   [31:0] horizontalResult_int_reg;

fxp_sqrt grp_fxp_sqrt_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val_V_read(grp_fxp_sqrt_fu_34_in_val_V_read),
    .ap_return(grp_fxp_sqrt_fu_34_ap_return),
    .ap_ce(grp_fxp_sqrt_fu_34_ap_ce)
);

always @ (posedge ap_clk) begin
    horizontalResult_int_reg <= horizontalResult;
end

always @ (posedge ap_clk) begin
    verticalResult_int_reg <= verticalResult;
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        result_1_reg_83 <= result_1_fu_45_p2;
        result_reg_78 <= result_fu_39_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        grp_fxp_sqrt_fu_34_ap_ce = 1'b1;
    end else begin
        grp_fxp_sqrt_fu_34_ap_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_return = {{grp_fxp_sqrt_fu_34_ap_return[19:8]}};

assign grp_fxp_sqrt_fu_34_in_val_V_read = (p_Val2_3_fu_56_p2 + p_Val2_2_fu_51_p2);

assign p_Val2_2_fu_51_p2 = result_reg_78 << 32'd8;

assign p_Val2_3_fu_56_p2 = result_1_reg_83 << 32'd8;

assign result_1_fu_45_p0 = horizontalResult_int_reg;

assign result_1_fu_45_p1 = horizontalResult_int_reg;

assign result_1_fu_45_p2 = ($signed(result_1_fu_45_p0) * $signed(result_1_fu_45_p1));

assign result_fu_39_p0 = verticalResult_int_reg;

assign result_fu_39_p1 = verticalResult_int_reg;

assign result_fu_39_p2 = ($signed(result_fu_39_p0) * $signed(result_fu_39_p1));

endmodule //combineOperatorResul
